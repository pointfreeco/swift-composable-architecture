{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pullback"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewRoot"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"keyPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV","text":"BindingAction"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A binding action over a new type of root state."}]}]},{"kind":"parameters","parameters":[{"name":"keyPath","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path from a new type of root state to the original root state."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful in transforming binding actions on view state into binding actions on reducer state"},{"type":"text","text":" "},{"type":"text","text":"when the domain contains "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, we can model an feature that can bind an integer count to a stepper and make a"},{"type":"text","text":" "},{"type":"text","text":"network request to fetch a fact about that integer with the following domain:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyFeature: ReducerProtocol {","  struct State: Equatable {","    @BindableState var count = 0","    var fact: String?","    ...","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","    case factButtonTapped","    case factResponse(String?)","    ...","  }","","  @Dependency(\\.numberFact) var numberFact","","  var body: some ReducerProtocol<State, Action> {","    BindingReducer()","    \/\/ ...","  }","}","","struct MyFeatureView: View {","  let store: StoreOf<MyFeature>","","  var view: some View {","    \/\/ ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The view may want to limit the state and actions it has access to by introducing a"},{"type":"text","text":" "},{"type":"text","text":"view-specific domain that contains only the state and actions the view needs. Not only will"},{"type":"text","text":" "},{"type":"text","text":"this minimize the number of times a view’s "},{"type":"codeVoice","code":"body"},{"type":"text","text":" is computed, it will prevent the view"},{"type":"text","text":" "},{"type":"text","text":"from accessing state or sending actions outside its purview. We can define it with its own"},{"type":"text","text":" "},{"type":"text","text":"bindable state and bindable action:"}]},{"type":"codeListing","syntax":"swift","code":["extension MyFeatureView {","  struct ViewState: Equatable {","    @BindableState var count: Int","    let fact: String?","    \/\/ no access to any other state on `MyFeature.State`, like child domains","  }","","  enum ViewAction: BindableAction {","    case binding(BindingAction<ViewState>)","    case factButtonTapped","    \/\/ no access to any other action on `MyFeature.Action`, like `factResponse`","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to transform a "},{"type":"codeVoice","code":"BindingAction<ViewState>"},{"type":"text","text":" sent from the view domain into a"},{"type":"text","text":" "},{"type":"codeVoice","code":"BindingAction<MyFeature.State>"},{"type":"text","text":", we need a writable key path from "},{"type":"codeVoice","code":"MyFeature.State"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":". We can synthesize one by defining a computed property on "},{"type":"codeVoice","code":"MyFeature.State"},{"type":"text","text":" with a"},{"type":"text","text":" "},{"type":"text","text":"getter and a setter. The setter should communicate any mutations to bindable state back to the"},{"type":"text","text":" "},{"type":"text","text":"parent state:"}]},{"type":"codeListing","syntax":"swift","code":["extension MyFeature.State {","  var view: MyFeatureView.ViewState {","    get { .init(count: self.count, fact: self.fact) }","    set { self.count = newValue.count }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With this property defined it is now possible to transform a "},{"type":"codeVoice","code":"BindingAction<ViewState>"},{"type":"text","text":" into"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"BindingAction<MyFeature.State>"},{"type":"text","text":", which means we can transform a "},{"type":"codeVoice","code":"ViewAction"},{"type":"text","text":" into an"},{"type":"text","text":" "},{"type":"codeVoice","code":"MyFeature.Action"},{"type":"text","text":". This is where "},{"type":"codeVoice","code":"pullback"},{"type":"text","text":" comes into play: we can unwrap the view action’s"},{"type":"text","text":" "},{"type":"text","text":"binding action on view state and transform it with "},{"type":"codeVoice","code":"pullback"},{"type":"text","text":" to work with feature state. We"},{"type":"text","text":" "},{"type":"text","text":"can define a helper that performs this transformation, as well as route any other view actions"},{"type":"text","text":" "},{"type":"text","text":"to their reducer equivalents:"}]},{"type":"codeListing","syntax":"swift","code":["extension MyFeature.Action {","  static func view(_ viewAction: MyFeature.View.ViewAction) -> Self {","    switch viewAction {","    case let .binding(action):","      \/\/ transform view binding actions into feature binding actions","      return .binding(action.pullback(\\.view))","","    case let .factButtonTapped","      \/\/ route `ViewAction.factButtonTapped` to `MyFeature.Action.factButtonTapped`","      return .factButtonTapped","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, in the view we can invoke "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)"},{"type":"text","text":" with these domain"},{"type":"text","text":" "},{"type":"text","text":"transformations to leverage the view store’s binding helpers:"}]},{"type":"codeListing","syntax":"swift","code":["WithViewStore(","  self.store, observe: \\.view, send: MyFeature.Action.view",") { viewStore in","  Stepper(\"\\(viewStore.count)\", viewStore.binding(\\.$count))","  Button(\"Get number fact\") { viewStore.send(.factButtonTapped) }","  if let fact = viewStore.fact {","    Text(fact)","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindingaction\/pullback(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction\/pullback(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Transforms a binding action over some root state to some other type of root state given a"},{"type":"text","text":" "},{"type":"text","text":"key path."}],"kind":"symbol","metadata":{"role":"symbol","title":"pullback(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pullback"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewRoot"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"BindingAction","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:22ComposableArchitecture13BindingActionV8pullbackyACyqd__Gs15WritableKeyPathCyqd__xGlF","extendedModule":"ComposableArchitecture","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction/pullback(_:)":{"role":"symbol","title":"pullback(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pullback"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewRoot"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"BindingAction","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewRoot"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Transforms a binding action over some root state to some other type of root state given a"},{"type":"text","text":" "},{"type":"text","text":"key path."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction\/pullback(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindingaction\/pullback(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"role":"symbol","title":"BindingAction","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingAction"}],"abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"url":"\/documentation\/composablearchitecture\/bindingaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"role":"symbol","title":"BindableAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"type":"text","text":" case that holds a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"url":"\/documentation\/composablearchitecture\/bindableaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI":{"role":"collectionGroup","title":"SwiftUI Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)":{"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableState":{"role":"symbol","title":"BindableState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableState"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"type":"text","text":"in SwiftUI views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableState"}],"url":"\/documentation\/composablearchitecture\/bindablestate"}}}