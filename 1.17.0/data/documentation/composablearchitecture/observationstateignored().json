{"metadata":{"externalID":"s:22ComposableArchitecture23ObservationStateIgnoredyycfm","title":"ObservationStateIgnored()","role":"symbol","symbolKind":"macro","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Macro","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservationStateIgnored","kind":"identifier"},{"kind":"text","text":"()"}]},"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationStateIgnored()","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"]]},"seeAlsoSections":[{"generated":true,"anchor":"Supporting-macros","title":"Supporting macros","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationStateTracked()"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/observationstateignored()"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"kind":"text","text":"(accessor, names: named(willSet)) "},{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ObservationStateIgnored","kind":"identifier"},{"text":"()","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"url":"\/documentation\/composablearchitecture\/observablestate()","title":"ObservableState()","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","kind":"symbol","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationStateTracked()":{"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/observationstatetracked()","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationStateTracked()","title":"ObservationStateTracked()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservationStateTracked"},{"text":"()","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationStateIgnored()":{"kind":"symbol","title":"ObservationStateIgnored()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservationStateIgnored"},{"text":"()","kind":"text"}],"url":"\/documentation\/composablearchitecture\/observationstateignored()","type":"topic","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationStateIgnored()","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"kind":"symbol","role":"symbol","title":"State","type":"topic","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"State"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","url":"\/documentation\/composablearchitecture\/reducer\/state","abstract":[{"type":"text","text":"A type that holds the current state of the reducer."}],"required":true}}}