{"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"metadata":{"roleHeading":"Case","role":"symbol","symbolKind":"case","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"off","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"showSkippedAssertions"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"Exhaustivity.off(showSkippedAssertions:)","modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture12ExhaustivityO3offyACSb_tcACmF"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"off"},{"text":"(","kind":"text"},{"text":"showSkippedAssertions","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"true"},{"text":", skipped assertions will be reported as","type":"text"},{"text":" ","type":"text"},{"text":"expected failures.","type":"text"}],"type":"paragraph"}],"name":"showSkippedAssertions"}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This settings allows you to assert on any subset of state changes and actions received from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"effects."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When configured to "},{"code":"showSkippedAssertions","type":"codeVoice"},{"type":"text","text":", any state not asserted on or received actions"},{"text":" ","type":"text"},{"type":"text","text":"skipped will be reported in a grey informational box next to the assertion. This is handy for"},{"type":"text","text":" "},{"type":"text","text":"when you want non-exhaustivity but you still want to know what all you are missing from your"},{"type":"text","text":" "},{"text":"assertions.","type":"text"}]}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)","type":"topic","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"off"},{"kind":"text","text":"("},{"text":"showSkippedAssertions","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":")"}],"role":"symbol","title":"Exhaustivity.off(showSkippedAssertions:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity":{"abstract":[{"text":"The exhaustivity of assertions made by the test store.","type":"text"}],"url":"\/documentation\/composablearchitecture\/exhaustivity","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Exhaustivity"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"Exhaustivity","kind":"identifier"}],"role":"symbol","title":"Exhaustivity","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","kind":"typeIdentifier","text":"Exhaustivity"}],"url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"title":"exhaustivity"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"title":"TestStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","title":"ComposableArchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic"}}}