@Tutorial(time: 30) {
  @Intro(title: "Multiple presentation destinations") {
    In the previous section you learned how to model your domains so that a parent feature can
    present a child feature. Now let's learn what has to be done if a parent feature wants to be
    able to present _many_ features.
  }
  
  @Section(title: "Delete contacts") {
    @ContentAndMedia {
      Let's add a new feature to the contacts list that allows you to delete a contact, but first
      you must confirm deletion. We will implement the confirmation step using an alert. The tools
      that we used last section, such as ``ComposableArchitecture/Presents()``,
      ``ComposableArchitecture/PresentationAction`` and
      ``ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)-4f2at``, all work
      for presenting alerts from optional state too.
    }
    
    @Steps {
      @Step {
        Go back to ContactsFeature.swift that we worked in from the last section. Add a new action
        that will be sent when the delete button is tapped on a row in the contacts list.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0000.swift, previousFile: 02-02-01-code-0000-previous.swift)
      }
      
      When the delete button is tapped we want to show an alert asking the user to confirm deletion
      of the contact.
      
      @Step {
        Add a piece of optional ``ComposableArchitecture/Presents()`` state to the 
        `ContactsFeature` state. We will further use `AlertState` as it allows us to describe all
        of the details of the alert in a manner that is test friendly since it is `Equatable`.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0001.swift)
      }
      
      @Step {
        Add a new case to the `ContactsFeature`'s action that represents the actions that can 
        happen in the alert. We will use ``ComposableArchitecture/PresentationAction`` for this.
        
        > Note: The only choices in the alert are to cancel or confirm deletion, but we do not need 
        to model the cancel action. That will be handled automatically for us.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0002.swift)
      }
      
      Now that we have new state modeled in our domain for the presentation of the alert, we can
      properly implement the `deleteButtonTapped` action.
      
      @Step {
        When the delete button is tapped we can populate the `alert` state in order to ask the user
        to confirm deletion of the contact.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0003.swift)
      }
      
      @Step {
        Integrate the alert's logic into the `ContactsFeature` by making another use of the 
        ``ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)-4f2at`` operator.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0004.swift)
      }
      
      @Step {
        Listen for when the confirmation action is sent in the alert, and at that time we can
        actually remove the element from the array.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0005.swift)
      }
      
      That's all it takes to integrate the alert it the `ContactsFeature` and implement all of its 
      logic. Next we need to integrate the alert into the view. The library ships a special
      ``SwiftUI/View/alert(store:)`` view modifier that is tuned specifically for 
      ``ComposableArchitecture/Store``s.
      
      @Step {
        Add the ``SwiftUI/View/alert(_:)`` view modifier to the `ContactsView`, and hand it a
        store that is scoped to the alert domain.
        
        > Note: In order for the `$store.scope` syntax to work you must hold onto the store in the
        > view using the `@Bindable` property wrapper, or `@Perception.Bindable` if you are
        > targeting older platforms.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0006.swift, previousFile: 02-02-01-code-0006-previous.swift)
      }
      
      @Step {
        Add a button to each row of the contacts list in order to send the `deleteButtonTapped`
        action to the view store.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0007.swift)
      }
      
      @Step {
        Run the app in the preview to see that deletion works as expected. After tapping the trash
        icon, an alert shows, and if you confirm deletion the item is removed from the list.
        
        @Video(source: "ch02-sub02-sec01-0000")
      }
      
      We've now added a new feature, that of deleting a contact, but unfortunately our domain
      is not modeled as concisely as it could be.
    }
  }
  
  @Section(title: "Improve domain modeling") {
    @ContentAndMedia {
      Currently the `ContactsFeature` can navigate to two possible destinations: either the "Add
      Contact" sheet or the delete alert. Importantly, it is not possible to be navigated to both
      destinations at once. However, that currently is possible since we are representing each of
      those destinations as optional pieces of ``ComposableArchitecture/Presents()``.
      
      The number of invalid states explodes exponentially when you use optionals to represent
      features you can navigate to. For example, 2 optionals has 1 invalid state, but 3 optionals
      has 4 invalid states, and 4 optionals has 11 invalid states. This imprecise domain modeling
      leaks complexity into your application since you can never truly know which feature is being
      presented.
      
      Let's see how to more concisely model our domains for navigating to multiple destinations.
    }
    
    @Steps {
      @Step {
        Define a new reducer, called `Destination`, nested inside the `ContactsFeature`. This 
        reducer will hold the domain and logic for every feature that can be navigated to from
        the contacts feature, and as such it will be an enum.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0000.swift)
      }
      
      @Step {
        Add a case for for the "Add contact" feature. Note that we are holding onto the actual
        `AddContactFeature` reducer in the case, not the state. The
        ``ComposableArchitecture/Reducer()`` will fill in all the requirements for the reducer
        protocol for us automatically.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0001.swift)
      }
      
      @Step {
        Add another case to the `Destination` for the alert state that can be displayed in the
        feature.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0002.swift)
      }
      
      That is all it takes to define a single reducer that comes multiple mutually exclusive
      reducers together. You can expand the macro code in Xcode to see all the code that is
      being written for you. And if in the future this feature can navigate to another feature,
      you will only have to add a single case to the `Destination` enum.
      
      @Step {
        Replace the two pieces of optional ``ComposableArchitecture/Presents()`` with a single
        optional pointed at `Destination.State`.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0003.swift, previousFile: 02-02-02-code-0003-previous.swift)
      }
      
      Note that this now creates a compilation error letting you know that `ContactsFeature.State`
      is no longer `Equatable`. This is happening because `Destination.State` is not `Equatable`,
      and that type is generated by the [`@Reducer`](<doc:ComposableArchitecture/Reducer()>) macro.
      
      Due to a bug in the Swift compiler it is not possible to extend `Destination.State` to be
      `Equatable` yourself, and so there is an argument you can provide 
      ``ComposableArchitecture/Reducer()`` in order to apply the protocol conformance.
      
      @Step {
        Use the `state` argument of ``ComposableArchitecture/Reducer(state:action:)`` to tell the
        macro to apply an `Equatable` conformance to `Destination.State`.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0004.swift, previousFile: 02-02-02-code-0004-previous.swift)
      }

      @Step {
        Replace the two action cases that held onto ``ComposableArchitecture/PresentationAction``
        with a single case that holds onto `Destination.Action`.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0005.swift, previousFile: 02-02-02-code-0005-previous.swift)
      }
      
      Now our model is more concisely defined, and we have compile time guarantees that only 
      one destination can be active at a time. But, also now have a lot of compiler errors we need
      to fix.
      
      @Step {
        Instead of populating a piece of `addContact` optional state in order to drive navigation
        to that feature, we will now mutate `destination` to point it to the `addContact` case.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0006.swift)
      }
      
      @Step {
        And when listening for actions happening in child domains we now need to destructure the
        `.destination(.presented(_))` case, such as when the "Add Contact" feature tells us to 
        save the contact.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0007.swift)
      }
      
      @Step {
        And when the alert confirms deletion of the contact.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0008.swift)
      }
      
      @Step {
        We can handle all other destination actions by simply returning a `.none` effect to 
        represent there is no other work to perform.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0009.swift)
      }
      
      @Step {
        Update the state mutation for showing an alert to instead point the `destination` to the
        `alert` case.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0010.swift)
      }
      
      @Step {
        Replace the two `ifLet`s that were used at the bottom of the reducer with a single one that
        is focused on the `Destination` domain. It is not even necessary to specify the
        `Destination` type in this expression because it can be inferred from how the ``Reducer()``
        macro was applied to the `Destination` enum.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0011.swift)
      }
      
      That's all it takes to convert two independent, imprecisely modeled optional values into a 
      single optional enum, and we can now prove that only one destination can be active at a time.
      All that is left is to update the view so that we can specify which case of the destination
      enum drives the sheet and alert.
      
      @Step {
        When you model all of your destinations in a single optional value, you start by scoping to
        the destination domain and then you further scope into the state and action cases
        associated with the specific destination using familiar key path dot-chaining syntax. This 
        can be done with familiar dot syntax because the 
        ``ComposableArchitecture/Reducer()`` macro applies the `@CasePathable` macro to each enum.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0012.swift, previousFile: 02-02-02-code-0011-previous.swift)
      }

      @Step {
        The same can be done for the `alert` view modifier.
        
        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0013.swift)
      }

      That completes the refactor of the reducer and view to use a single piece of optional enum
      state instead using multiple optional values. The application works exactly as it did before,
      but now its domain is more concisely modeled.
    }
  }
}
