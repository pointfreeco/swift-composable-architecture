{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]]},"abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState","type":"text"}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/viewstore\/publisher"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher"],"title":"Combine integration","anchor":"Combine-integration"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"},"metadata":{"modules":[{"name":"ComposableArchitecture"}],"platforms":[],"roleHeading":"Instance Property","role":"symbol","symbolKind":"property","externalID":"s:22ComposableArchitecture9ViewStoreC9publisherAA0D9PublisherVyxGvp","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"text":"StorePublisher","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"publisher"},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@","kind":"attribute"},{"preciseIdentifier":"s:ScM","text":"MainActor","kind":"attribute"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":"> { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"This publisher supports dynamic member lookup so that you can pluck out a specific field in","type":"text"},{"text":" ","type":"text"},{"text":"the state:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["viewStore.publisher.alert","  .sink { ... }"],"type":"codeListing"},{"inlineContent":[{"text":"When the emission happens the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"text":"’s state has been updated, and so the following","type":"text"},{"text":" ","type":"text"},{"text":"precondition will pass:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["viewStore.publisher","  .sink { precondition($0 == viewStore.state) }"],"type":"codeListing"},{"inlineContent":[{"text":"This means you can either use the value passed to the closure or you can reach into","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"viewStore.state"},{"text":" directly.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Due to a bug in Combine (or feature?), the order you "},{"code":".sink","type":"codeVoice"},{"type":"text","text":" on a publisher has no"},{"type":"text","text":" "},{"type":"text","text":"bearing on the order the "},{"code":".sink","type":"codeVoice"},{"type":"text","text":" closures are called. This means the work performed inside"},{"type":"text","text":" "},{"code":"viewStore.publisher.sink","type":"codeVoice"},{"type":"text","text":" closures should be completely independent of each other. Later"},{"type":"text","text":" "},{"type":"text","text":"closures cannot assume that earlier ones have already run."}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"kind":"text","text":": () -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> any "},{"preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier","text":"Cancellable"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","deprecated":true,"kind":"symbol","title":"ifLet(then:else:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","role":"symbol","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","type":"topic","title":"UIKit Integration","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uikit","abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"role":"symbol","deprecated":true,"type":"topic","title":"publisher","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","url":"\/documentation\/composablearchitecture\/viewstore\/publisher","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"url":"\/documentation\/composablearchitecture\/store\/publisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">"}],"title":"publisher","role":"symbol","abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StorePublisher"}],"role":"symbol","abstract":[{"text":"A publisher of store state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"StorePublisher"}],"title":"StorePublisher","url":"\/documentation\/composablearchitecture\/storepublisher","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","role":"collection","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"}}}