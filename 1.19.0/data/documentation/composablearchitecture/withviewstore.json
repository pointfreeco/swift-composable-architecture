{"kind":"symbol","relationshipsSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/withviewstore"]}],"deprecationSummary":[{"inlineContent":[{"text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState","type":"text"}],"type":"paragraph"}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"],"generated":true,"title":"View containers","anchor":"View-containers"}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","text":"MainActor","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Content"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP","text":"View"}]}]},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"This helper is an alternative to observing the view store manually on your view, which requires"},{"text":" ","type":"text"},{"text":"the boilerplate of a custom initializer.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"It is important to properly leverage the ","type":"text"},{"type":"codeVoice","code":"observe"},{"text":" argument in order to observe","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only the state that your view needs to do its job. See the “Performance” section below for more"},{"type":"text","text":" "},{"text":"information.","type":"text"}],"type":"paragraph"}],"style":"important","type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"text":"For example, the following view, which manually observes the store it is handed by constructing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a view store in its initializer:"}]},{"syntax":"swift","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","  @ObservedObject var viewStore: ViewStoreOf<Profile>","","  init(store: StoreOf<Profile>) {","    self.store = store","    self.viewStore = ViewStore(store, observe: { $0 })","  }","","  var body: some View {","    Text(\"\\(self.viewStore.username)\")","    \/\/ ...","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…can be written more simply using "},{"code":"WithViewStore","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Text(\"\\(viewStore.username)\")","      \/\/ ...","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There may be times where the slightly more verbose style of observing a store is preferred"},{"text":" ","type":"text"},{"type":"text","text":"instead of using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":":"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":" wraps complex views the Swift compiler can quickly become bogged"},{"type":"text","text":" "},{"text":"down, leading to degraded compiler performance and diagnostics. If you are experiencing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such instability you should consider manually setting up observation with an"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" property as described above."}]}]},{"content":[{"inlineContent":[{"text":"Sometimes you may want to observe the state in a store in a context that is not a view","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"builder. In such cases "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" will not work since it is intended only for"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI views."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of this is interfacing with SwiftUI’s "},{"type":"codeVoice","code":"App"},{"text":" protocol, which uses a separate","type":"text"},{"type":"text","text":" "},{"code":"@SceneBuilder","type":"codeVoice"},{"text":" instead of ","type":"text"},{"type":"codeVoice","code":"@ViewBuilder"},{"type":"text","text":". In this case you must use an "},{"code":"@ObservedObject","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["@main","struct MyApp: App {","  let store = StoreOf<AppFeature>(\/* ... *\/)","  @ObservedObject var viewStore: ViewStore<SceneState, CommandAction>","","  struct SceneState: Equatable {","    \/\/ ...","    init(state: AppFeature.State) {","      \/\/ ...","    }","  }","","  init() {","    self.viewStore = ViewStore(","      self.store.scope(","        state: SceneState.init(state:)","        action: AppFeature.Action.scene","      )","    )","  }","","  var body: some Scene {","    WindowGroup {","      MyRootView()","    }","    .commands {","      CommandMenu(\"Help\") {","        Button(\"About \\(self.viewStore.appName)\") {","          self.viewStore.send(.aboutButtonTapped)","        }","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that it is highly discouraged for you to observe "},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"text":" of your root store’s state.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It is almost never needed and will cause many view recomputations leading to poor"},{"type":"text","text":" "},{"text":"performance. This is why we construct a separate ","type":"text"},{"type":"codeVoice","code":"SceneState"},{"text":" type that holds onto only the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state that the view needs for rendering. See "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","isActive":true,"type":"reference"},{"text":" for more information on this","type":"text"},{"type":"text","text":" "},{"text":"topic.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your view does not need access to any state in the store and only needs to be able to send"},{"type":"text","text":" "},{"type":"text","text":"actions, then you should consider not using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":" at all. Instead, you can send"},{"type":"text","text":" "},{"type":"text","text":"actions directly to a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" like so:"}]},{"type":"codeListing","syntax":"swift","code":["Button(\"Tap me\") {","  self.store.send(.buttonTapped)","}"]},{"text":"Performance","anchor":"Performance","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"A common performance pitfall when using the library comes from constructing ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":"s and","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":"s. When constructed naively, using either view store’s initializer"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","type":"reference"},{"text":" or the SwiftUI helper ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"type":"text","text":", it  will observe"},{"type":"text","text":" "},{"text":"every change to state in the store:","type":"text"}]},{"code":["WithViewStore(self.store, observe: { $0 }) { viewStore in","  \/\/ This is executed for every action sent into the system","  \/\/ that causes self.store.state to change.","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Most of the time this observes far too much state. A typical feature in the Composable"},{"text":" ","type":"text"},{"type":"text","text":"Architecture holds onto not only the state the view needs to present UI, but also state that the"},{"text":" ","type":"text"},{"text":"feature only needs internally, as well as state of child features embedded in the feature.","type":"text"},{"text":" ","type":"text"},{"text":"Changes to the internal and child state should not cause the view’s body to re-compute since","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that state is not needed in the view."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if the root of our application was a tab view, then we could model that in state"},{"text":" ","type":"text"},{"type":"text","text":"as a struct that holds each tab’s state as a property:"}]},{"code":["@Reducer","struct AppFeature {","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","  }","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If the view only needs to construct the views for each tab, then no view store is even needed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because we can pass scoped stores to each child feature view:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    \/\/ No need to observe state changes because the view does","    \/\/ not need access to the state.","    TabView {","      ActivityView(","        store: self.store","          .scope(state: \\.activity, action: \\.activity)","      )","      SearchView(","        store: self.store","          .scope(state: \\.search, action: \\.search)","      )","      ProfileView(","        store: self.store","          .scope(state: \\.profile, action: \\.profile)","      )","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" does not actually need to observe any state changes. This view will only be"},{"text":" ","type":"text"},{"type":"text","text":"created a single time, whereas if we observed the store then it would re-compute every time a single"},{"type":"text","text":" "},{"type":"text","text":"thing changed in either the activity, search or profile child features."}]},{"type":"paragraph","inlineContent":[{"text":"If sometime in the future we do actually need some state from the store, we can start to observe","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only the bare essentials of state necessary for the view to do its job. For example, suppose that"},{"text":" ","type":"text"},{"text":"we need access to the currently selected tab in state:","type":"text"}]},{"code":["@Reducer","struct AppFeature {","  enum Tab { case activity, search, profile }","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","    var selectedTab: Tab","  }","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can observe this state so that we can construct a binding to "},{"code":"selectedTab","type":"codeVoice"},{"text":" for the tab view:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      TabView(","        selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) })","      ) {","        ActivityView(","          store: self.store.scope(state: \\.activity, action: \\.activity)","        )","        .tag(AppFeature.Tab.activity)","        SearchView(","          store: self.store.scope(state: \\.search, action: \\.search)","        )","        .tag(AppFeature.Tab.search)","        ProfileView(","          store: self.store.scope(state: \\.profile, action: \\.profile)","        )","        .tag(AppFeature.Tab.profile)","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"However, this style of state observation is terribly inefficient since ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"every"}]},{"type":"text","text":" change to"},{"type":"text","text":" "},{"code":"AppFeature.State","type":"codeVoice"},{"type":"text","text":" will cause the view to re-compute even though the only piece of state we"},{"type":"text","text":" "},{"text":"actually care about is the ","type":"text"},{"code":"selectedTab","type":"codeVoice"},{"type":"text","text":". The reason we are observing too much state is because"},{"type":"text","text":" "},{"text":"we use ","type":"text"},{"code":"observe: { $0 }","type":"codeVoice"},{"type":"text","text":" in the construction of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", which means the view"},{"type":"text","text":" "},{"text":"store will observe all of state.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To chisel away at the observed state you can provide a closure for that argument that plucks out","type":"text"},{"text":" ","type":"text"},{"text":"the state the view needs. In this case the view only needs a single field:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["WithViewStore(self.store, observe: \\.selectedTab) { viewStore in","  TabView(selection: viewStore.binding(send: { .tabSelected($0) }) {","    \/\/ ...","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"In the future, the view may need access to more state. For example, suppose ","type":"text"},{"type":"codeVoice","code":"Activity.State"},{"type":"text","text":" "},{"type":"text","text":"holds onto an "},{"code":"unreadCount","type":"codeVoice"},{"type":"text","text":" integer to represent how many new activities you have. There’s no"},{"text":" ","type":"text"},{"type":"text","text":"need to observe "},{"inlineContent":[{"text":"all","type":"text"}],"type":"emphasis"},{"type":"text","text":" of "},{"type":"codeVoice","code":"Activity.State"},{"type":"text","text":" to get access to this one field. You can observe just"},{"type":"text","text":" "},{"text":"the one field.","type":"text"}]},{"inlineContent":[{"text":"Technically you can do this by mapping your state into a tuple, but because tuples are not","type":"text"},{"text":" ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" you will need to provide an explicit ","type":"text"},{"code":"removeDuplicates","type":"codeVoice"},{"type":"text","text":" argument:"}],"type":"paragraph"},{"code":["WithViewStore(","  self.store,","  observe: { (selectedTab: $0.selectedTab, unreadActivityCount: $0.activity.unreadCount) },","  removeDuplicates: ==",") { viewStore in","  TabView(selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) }) {","    ActivityView(","      store: self.store.scope(state: \\.activity, action: \\.activity)","    )","    .tag(AppFeature.Tab.activity)","    .badge(\"\\(viewStore.unreadActivityCount)\")","","    \/\/ ...","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, and recommended, you can introduce a lightweight, equatable "},{"code":"ViewState","type":"codeVoice"},{"type":"text","text":" struct"},{"type":"text","text":" "},{"type":"text","text":"nested inside your view whose purpose is to transform the "},{"type":"codeVoice","code":"Store"},{"type":"text","text":"’s full state into the bare"},{"text":" ","type":"text"},{"text":"essentials of what the view needs:","type":"text"}]},{"syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  struct ViewState: Equatable {","    let selectedTab: AppFeature.Tab","    let unreadActivityCount: Int","    init(state: AppFeature.State) {","      self.selectedTab = state.selectedTab","      self.unreadActivityCount = state.activity.unreadCount","    }","  }","","  var body: some View {","    WithViewStore(self.store, observe: ViewState.init) { viewStore in","      TabView {","        ActivityView(","          store: self.store","            .scope(state: \\.activity, action: \\.activity)","        )","        .badge(\"\\(viewStore.unreadActivityCount)\")","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives you maximum flexibility in the future for adding new fields to "},{"code":"ViewState","type":"codeVoice"},{"text":" without","type":"text"},{"type":"text","text":" "},{"type":"text","text":"making your view convoluted."}]},{"type":"paragraph","inlineContent":[{"text":"This technique for reducing view re-computations is most effective towards the root of your app","type":"text"},{"text":" ","type":"text"},{"text":"hierarchy and least effective towards the leaf nodes of your app. Root features tend to hold","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lots of state that its view does not need, such as child features, and leaf features tend to"},{"type":"text","text":" "},{"type":"text","text":"only hold what’s necessary. If you are going to employ this technique you will get the most"},{"text":" ","type":"text"},{"text":"benefit by applying it to views closer to the root. At leaf features and views that need access","type":"text"},{"type":"text","text":" "},{"text":"to most of the state, it is fine to continue using ","type":"text"},{"code":"observe: { $0 }","type":"codeVoice"},{"type":"text","text":" to observe all of the state"},{"type":"text","text":" "},{"type":"text","text":"in the store."}]},{"type":"heading","anchor":"Overview","level":2,"text":"Overview"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":" into a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"topicSections":[{"anchor":"Creating-a-view","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l"],"title":"Creating a view"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)"],"anchor":"Debugging-view-updates","title":"Debugging view updates"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body"],"title":"Instance Properties","anchor":"Instance-Properties","generated":true},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations"],"anchor":"Default-Implementations"}],"metadata":{"title":"WithViewStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"platforms":[],"roleHeading":"Structure","externalID":"s:22ComposableArchitecture13WithViewStoreV","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"modules":[{"name":"ComposableArchitecture"}],"symbolKind":"struct"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"url":"\/documentation\/composablearchitecture\/switchstore","type":"topic","abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}],"title":"SwitchStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SwitchStore","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"deprecated":true,"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"role":"symbol","kind":"symbol","abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"NavigationStackStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","url":"\/documentation\/composablearchitecture\/navigationstackstore","title":"NavigationStackStore","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"url":"\/documentation\/composablearchitecture\/caselet","type":"topic","abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","type":"reference"},{"type":"text","text":"."}],"title":"CaseLet","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CaseLet","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"deprecated":true,"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"symbol","title":"ComposableArchitecture","type":"topic","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"url":"\/documentation\/composablearchitecture\/navigationlinkstore","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NavigationLinkStore"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"NavigationLinkStore"}],"title":"NavigationLinkStore","abstract":[{"text":"A view that controls a navigation presentation.","type":"text"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","type":"topic"},"doc://ComposableArchitecture/7SwiftUI18DynamicViewContentP":{"title":"SwiftUICore.DynamicViewContent","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","type":"unresolvable"},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ForEachStore"}],"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"text":" ","type":"text"},{"type":"text","text":"collections of state."}],"kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"role":"collectionGroup","type":"topic","title":"SwiftUI Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/body":{"role":"symbol","title":"body","url":"\/documentation\/composablearchitecture\/withviewstore\/body","deprecated":true,"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Content","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/DynamicViewContent-Implementations":{"type":"topic","kind":"article","title":"DynamicViewContent Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/withviewstore\/dynamicviewcontent-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"url":"\/documentation\/composablearchitecture\/viewstore","kind":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"role":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"title":"ViewStore","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","title":"WithViewStore","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore","role":"symbol","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"kind":"symbol","title":"IfLetStore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic"},"doc://ComposableArchitecture/s8CopyableP":{"title":"Swift.Copyable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","type":"unresolvable"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"title":"SwiftUICore.View","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:content:file:line:)-8g15l":{"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l","role":"symbol","title":"init(_:observe:content:file:line:)","url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:content:file:line:)-8g15l","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Content"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"Initializes a structure that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into an observable "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" in order","type":"text"},{"type":"text","text":" "},{"text":"to compute views from state.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"State","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"observe"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"content"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC","text":"ViewStore","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"text":"Content","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":")","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/_printChanges(_:)":{"url":"\/documentation\/composablearchitecture\/withviewstore\/_printchanges(_:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"_printChanges","kind":"identifier"},{"kind":"text","text":"("},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"text":"WithViewStore","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":", ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"text":">","kind":"text"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)","title":"_printChanges(_:)","abstract":[{"text":"Prints debug information to the console whenever the view is computed.","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/View-Implementations":{"url":"\/documentation\/composablearchitecture\/withviewstore\/view-implementations","abstract":[],"kind":"article","type":"topic","title":"View Implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"role":"article","url":"\/documentation\/composablearchitecture\/performance","kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"title":"Performance","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/init(_:observe:)-3ak1y":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/composablearchitecture\/viewstore\/init(_:observe:)-3ak1y","abstract":[{"type":"text","text":"Initializes a view store from a store which observes changes to state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","kind":"symbol","type":"topic","title":"init(_:observe:)","role":"symbol","fragments":[{"text":"convenience","kind":"keyword"},{"kind":"text","text":" "},{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"State","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"observe","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"url":"\/documentation\/composablearchitecture\/swiftuideprecations","abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","role":"collectionGroup","kind":"article","title":"Deprecations"}}}