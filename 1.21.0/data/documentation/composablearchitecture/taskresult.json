{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/taskresult"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"topicSections":[{"title":"Representing a task result","anchor":"Representing-a-task-result","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"]},{"title":"Converting a throwing expression","anchor":"Converting-a-throwing-expression","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"]},{"title":"Accessing a result’s value","anchor":"Accessing-a-results-value","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"]},{"title":"Transforming results","anchor":"Transforming-results","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)"]},{"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations"],"generated":true}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'Result', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.4#Moving-off-of-TaskResult"}]}],"sections":[],"seeAlsoSections":[{"title":"Creating an effect","anchor":"Creating-an-effect","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf"],"generated":true}],"metadata":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"title":"TaskResult","platforms":[],"roleHeading":"Enumeration","externalID":"s:22ComposableArchitecture10TaskResultO","symbolKind":"enum","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"role":"symbol","modules":[{"name":"ComposableArchitecture"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/13CasePathsCore0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Success"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type is needed because Swift’s concurrency tools can only express untyped errors, such as"},{"type":"text","text":" "},{"code":"async","type":"codeVoice"},{"type":"text","text":" functions and "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":", and so their output can realistically only be bridged to"},{"type":"text","text":" "},{"code":"Result<_, any Error>","type":"codeVoice"},{"type":"text","text":". However, "},{"code":"Result<_, any Error>","type":"codeVoice"},{"type":"text","text":" is never "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" since "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", and equatability is very important for testing in the Composable Architecture. By"},{"type":"text","text":" "},{"type":"text","text":"defining our own type we get the ability to recover equatability in most situations."}]},{"type":"paragraph","inlineContent":[{"text":"If someday Swift gets typed ","type":"text"},{"code":"throws","type":"codeVoice"},{"text":", then we can eliminate this type and rely solely on","type":"text"},{"text":" ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You typically use this type as the payload of an action which receives a response from an","type":"text"},{"text":" ","type":"text"},{"text":"effect:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["enum Action: Equatable {","  case factButtonTapped","  case factResponse(TaskResult<String>)","}"]},{"type":"paragraph","inlineContent":[{"text":"Then you can model your dependency as using simple ","type":"text"},{"type":"codeVoice","code":"async"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"throws"},{"text":" functionality:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally you can use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)"},{"type":"text","text":" to construct an"},{"type":"text","text":" "},{"type":"text","text":"effect in the reducer that invokes the "},{"type":"codeVoice","code":"numberFact"},{"type":"text","text":" endpoint and wraps its response in a"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" by using its catching initializer, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["case .factButtonTapped:","  return .run { send in","    await send(","      .factResponse(","        TaskResult { try await self.numberFact.fetch(state.number) }","      )","    )","  }","","case let .factResponse(.success(fact)):","  \/\/ do something with fact","","case .factResponse(.failure):","  \/\/ handle error","","\/\/ ...","}"]},{"type":"heading","anchor":"Equality","level":2,"text":"Equality"},{"type":"paragraph","inlineContent":[{"text":"The biggest downside to using an untyped ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":" in a result type is that the result will not","type":"text"},{"text":" ","type":"text"},{"text":"be equatable even if the success type is. This negatively affects your ability to test features","type":"text"},{"text":" ","type":"text"},{"text":"that use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"text":" in their actions with the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"text":" does extra work to try to maintain equatability when possible. If the underlying","type":"text"},{"text":" ","type":"text"},{"text":"type masked by the ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":", then it will use that ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" conformance","type":"text"},{"text":" ","type":"text"},{"text":"on two failures. Luckily, most errors thrown by Apple’s frameworks are already equatable, and","type":"text"},{"text":" ","type":"text"},{"text":"because errors are typically simple value types, it is usually possible to have the compiler","type":"text"},{"text":" ","type":"text"},{"text":"synthesize a conformance for you.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you are testing the unhappy path of a feature that feeds a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"text":" back into the","type":"text"},{"text":" ","type":"text"},{"text":"system, be sure to conform the error to equatable, or the test will fail:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error {}","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ 🛑","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}","\/\/ 🛑 'RefreshFailure' is not equatable"]},{"type":"paragraph","inlineContent":[{"text":"To get a passing test, explicitly conform your custom error to the ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":" protocol:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error, Equatable {} \/\/ 👈","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ ✅","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}"]}],"kind":"content"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Result/init(_:)":{"url":"\/documentation\/composablearchitecture\/swift\/result\/init(_:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Success","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Failure","type":"codeVoice"},{"type":"text","text":" is "},{"code":"any Error","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"init(_:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","kind":"typeIdentifier","text":"TaskResult"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":">)"}],"role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)","abstract":[{"text":"Transforms a ","type":"text"},{"code":"TaskResult","type":"codeVoice"},{"text":" into a ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":".","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"url":"\/documentation\/composablearchitecture\/taskresult","abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":".","type":"text"}],"deprecated":true,"title":"TaskResult","type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"role":"symbol","type":"topic","title":"Effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectOf":{"abstract":[{"text":"A convenience type alias for referring to an effect of a given reducer’s domain.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/effectof","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectOf"}],"title":"EffectOf","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectOf"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Equatable-Implementations":{"abstract":[],"url":"\/documentation\/composablearchitecture\/taskresult\/equatable-implementations","role":"collectionGroup","title":"Equatable Implementations","kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations"},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/ComposableArchitecture\/SQ"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/failure(_:)":{"type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/failure(_:)","role":"symbol","title":"TaskResult.failure(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)","kind":"symbol","abstract":[{"type":"text","text":"A failure, storing an error."}],"deprecated":true,"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"failure"},{"kind":"text","text":"(any "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/CasePathable-Implementations":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","url":"\/documentation\/composablearchitecture\/taskresult\/casepathable-implementations","title":"CasePathable Implementations","abstract":[],"type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(_:)":{"abstract":[{"type":"text","text":"Transforms a "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"TaskResult"},{"type":"text","text":", erasing its "},{"code":"Failure","type":"codeVoice"},{"type":"text","text":" to "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","role":"symbol","deprecated":true,"type":"topic","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Failure"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s6ResultO","kind":"typeIdentifier","text":"Result"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">)"}],"url":"\/documentation\/composablearchitecture\/taskresult\/init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/flatMap(_:)":{"url":"\/documentation\/composablearchitecture\/taskresult\/flatmap(_:)","abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation and"},{"type":"text","text":" "},{"type":"text","text":"unwrapping the produced result."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","title":"flatMap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewSuccess"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewSuccess"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewSuccess"},{"kind":"text","text":">"}],"type":"topic","deprecated":true,"role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Hashable-Implementations":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations","kind":"article","url":"\/documentation\/composablearchitecture\/taskresult\/hashable-implementations","role":"collectionGroup","type":"topic","title":"Hashable Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","title":"Reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/map(_:)":{"url":"\/documentation\/composablearchitecture\/taskresult\/map(_:)","abstract":[{"text":"Returns a new task result, mapping any success value using the given transformation.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","title":"map(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewSuccess"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewSuccess"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewSuccess"},{"kind":"text","text":">"}],"type":"topic","deprecated":true,"role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:ScP","text":"TaskPriority"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": ((any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","type":"topic","title":"run(priority:operation:catch:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","title":"TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"url":"\/documentation\/composablearchitecture\/teststore","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/ComposableArchitecture\/SH"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"title":"none","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/effect\/none","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"none","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/value":{"title":"value","url":"\/documentation\/composablearchitecture\/taskresult\/value","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Success"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value","abstract":[{"text":"Returns the success value as a throwing property.","type":"text"}],"type":"topic","kind":"symbol","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/success(_:)":{"type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/success(_:)","role":"symbol","title":"TaskResult.success(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","kind":"symbol","abstract":[{"text":"A success, storing a ","type":"text"},{"code":"Success","type":"codeVoice"},{"text":" value.","type":"text"}],"deprecated":true,"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"success"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(catching:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"catching","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/init(catching:)","kind":"symbol","abstract":[{"type":"text","text":"Creates a new task result by evaluating an async throwing closure, capturing the returned"},{"type":"text","text":" "},{"type":"text","text":"value as a success, or any thrown error as a failure."}],"type":"topic","role":"symbol","title":"init(catching:)"},"doc://ComposableArchitecture/13CasePathsCore0A8PathableP":{"identifier":"doc:\/\/ComposableArchitecture\/13CasePathsCore0A8PathableP","type":"unresolvable","title":"CasePathsCore.CasePathable"},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","title":"Swift.Copyable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/send(_:)":{"kind":"symbol","abstract":[{"text":"Initializes an effect that immediately emits the action passed in.","type":"text"}],"title":"send(_:)","url":"\/documentation\/composablearchitecture\/effect\/send(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","role":"symbol","type":"topic"}}}