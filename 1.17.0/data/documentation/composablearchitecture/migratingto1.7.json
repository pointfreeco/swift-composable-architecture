{"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","roleHeading":"Article","title":"Migrating to 1.7"},"abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"text":" ","type":"text"},{"type":"text","text":"APIs such as "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":", and more."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.7"]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"text":" ","type":"text"},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"type":"text","text":" "},{"text":"APIs, and this article contains some tips for doing so.","type":"text"}]},{"style":"important","type":"aside","name":"Important","content":[{"inlineContent":[{"text":"Before following this migration guide be sure you have fully migrated to the newest","type":"text"},{"text":" ","type":"text"},{"text":"tools of version 1.6. See ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","isActive":true,"type":"reference"},{"text":", and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","isActive":true},{"type":"text","text":" for"},{"text":" ","type":"text"},{"type":"text","text":"more information."}],"type":"paragraph"}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The following migration guide mostly assumes you are targeting iOS 17, macOS 14, tvOS 17,","type":"text"},{"type":"text","text":" "},{"text":"watchOS 10 or higher, but the tools do work for older platforms too. See the dedicated","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"},{"text":" article for more information on how to use the new observation tools if","type":"text"},{"type":"text","text":" "},{"text":"you are targeting older platforms.","type":"text"}]}]},{"type":"heading","text":"Topics","level":3,"anchor":"Topics"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Using-ObservableState"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Replacing-IfLetStore-with-if-let","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Replacing-ForEachStore-with-ForEach","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Replacing-PresentationState-with-Presents","type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Updating-alert-and-confirmationDialog","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Replacing-NavigationStackStore-with-NavigationStack"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#BindingState","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#ViewStorebinding","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#Computed-view-state","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#View-actions","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Observing-for-UIKit"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Incrementally-migrating","isActive":true,"type":"reference"}]}]}],"type":"unorderedList"},{"anchor":"Using-ObservableState","type":"heading","text":"Using @ObservableState","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two ways to update existing code to use the new "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"text":" macro depending on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"your minimum deployment target. Take, for example, the following scaffolding of a typical feature"},{"text":" ","type":"text"},{"text":"built with the Composable Architecture prior to version 1.7 and the new observation tools:","type":"text"}]},{"type":"codeListing","code":["@Reducer","struct Feature {","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  var body: some ReducerOf<Self> {","    \/\/ ...","  }","}","","struct FeatureView: View {","  let store: StoreOf<Feature>","","  struct ViewState: Equatable {","    \/\/ ...","    init(state: Feature.State) { \/* ... *\/ }","  }","","  var body: some View {","    WithViewStore(store, observe: ViewState.init) { viewStore in","      Form {","        Text(viewStore.count.description)","        Button(\"+\") { viewStore.send(.incrementButtonTapped) }","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This feature is manually managing a ","type":"text"},{"code":"ViewState","type":"codeVoice"},{"type":"text","text":" struct and using "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"text":" in order to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"minimize the state being observed in the view."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are still targeting iOS 16, macOS 13, tvOS 16, watchOS 9 or "},{"inlineContent":[{"text":"lower","type":"text"}],"type":"emphasis"},{"type":"text","text":", then you can update the"},{"type":"text","text":" "},{"type":"text","text":"code in the following way:"}]},{"type":"codeListing","syntax":"diff","code":[" @Reducer"," struct Feature {","+  @ObservableState","   struct State { \/* ... *\/ }","   enum Action { \/* ... *\/ }","   var body: some ReducerOf<Self> {","     \/\/ ...","   }"," }"," "," struct FeatureView: View {","   let store: StoreOf<Feature>"," ","-  struct ViewState: Equatable {","-    \/\/ ...","-    init(state: Feature.State) { \/* ... *\/ }","-  }"," ","   var body: some View {","-    WithViewStore(store, observe: ViewState.init) { viewStore in","+    WithPerceptionTracking {","       Form {","-        Text(viewStore.count.description)","-        Button(\"+\") { viewStore.send(.incrementButtonTapped) }","+        Text(store.count.description)","+        Button(\"+\") { store.send(.incrementButtonTapped) }","       }","     }","   }"," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In particular, the following changes must be made:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Mark your "},{"type":"codeVoice","code":"State"},{"text":" with the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":" macro."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Delete any view state type you have defined."}]}]},{"content":[{"inlineContent":[{"text":"Replace the use of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":" with "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":", and the trailing closure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"does not take an argument. The view constructed inside the trailing closure will automatically"},{"text":" ","type":"text"},{"text":"observe state accessed inside the closure.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Access state directly in the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" rather than in the "},{"type":"codeVoice","code":"viewStore"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Send actions directly to the ","type":"text"},{"code":"store","type":"codeVoice"},{"text":" rather than to the ","type":"text"},{"type":"codeVoice","code":"viewStore"},{"type":"text","text":"."}]}]}]},{"inlineContent":[{"type":"text","text":"If you are able to target iOS 17, macOS 14, tvOS 17, watchOS 10 or "},{"inlineContent":[{"type":"text","text":"higher"}],"type":"emphasis"},{"type":"text","text":", then you will still"},{"text":" ","type":"text"},{"text":"apply all of the updates above, but with one additional simplification to the ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view:"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":[" var body: some View {","-  WithViewStore(store, observe: ViewState.init) { viewStore in","     Form {","-      Text(viewStore.count.description)","-      Button(\"+\") { viewStore.send(.incrementButtonTapped) }","+      Text(store.count.description)","+      Button(\"+\") { store.send(.incrementButtonTapped) }","     }","-  }"," }"]},{"type":"paragraph","inlineContent":[{"text":"You no longer need the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":" or "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" views at all."}]},{"text":"Replacing IfLetStore with ‘if let’","type":"heading","level":2,"anchor":"Replacing-IfLetStore-with-if-let"},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference"},{"text":" view was a helper for transforming a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" of optional state into a store of"},{"type":"text","text":" "},{"type":"text","text":"non-optional state so that it can be handed off to a child view. It is no longer needed when using"},{"text":" ","type":"text"},{"text":"the new observation tools, and so it is ","type":"text"},{"type":"strong","inlineContent":[{"text":"soft-deprecated","type":"text"}]},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, if your feature’s reducer looks roughly like this:","type":"text"}]},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    var child: Child.State?","  }","  enum Action {","    case child(Child.Action)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then previously you would make use of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference","isActive":true},{"text":" in the view like this:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["IfLetStore(store: store.scope(state: \\.child, action: \\.child)) { childStore in","  ChildView(store: childStore)","} else: {","  Text(\"Nothing to show\")","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This can now be updated to use plain ","type":"text"},{"type":"codeVoice","code":"if let"},{"text":" syntax with ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"type":"text","text":":"}]},{"syntax":"swift","code":["if let childStore = store.scope(state: \\.child, action: \\.child) {","  ChildView(store: childStore)","} else {","  Text(\"Nothing to show\")","}"],"type":"codeListing"},{"text":"Replacing ForEachStore with ForEach","type":"heading","anchor":"Replacing-ForEachStore-with-ForEach","level":2},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"text":" view was a helper for deriving a store for each element of a collection. It is","type":"text"},{"text":" ","type":"text"},{"text":"no longer needed when using the new observation tools, and so it is ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, if your feature’s reducer looks roughly like this:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    var rows: IdentifiedArrayOf<Child.State> = []","  }","  enum Action {","    case rows(IdentifiedActionOf<Child>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Then you would have made use of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"reference"},{"text":" in the view like this:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["ForEachStore(","  store.scope(state: \\.rows, action: \\.rows)",") { childStore in","  ChildView(store: childStore)","}"],"type":"codeListing"},{"inlineContent":[{"text":"This can now be updated to use the vanilla ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":" view in SwiftUI, along with","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"text":", identified by the state of each row:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["ForEach(","  store.scope(state: \\.rows, action: \\.rows),","  id: \\.state.id",") { childStore in","  ChildView(store: childStore)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your usage of "},{"type":"codeVoice","code":"ForEachStore"},{"type":"text","text":" did not depend on the identity of the state of each row ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"type":"text","text":", the"},{"text":" ","type":"text"},{"type":"text","text":"state’s "},{"type":"codeVoice","code":"id"},{"text":" is not associated with a selection binding), you can omit the ","type":"text"},{"type":"codeVoice","code":"id"},{"text":" parameter, as the","type":"text"},{"text":" ","type":"text"},{"code":"Store","type":"codeVoice"},{"type":"text","text":" type is identifiable by its object identity:"}]},{"type":"codeListing","syntax":"diff","code":[" ForEach(","-  store.scope(state: \\.rows, action: \\.rows),","-  id: \\.state.id,","+  store.scope(state: \\.rows, action: \\.rows)"," ) { childStore in","   ChildView(store: childStore)"," }"]},{"style":"tip","type":"aside","name":"Tip","content":[{"inlineContent":[{"type":"text","text":"You can now use collection-based operators with store scoping. For example, use"},{"type":"text","text":" "},{"type":"codeVoice","code":"Array.enumerated"},{"type":"text","text":" in order to enumerate the rows so that you can provide custom styling based on"},{"type":"text","text":" "},{"type":"text","text":"the row being even or odd:"}],"type":"paragraph"},{"syntax":"swift","code":["ForEach(","  Array(store.scope(state: \\.rows, action: \\.rows).enumerated()),","  id: \\.element",") { position, childStore in","  ChildView(store: childStore)","    .background {","      position.isMultiple(of: 2) ? Color.white : Color.gray","    }","}"],"type":"codeListing"}]},{"text":"Replacing SwitchStore and CaseLet with ‘switch’ and ‘case’","level":2,"anchor":"Replacing-SwitchStore-and-CaseLet-with-switch-and-case","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","isActive":true},{"text":" views are helpers for driving a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":" for each case of"},{"text":" ","type":"text"},{"type":"text","text":"an enum. These views are no longer needed when using the new observation tools, and so they are"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"soft-deprecated"}],"type":"strong"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}]},{"syntax":"swift","code":["@Reducer ","struct Feature {","  @ObservableState","  enum State {","    case activity(ActivityFeature.State)","    case settings(SettingsFeature.State)","  }","  enum Action {","    case activity(ActivityFeature.Action)","    case settings(SettingsFeature.Action)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then you would have used "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","type":"reference","isActive":true},{"type":"text","text":" in the view like this:"}],"type":"paragraph"},{"syntax":"swift","code":["SwitchStore(store) {","  switch $0 {","  case .activity:","    CaseLet(\/Feature.State.activity, action: Feature.Action.activity) { store in","      ActivityView(store: store)","    }","  case .settings:","    CaseLet(\/Feature.State.settings, action: Feature.Action.settings) { store in","      SettingsView(store: store)","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"This can now be updated to use a vanilla ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"case"},{"type":"text","text":" in the view:"}],"type":"paragraph"},{"type":"codeListing","code":["switch store.state {","case .activity:","  if let store = store.scope(state: \\.activity, action: \\.activity) {","    ActivityView(store: store)","  }","case .settings:","  if let store = store.scope(state: \\.settings, action: \\.settings) {","    SettingsView(store: store)","  }","}"],"syntax":"swift"},{"level":2,"type":"heading","text":"Replacing @PresentationState with @Presents","anchor":"Replacing-PresentationState-with-Presents"},{"inlineContent":[{"text":"It is a well-known limitation of Swift macros that they cannot be used with property wrappers.","type":"text"},{"type":"text","text":" "},{"text":"This means that if your feature uses ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"type":"text","text":" you will get compiler errors when"},{"type":"text","text":" "},{"type":"text","text":"applying the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"text":" macro:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@ObservableState ","struct State {","  @PresentationState var child: Child.State?  \/\/ 🛑","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" property wrapper you can now use the new "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"macro:"}]},{"type":"codeListing","code":["@ObservableState ","struct State {","  @Presents var child: Child.State?  \/\/ ✅","}"],"syntax":"swift"},{"anchor":"Replacing-navigation-view-modifiers-with-SwiftUI-modifiers","level":2,"type":"heading","text":"Replacing navigation view modifiers with SwiftUI modifiers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library has shipped many navigation view modifiers that mimic what SwiftUI provides, but are"},{"text":" ","type":"text"},{"text":"tuned specifically for driving navigation from a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":". All of these view modifiers can be","type":"text"},{"type":"text","text":" "},{"text":"updated to instead use the vanilla SwiftUI version of the view modifier, and so the modifier that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ship with this library are now soft-deprecated."}]},{"inlineContent":[{"text":"For example, if your feature’s reducer looks roughly like this:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    @Presents var child: Child.State?","  }","  enum Action {","    case child(PresentationAction<Child.Action>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then previously you would drive a sheet presentation from the view like so:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(store: store.scope(state: \\.$child, action: \\.child)) { store in","  ChildView(store: store)","}"]},{"inlineContent":[{"text":"You can now replace ","type":"text"},{"code":"sheet(store:)","type":"codeVoice"},{"text":" with the vanilla SwiftUI modifier, ","type":"text"},{"code":"sheet(item:)","type":"codeVoice"},{"type":"text","text":". First you"},{"text":" ","type":"text"},{"type":"text","text":"must hold onto the store in your view in a bindable manner, using the "},{"code":"@Bindable","type":"codeVoice"},{"text":" property wrapper:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Bindable var store: StoreOf<Feature>"]},{"inlineContent":[{"text":"…or, if you’re targeting older platforms, using ","type":"text"},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Perception.Bindable var store: StoreOf<Feature>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you can use "},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":" like so:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(item: $store.scope(state: \\.child, action: \\.child)) { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the state key path is simply "},{"type":"codeVoice","code":"state: \\.child"},{"text":", and not ","type":"text"},{"type":"codeVoice","code":"state: \\.$child"},{"type":"text","text":". The projected"},{"text":" ","type":"text"},{"text":"value of the presentation state is no longer needed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This also applies to popovers, full screen covers, and navigation destinations.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Also, if you are driving navigation from an enum of destinations, then currently your code may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"look something like this:"}]},{"code":[".sheet(","  store: store.scope(","    state: \\.$destination.editForm,","    action: \\.destination.editForm","  )",") { store in","  ChildView(store: store)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This can now be changed to this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(","  item: $store.scope(","    state: \\.destination?.editForm,","    action: \\.destination.editForm","  )",") { store in","  ChildView(store: store)","}"]},{"inlineContent":[{"type":"text","text":"Note that the state key path is now simply "},{"type":"codeVoice","code":"\\.destination?.editForm"},{"type":"text","text":", and not"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\\.$destination.editForm"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Also note that ","type":"text"},{"code":"navigationDestination(item:)","type":"codeVoice"},{"type":"text","text":" is not available on older platforms, but can be made"},{"text":" ","type":"text"},{"type":"text","text":"available as far back as iOS 15 using a wrapper. See"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Backwards-compatible-availability"},{"text":" for more information.","type":"text"}]},{"level":2,"type":"heading","text":"Updating alert and confirmationDialog","anchor":"Updating-alert-and-confirmationDialog"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"SwiftUI\/View\/alert(store:)","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SwiftUI\/View\/confirmationDialog(store:)"},{"text":" modifiers have","type":"text"},{"type":"text","text":" "},{"type":"text","text":"been used to drive alerts and dialogs from stores, but new modifiers are now available that can"},{"type":"text","text":" "},{"type":"text","text":"drive alerts and dialogs from the same store binding scope operation that can power vanilla SwiftUI"},{"text":" ","type":"text"},{"text":"presentation, like ","type":"text"},{"code":"sheet(item:)","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"For example, if your feature’s reducer presents an alert:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    @Presents var alert: AlertState<Action.Alert>?","  }","  enum Action {","    case alert(PresentationAction<Alert>)","    enum Alert { \/* ... *\/ }","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then previously you would drive it from the feature’s view like so:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":[".alert(store: store.scope(state: \\.$alert, action: \\.alert))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now replace "},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" with a new modifier, "},{"type":"codeVoice","code":"SwiftUI\/View\/alert(_:)"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":[".alert($store.scope(state: \\.alert, action: \\.alert))"]},{"type":"heading","text":"Replacing NavigationStackStore with NavigationStack","anchor":"Replacing-NavigationStackStore-with-NavigationStack","level":2},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"text":" view was a helper for driving a navigation stack from a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":". It"},{"type":"text","text":" "},{"text":"is no longer needed when using the new observation tools, and so it is ","type":"text"},{"type":"strong","inlineContent":[{"text":"soft-deprecated","type":"text"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State {","    var path: StackState<Path.State> = []","  }","  enum Action {","    case path(StackAction<Path.State, Path.Action>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"inlineContent":[{"text":"Then you would have made use of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":" in the view like this:"}],"type":"paragraph"},{"code":["NavigationStackStore(store.scope(state: \\.path, action: \\.path)) {","  RootView()","} destination: {","  switch $0 {","  case .activity:","    CaseLet(\/Feature.State.activity, action: Feature.Action.activity) { store in","      ActivityView(store: store)","    }","  case .settings:","    CaseLet(\/Feature.State.settings, action: Feature.Action.settings) { store in","      SettingsView(store: store)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To update this code, first mark your feature’s state with ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    \/\/ ...","  }","  \/\/ ...","}"]},{"inlineContent":[{"text":"As well as the ","type":"text"},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer’s state:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Path {","  @ObservableState","  enum State {","    \/\/ ...","  }","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"Then in the view you must start holding onto the "},{"type":"codeVoice","code":"store"},{"text":" in a bindable manner, using the ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" ","type":"text"},{"type":"text","text":"property wrapper:"}],"type":"paragraph"},{"code":["@Bindable var store: StoreOf<Feature>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…or using "},{"code":"@Perception.Bindable","type":"codeVoice"},{"type":"text","text":" if targeting older platforms:"}]},{"syntax":"swift","code":["@Perception.Bindable var store: StoreOf<Feature>"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And the original code can now be updated to our custom initializer"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)"},{"type":"text","text":" on "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","  RootView()","} destination: { store in","  switch store.state {","  case .activity:","    if let store = store.scope(state: \\.activity, action: \\.activity) {","      ActivityView(store: store)","    }","  case .settings:","    if let store = store.scope(state: \\.settings, action: \\.settings) {","      SettingsView(store: store)","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"BindingState","level":2,"type":"heading","text":"@BindingState"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Bindings in the Composable Architecture have historically been handled by a zoo of types, including"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","type":"reference","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true},{"type":"text","text":", "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","type":"reference"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","isActive":true},{"type":"text","text":". For example, if your view needs to be able to derive bindings to many fields"},{"type":"text","text":" "},{"type":"text","text":"on your state, you may have the reducer built somewhat like this:"}]},{"code":["@Reducer","struct Feature {","  struct State {","    @BindingState var text = \"\"","    @BindingState var isOn = false","  }","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And in the view you derive bindings using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/subscript(dynamicMember:)-3q4xh","isActive":true},{"type":"text","text":" defined on"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"type":"text","text":":"}]},{"syntax":"swift","code":["WithViewStore(store, observe: { $0 }) { viewStore in","  Form {","    TextField(\"Text\", text: viewStore.$text)","    Toggle(isOn: viewStore.$isOn)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But if you have view state in your view, then you have a lot more steps to take:"}]},{"syntax":"swift","code":["struct ViewState: Equatable {","  @BindingViewState var text: String","  @BindingViewState var isOn: Bool","  init(store: BindingViewStore<Feature.State>) {","    self._text = store.$text","    self._isOn = store.$isOn","  }","}","","var body: some View {","  WithViewStore(store, observe: ViewState.init) { viewStore in","    Form {","      TextField(\"Text\", text: viewStore.$text)","      Toggle(isOn: viewStore.$isOn)","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Most of this goes away when using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference"},{"text":" macro. You can start by annotating","type":"text"},{"type":"text","text":" "},{"text":"your feature’s state with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"text":" and removing all instances of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["+@ObservableState"," struct State {","-  @BindingState var text = \"\"","-  @BindingState var isOn = false","+  var text = \"\"","+  var isOn = false"," }"],"type":"codeListing","syntax":"diff"},{"name":"Important","style":"important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Do not remove the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","type":"reference","isActive":true},{"type":"text","text":" conformance from your feature’s "},{"code":"Action","type":"codeVoice"},{"text":" or the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference"},{"text":" from your reducer. Those are still required for bindings.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the view you must start holding onto the "},{"code":"store","type":"codeVoice"},{"text":" in a bindable manner, which means using the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" property wrapper:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Bindable var store: StoreOf<Feature>"]},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"text":"If targeting older Apple platforms where ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" is not available, you can use our"},{"type":"text","text":" "},{"text":"backport of the property wrapper:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Perception.Bindable var store: StoreOf<Feature>"]}]},{"inlineContent":[{"type":"text","text":"Then in the "},{"type":"codeVoice","code":"body"},{"text":" of the view you can stop using ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"text":" and instead derive bindings","type":"text"},{"type":"text","text":" "},{"text":"directly from the store:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var body: some View {","  Form {","    TextField(\"Text\", text: $store.text)","    Toggle(isOn: $store.isOn)","  }","}"]},{"level":2,"anchor":"ViewStorebinding","text":"ViewStore.binding","type":"heading"},{"inlineContent":[{"type":"text","text":"There’s another way to derive bindings from a view store that involves fewer tools than"},{"type":"text","text":" "},{"code":"@BindingState","type":"codeVoice"},{"text":" as shown above, but does involve more boilerplate. You can add an explicit action","type":"text"},{"type":"text","text":" "},{"text":"for the binding to your domain, such as an action for setting the tab in a tab-based application:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer ","struct Feature {","  struct State {","    var tab = 0","  }","  enum Action {","    case tabChanged(Int)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case let .tabChanged(tab):","        state.tab = tab","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in the view you can use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes"},{"type":"text","text":" to derive a binding from"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"tab","type":"codeVoice"},{"type":"text","text":" state and the "},{"type":"codeVoice","code":"tabChanged"},{"type":"text","text":" action:"}]},{"code":["TabView(","  selection: viewStore.binding(get: \\.tab, send: { .tabChanged($0) })",") {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Since the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" type is now soft-deprecated, you can update this code to do something much","type":"text"},{"type":"text","text":" "},{"text":"simpler. If you make your feature’s state observable with the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState"},{"text":" macro:","type":"text"}]},{"syntax":"swift","code":["@Reducer ","struct Feature {","  @ObservableState","  struct State {","    \/\/ ...","  }","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the view you must start holding onto the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" in a bindable manner, which means using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Bindable"},{"text":" (or ","type":"text"},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":") property wrapper:"}]},{"type":"codeListing","code":["@Bindable var store: StoreOf<Feature>"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then you can derive a binding directly from a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" binding like so:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["TabView(selection: $store.tab.sending(\\.tabChanged)) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"If the binding depends on more complex business logic, you can define a custom ","type":"text"},{"type":"codeVoice","code":"get"},{"type":"text","text":"-"},{"type":"codeVoice","code":"set"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"(or subscript, if this logic depends on external state) on the store to incorporate this logic. For"},{"text":" ","type":"text"},{"type":"text","text":"example:"}]},{"type":"row","numberOfColumns":2,"columns":[{"content":[{"syntax":"swift","code":["\/\/ Before","","\/\/ In the view:","ForEach(Flag.allCases) { flag in","  Toggle(","    flag.description,","    isOn: viewStore.binding(","      get: { $0.featureFlags.contains(flag) }","      send: { .flagToggled(flag, isOn: $0) }","    )","  )","}"],"type":"codeListing"}],"size":1},{"content":[{"code":["\/\/ After","","\/\/ In the file:","extension StoreOf<Feature> {","  subscript(hasFeatureFlag flag: Flag) -> Bool {","    get { featureFlags.contains(flag) }","    set {","      send(.flagToggled(flag, isOn: newValue))","    }","  }","}","","\/\/ In the view:","ForEach(Flag.allCases) { flag in","  Toggle(","    flag.description,","    isOn: $store[hasFeatureFlag: flag]","  )","}"],"syntax":"swift","type":"codeListing"}],"size":1}]},{"name":"Tip","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When possible, consider moving complex binding logic into the reducer so that it can be more"},{"text":" ","type":"text"},{"type":"text","text":"easily tested."}]}],"type":"aside"},{"level":2,"type":"heading","anchor":"Computed-view-state","text":"Computed view state"},{"inlineContent":[{"text":"If you are using the ","type":"text"},{"code":"ViewState","type":"codeVoice"},{"type":"text","text":" pattern in your application, then you may be computing values"},{"text":" ","type":"text"},{"type":"text","text":"inside the initializer to be used in the view like so:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct ViewState: Equatable {","  let fullName: String","  init(state: Feature.State) {","    self.fullName = \"\\(state.firstName) \\(state.lastName)\"","  }","}"]},{"inlineContent":[{"type":"text","text":"In version 1.7 of the library the "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" struct goes away, and so you can move these kinds of"},{"text":" ","type":"text"},{"type":"text","text":"computations to be directly on your feature’s state:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct State {","  \/\/ State fields","  ","  var fullName: String {","    \"\\(self.firstName) \\(self.lastName)\"","  }","}"]},{"level":2,"anchor":"View-actions","text":"View actions","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"There is a common pattern in the Composable Architecture community to separate actions that are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sent in the view from actions that are used internally in the feature, such as emissions of effects."},{"type":"text","text":" "},{"type":"text","text":"Typically this looks like the following:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature","  struct State { \/* ... *\/ }","  enum Action {","    case loginResponse(Bool)","    case view(View)","","    enum View {","      case loginButtonTapped","    }","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in the view you would use "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference"},{"text":" with the ","type":"text"},{"type":"codeVoice","code":"send"},{"text":" argument to specify which","type":"text"},{"type":"text","text":" "},{"text":"actions the view has access to:","type":"text"}]},{"code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    WithViewStore(","      store, ","      observe: { $0 }, ","      send: Feature.Action.view  \/\/ 👈","    ) { viewStore in","      Button(\"Login\") {","        viewStore.send(.loginButtonTapped) ","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"That makes it so that you can send "},{"type":"codeVoice","code":"view"},{"type":"text","text":" actions without wrapping the action in "},{"code":".view(…)","type":"codeVoice"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"it makes it so that you can only send "},{"type":"codeVoice","code":"view"},{"text":" actions. For example, the view cannot send the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"loginResponse"},{"text":" action:","type":"text"}],"type":"paragraph"},{"code":["viewStore.send(.loginResponse(false))","\/\/ 🛑 Type 'Feature.Action.View' has no member 'loginResponse'"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This pattern is still possible with version 1.7 of the library, but requires a few small changes."},{"type":"text","text":" "},{"text":"First, you must make your ","type":"text"},{"type":"codeVoice","code":"View"},{"text":" action enum conform to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","type":"reference"},{"type":"text","text":" protocol:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  \/\/ ...","  enum Action: ViewAction {  \/\/ 👈","    \/\/ ...","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And second, you can use the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)","type":"reference"},{"text":" macro on your view by specifying the reducer that","type":"text"},{"text":" ","type":"text"},{"text":"powers the view. This gives you access to a ","type":"text"},{"code":"send","type":"codeVoice"},{"text":" method in the view for sending view actions","type":"text"},{"text":" ","type":"text"},{"text":"rather than going through ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","isActive":true,"type":"reference"},{"type":"text","text":":"}]},{"code":["+@ViewAction(for: Feature.self)"," struct FeatureView: View {","   let store: StoreOf<Feature>"," ","   var body: some View {","-    WithViewStore(","-      store, ","-      observe: { $0 }, ","-      send: Feature.Action.view","-    ) { viewStore in","       Button(\"Login\") { ","-        viewStore.send(.loginButtonTapped) ","+        send(.loginButtonTapped)","       }","     }","-  }"," }"],"type":"codeListing","syntax":"diff"},{"level":2,"anchor":"Observing-for-UIKit","type":"heading","text":"Observing for UIKit"},{"anchor":"Replacing-Storepublisher","type":"heading","level":3,"text":"Replacing Store.publisher"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prior to the observation tools one would typically subscribe to changes in the store via a Combine"},{"text":" ","type":"text"},{"text":"publisher in the entry point of a view, such as ","type":"text"},{"type":"codeVoice","code":"viewDidLoad"},{"text":" in a ","type":"text"},{"code":"UIViewController","type":"codeVoice"},{"type":"text","text":" subclass:"}]},{"type":"codeListing","syntax":"swift","code":["func viewDidLoad() {","  super.viewDidLoad()","","  store.publisher.count","    .sink { [weak self] in self?.countLabel.text = \"\\($0)\" }","    .store(in: &cancellables)","}"]},{"inlineContent":[{"type":"text","text":"This can now be done more simply using the "},{"code":"ObjectiveC\/NSObject\/observe(_:)-94oxy","type":"codeVoice"},{"type":"text","text":" method defined on"},{"text":" ","type":"text"},{"text":"all ","type":"text"},{"code":"NSObject","type":"codeVoice"},{"text":"s:","type":"text"}],"type":"paragraph"},{"code":["func viewDidLoad() {","  super.viewDidLoad()","","  observe { [weak self] in ","    guard let self ","    else { return }","","    self.countLabel.text = \"\\(self.store.count)\"","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Be sure to read the documentation for "},{"type":"codeVoice","code":"ObjectiveC\/NSObject\/observe(_:)-94oxy"},{"text":" to learn how to best","type":"text"},{"text":" ","type":"text"},{"text":"wield this tool.","type":"text"}]},{"level":3,"anchor":"Replacing-StoreifLet","type":"heading","text":"Replacing Store.ifLet"},{"inlineContent":[{"type":"text","text":"Prior to the observation tools one would typically subscribe to optional child stores via a Combine"},{"text":" ","type":"text"},{"text":"operation provided by the library:","type":"text"}],"type":"paragraph"},{"code":["store","  .scope(state: \\.child, action: \\.child)","  .ifLet { childStore in","    \/\/ Use child store, _e.g._ create a child view controller","  } else: {","    \/\/ Perform clean up work, _e.g._ dismiss child view controller","  }","  .store(in: &cancellables)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This can now be done more simply using the "},{"type":"codeVoice","code":"observe"},{"type":"text","text":" method and"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-3yvuf","isActive":true,"type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["observe {","  if let childStore = store.scope(state: \\.child, action: \\.child) {","    \/\/ Use child store, _e.g._ create a child view controller","  } else {","    \/\/ Perform clean up work, _e.g._ dismiss child view controller","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Incrementally migrating","anchor":"Incrementally-migrating","level":2},{"inlineContent":[{"text":"You are most likely going to want to incrementally migrate your application to the new observation tools,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"rather than doing everything all at once. That is possible, but there are some gotchas to be aware"},{"text":" ","type":"text"},{"type":"text","text":"of when mixing “legacy” features ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"text":" features using ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":") with","type":"text"},{"type":"text","text":" "},{"text":"“modern” features (","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"type":"text","text":" features using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"text":"The most common problem one will encounter is that when legacy and modern features are mixed","type":"text"},{"type":"text","text":" "},{"text":"together, their view bodies can be re-computed more often than necessary. This is due to the","type":"text"},{"type":"text","text":" "},{"text":"mixed modes of observation. Legacy features use the ","type":"text"},{"type":"codeVoice","code":"objectWillChange"},{"text":" publisher to synchronously","type":"text"},{"type":"text","text":" "},{"text":"invalidate the view, whereas modern features use","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/observation\/withobservationtracking(_:onchange:)"},{"type":"text","text":". These are two fundamentally different tools,"},{"type":"text","text":" "},{"text":"and it can create a situation where views are invalidated multiple times separated by a thread hop,","type":"text"},{"type":"text","text":" "},{"text":"making it impossible to coalesce the validations into a single one. That is what causes the body","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to re-compute multiple times."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Typically a few extra body re-computations shouldn’t be a big deal, but they can put strain on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s ability to figure out what state changed in a view, and can cause glitchiness and"},{"text":" ","type":"text"},{"type":"text","text":"exacerbate navigation bugs. If you are noticing problems after converting one feature to use"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true,"type":"reference"},{"text":", then we recommend trying to convert a few more features that it interacts","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with to see if the problems go away."}]},{"type":"paragraph","inlineContent":[{"text":"We have also found that modern features that contain legacy features as child features tend to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"behave better than the opposite. For this reason we recommend updating your features to use"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"text":" from the outside in. That is, start with the root feature, update it to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the new observation tools, and then work you way towards the leaf features."}]}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","interfaceLanguage":"swift"},"sections":[],"kind":"article","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"title":"PresentationState","role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/presentationstate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy used with "},{"code":"@Shared","type":"codeVoice"},{"text":" now uses key-value observing instead of","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"url":"\/documentation\/composablearchitecture\/migratingto1.16","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","type":"topic","role":"article","kind":"article","title":"Migrating to 1.16"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"role":"article","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" "},{"text":"property wrapper, and the ","type":"text"},{"type":"codeVoice","code":"appStorage"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":" persistence strategies."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","type":"topic","title":"Migrating to 1.10"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"title":"BindingViewState","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingViewState"}],"kind":"symbol","abstract":[{"text":"A property wrapper type that can designate properties of view state that can be directly","type":"text"},{"type":"text","text":" "},{"text":"bindable in SwiftUI views.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingViewState"}],"url":"\/documentation\/composablearchitecture\/bindingviewstate","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"abstract":[{"type":"text","text":"Drives a navigation stack with a store."}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Root","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"State","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"path"},{"text":": ","kind":"text"},{"text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":">, ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">>>, "},{"kind":"externalParam","text":"root"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":", ","kind":"text"},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"title":"init(path:root:destination:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction(for:)":{"type":"topic","abstract":[{"text":"Provides a view with access to a feature’s ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"type":"text","text":"s."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)","url":"\/documentation\/composablearchitecture\/viewaction(for:)","title":"ViewAction(for:)","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewAction"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"text":".Type)","kind":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"text":": ","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","type":"topic","title":"scope(state:action:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"kind":"symbol","title":"send(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"StoreTask","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Sends an action to the store."}],"url":"\/documentation\/composablearchitecture\/store\/send(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"url":"\/documentation\/composablearchitecture\/migratingto1.17","role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","title":"Migrating to 1.17","type":"topic","abstract":[{"text":"The ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"type":"text","text":" "},{"type":"text","text":"library so that they can be used in non-Composable Architecture applications. This a"},{"type":"text","text":" "},{"text":"backwards compatible change, but some new deprecations have been introduced.","type":"text"}]},"#ViewStorebinding":{"title":"ViewStore.binding","type":"link","identifier":"#ViewStorebinding","titleInlineContent":[{"type":"text","text":"ViewStore.binding"}],"url":"#ViewStorebinding"},"#Incrementally-migrating":{"title":"Incrementally migrating","type":"link","identifier":"#Incrementally-migrating","titleInlineContent":[{"text":"Incrementally migrating","type":"text"}],"url":"#Incrementally-migrating"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"type":"topic","role":"symbol","title":"BindingReducer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingReducer","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","kind":"symbol","navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}],"abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"kind":"symbol","type":"topic","title":"Presents()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","url":"\/documentation\/composablearchitecture\/presents()","role":"symbol","abstract":[{"text":"Wraps a property with ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true},{"type":"text","text":" and observes it."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"type":"topic","abstract":[{"text":"Update your code to use the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"type":"text","text":"contexts, rather than mutating the underlying wrapped value directly."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11","title":"Migrating to 1.11","kind":"article","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"kind":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"deprecated":true,"title":"ViewStore","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"url":"\/documentation\/composablearchitecture\/viewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","kind":"symbol","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","url":"\/documentation\/composablearchitecture"},"#Replacing-NavigationStackStore-with-NavigationStack":{"title":"Replacing NavigationStackStore with NavigationStack","type":"link","identifier":"#Replacing-NavigationStackStore-with-NavigationStack","titleInlineContent":[{"type":"text","text":"Replacing NavigationStackStore with NavigationStack"}],"url":"#Replacing-NavigationStackStore-with-NavigationStack"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"role":"symbol","title":"Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic"},"#Replacing-PresentationState-with-Presents":{"title":"Replacing @PresentationState with @Presents","type":"link","identifier":"#Replacing-PresentationState-with-Presents","titleInlineContent":[{"type":"text","text":"Replacing @PresentationState with @Presents"}],"url":"#Replacing-PresentationState-with-Presents"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/subscript(dynamicMember:)-3q4xh":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/subscript(dynamicMember:)-3q4xh","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"subscript"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" _: "},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12BindingStateV","text":"BindingState"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">>) -> "},{"text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"title":"subscript(dynamicMember:)","kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ViewAction.State"},{"type":"text","text":" and "},{"code":"ViewAction","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BindableAction"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/composablearchitecture\/viewstore\/subscript(dynamicmember:)-3q4xh"},"#Updating-alert-and-confirmationDialog":{"title":"Updating alert and confirmationDialog","type":"link","identifier":"#Updating-alert-and-confirmationDialog","titleInlineContent":[{"type":"text","text":"Updating alert and confirmationDialog"}],"url":"#Updating-alert-and-confirmationDialog"},"#Replacing-ForEachStore-with-ForEach":{"title":"Replacing ForEachStore with ForEach","type":"link","identifier":"#Replacing-ForEachStore-with-ForEach","titleInlineContent":[{"type":"text","text":"Replacing ForEachStore with ForEach"}],"url":"#Replacing-ForEachStore-with-ForEach"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha","text":"_SendableCaseKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"timeout","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV","text":"Duration"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"title":"receive(_:_:timeout:assert:fileID:file:line:column:)","type":"topic","abstract":[{"type":"text","text":"Asserts an action was received matching a case path with a specific payload, and asserts how"},{"type":"text","text":" "},{"type":"text","text":"the state changes."}]},"#Observing-for-UIKit":{"identifier":"#Observing-for-UIKit","type":"link","title":"Observing for UIKit","url":"#Observing-for-UIKit","titleInlineContent":[{"type":"text","text":"Observing for UIKit"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Backwards-compatible-availability":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Backwards-compatible-availability","abstract":[],"title":"Backwards compatible availability","url":"\/documentation\/composablearchitecture\/treebasednavigation#Backwards-compatible-availability","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"url":"\/documentation\/composablearchitecture\/observablestate()","title":"ObservableState()","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","type":"topic","title":"TestStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:fileID:filePath:line:column:)-3yvuf":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:fileid:filepath:line:column:)-3yvuf","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-3yvuf","abstract":[{"type":"text","text":"Scopes the store to optional child state and actions."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"text":": ","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":"?>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">?","kind":"text"}],"role":"symbol","type":"topic","title":"scope(state:action:fileID:filePath:line:column:)","kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","type":"topic","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"title":"dependency(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(get:send:)-65xes":{"abstract":[{"type":"text","text":"Derives a binding from the store that prevents direct writes to state and instead sends"},{"text":" ","type":"text"},{"text":"actions to the store.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"binding","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"text":"get","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"send"},{"text":": (","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"ViewAction","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Binding","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI7BindingV"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">"}],"deprecated":true,"title":"binding(get:send:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","kind":"symbol","url":"\/documentation\/composablearchitecture\/viewstore\/binding(get:send:)-65xes","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ObservableState"}],"title":"ObservableState","kind":"symbol","navigatorTitle":[{"text":"ObservableState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/observablestate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"url":"\/documentation\/composablearchitecture\/switchstore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"kind":"symbol","deprecated":true,"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}],"title":"SwitchStore","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},"#View-actions":{"identifier":"#View-actions","type":"link","title":"View actions","url":"#View-actions","titleInlineContent":[{"type":"text","text":"View actions"}]},"#Computed-view-state":{"identifier":"#Computed-view-state","type":"link","title":"Computed view state","url":"#Computed-view-state","titleInlineContent":[{"type":"text","text":"Computed view state"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"url":"\/documentation\/composablearchitecture\/migratingto1.5","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference"},{"type":"text","text":" operation on "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"title":"Migrating to 1.5","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","title":"Reducer()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for a type.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"type":"topic","title":"Observation backport","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/observationbackport"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","type":"topic","role":"collectionGroup","title":"Migration guides","kind":"article","url":"\/documentation\/composablearchitecture\/migrationguides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"url":"\/documentation\/composablearchitecture\/migratingto1.15","type":"topic","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"text":" ","type":"text"},{"type":"text","text":"concurrency with no warnings or errors."}],"title":"Migrating to 1.15","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"title":"IfLetStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"url":"\/documentation\/composablearchitecture\/ifletstore","deprecated":true,"type":"topic"},"#Using-ObservableState":{"type":"link","identifier":"#Using-ObservableState","title":"Using @ObservableState","url":"#Using-ObservableState","titleInlineContent":[{"text":"Using @ObservableState","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"url":"\/documentation\/composablearchitecture\/migratingto1.13","type":"topic","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}],"title":"Migrating to 1.13","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro, and learn how to better leverage case key","type":"text"},{"type":"text","text":" "},{"text":"paths in your features.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","type":"topic","role":"article","title":"Migrating to 1.4","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.4"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"url":"\/documentation\/composablearchitecture\/migratingto1.6","type":"topic","abstract":[{"text":"Update your code to make use of the new","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","isActive":true,"type":"reference"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}],"title":"Migrating to 1.6","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"text":" ","type":"text"},{"type":"text","text":"in SwiftUI views."}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingstate","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingState"}],"title":"BindingState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","type":"topic","role":"article","title":"Migrating to 1.12","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.12"},"https://developer.apple.com/documentation/observation/withobservationtracking(_:onchange:)":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/observation\/withobservationtracking(_:onchange:)","title":"withObservationTracking","url":"https:\/\/developer.apple.com\/documentation\/observation\/withobservationtracking(_:onchange:)","titleInlineContent":[{"type":"codeVoice","code":"withObservationTracking"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"title":"BindingAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingAction"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"type":"topic","url":"\/documentation\/composablearchitecture\/bindingaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro, including automatic"},{"text":" ","type":"text"},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","type":"topic","role":"article","title":"Migrating to 1.8","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"title":"BindingViewStore","role":"symbol","url":"\/documentation\/composablearchitecture\/bindingviewstore","kind":"symbol","abstract":[{"text":"A property wrapper type that can derive ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","isActive":true,"type":"reference"},{"type":"text","text":" values for a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":".","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingViewStore","kind":"identifier"}],"navigatorTitle":[{"text":"BindingViewStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"url":"\/documentation\/composablearchitecture\/caselet","role":"symbol","navigatorTitle":[{"text":"CaseLet","kind":"identifier"}],"kind":"symbol","deprecated":true,"abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"title":"CaseLet","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CaseLet","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"url":"\/documentation\/composablearchitecture\/migratingto1.9","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","isActive":true,"type":"reference"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" which gives a succinct syntax for sending actions with case key paths, and","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true,"type":"reference"},{"type":"text","text":" method for overriding dependencies."}],"title":"Migrating to 1.9","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"url":"\/documentation\/composablearchitecture\/navigationstackstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","abstract":[{"type":"text","text":"A navigation stack that is driven by a store."}],"role":"symbol","type":"topic","kind":"symbol","title":"NavigationStackStore","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"NavigationStackStore"}],"navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}]},"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers":{"type":"link","identifier":"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers","title":"Replacing navigation view modifiers with SwiftUI modifiers","url":"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers","titleInlineContent":[{"text":"Replacing navigation view modifiers with SwiftUI modifiers","type":"text"}]},"#BindingState":{"identifier":"#BindingState","type":"link","title":"@BindingState","url":"#BindingState","titleInlineContent":[{"type":"text","text":"@BindingState"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction":{"abstract":[{"text":"Defines the actions that can be sent from a view.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ViewAction","kind":"identifier"}],"title":"ViewAction","kind":"symbol","navigatorTitle":[{"text":"ViewAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"abstract":[{"type":"text","text":"An action type that exposes a "},{"code":"binding","type":"codeVoice"},{"type":"text","text":" case that holds a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference"},{"type":"text","text":"."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindableAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindableaction","title":"BindableAction","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"deprecated":true,"type":"topic","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"collections of state."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ForEachStore"}],"navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","title":"ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":" into a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"WithViewStore"},"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case":{"identifier":"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case","type":"link","title":"Replacing SwitchStore and CaseLet with ‘switch’ and ‘case’","url":"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case","titleInlineContent":[{"text":"Replacing SwitchStore and CaseLet with ‘switch’ and ‘case’","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"text":"TestStoreTask","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"title":"send(_:assert:fileID:file:line:column:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x"},"#Replacing-IfLetStore-with-if-let":{"type":"link","identifier":"#Replacing-IfLetStore-with-if-let","title":"Replacing IfLetStore with ‘if let’","url":"#Replacing-IfLetStore-with-if-let","titleInlineContent":[{"text":"Replacing IfLetStore with ‘if let’","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"abstract":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" type is now officially ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" isolated."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","type":"topic","role":"article","title":"Migrating to 1.14","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14"}}}