{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many APIs in SwiftUI use bindings to set up two-way communication between your application’s state"},{"type":"text","text":" "},{"type":"text","text":"and a view. The Composable Architecture provides several tools for creating bindings that establish"},{"type":"text","text":" "},{"type":"text","text":"such communication with your application’s store."}]},{"anchor":"Ad-hoc-bindings","level":3,"type":"heading","text":"Ad hoc bindings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest tool for creating bindings that communicate with your store is"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes"},{"type":"text","text":", which is handed two closures: one that describes how to"},{"type":"text","text":" "},{"type":"text","text":"transform state into the binding’s value, and one that describes how to transform the binding’s"},{"type":"text","text":" "},{"type":"text","text":"value into an action that can be fed back into the store."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, a reducer may have a domain that tracks if user has enabled haptic feedback. First, it"},{"type":"text","text":" "},{"type":"text","text":"can define a boolean property on state:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable {","    var isHapticFeedbackEnabled = true","    \/\/ ...","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, in order to allow the outside world to mutate this state, for example from a toggle, it must"},{"type":"text","text":" "},{"type":"text","text":"define a corresponding action that can be sent updates:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","","  enum Action { ","    case isHapticFeedbackEnabledChanged(Bool)","    \/\/ ...","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the reducer handles this action, it can update state accordingly:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  ","  func reduce(","    into state: inout State, action: Action","  ) -> EffectTask<Action> {","    switch action {","    case let .isHapticFeedbackEnabledChanged(isEnabled):","      state.isHapticFeedbackEnabled = isEnabled","      return .none","","    \/\/ ...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, in the view, we can derive a binding from the domain that allows a toggle to"},{"type":"text","text":" "},{"type":"text","text":"communicate with our Composable Architecture feature:"}]},{"type":"codeListing","syntax":"swift","code":["struct SettingsView: View {","  let store: StoreOf<Settings>","  ","  var body: some View {","    WithViewStore(self.store) { viewStore in","      Form {","        Toggle(","          \"Haptic feedback\",","          isOn: viewStore.binding(","            get: \\.isHapticFeedbackEnabled,","            send: { .isHapticFeedbackEnabledChanged($0) }","          )","        )","","        \/\/ ...","      }","    }","  }","}"]},{"anchor":"Bindable-state-actions-and-reducers","level":3,"type":"heading","text":"Bindable state, actions, and reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Deriving ad hoc bindings requires many manual steps that can feel tedious, especially for screens"},{"type":"text","text":" "},{"type":"text","text":"with many controls driven by many bindings. Because of this, the Composable Architecture comes with"},{"type":"text","text":" "},{"type":"text","text":"a collection of tools that can be applied to a reducer’s domain and logic to make this easier."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, a settings screen may model its state with the following struct:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable {","    var digest = Digest.daily","    var displayName = \"\"","    var enableNotifications = false","    var isLoading = false","    var protectMyPosts = false","    var sendEmailNotifications = false","    var sendMobileNotifications = false","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The majority of these fields should be editable by the view, and in the Composable Architecture this"},{"type":"text","text":" "},{"type":"text","text":"means that each field requires a corresponding action that can be sent to the store. Typically this"},{"type":"text","text":" "},{"type":"text","text":"comes in the form of an enum with a case per field:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","","  enum Action {","    case digestChanged(Digest)","    case displayNameChanged(String)","    case enableNotificationsChanged(Bool)","    case protectMyPostsChanged(Bool)","    case sendEmailNotificationsChanged(Bool)","    case sendMobileNotificationsChanged(Bool)","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And we’re not even done yet. In the reducer we must now handle each action, which simply replaces"},{"type":"text","text":" "},{"type":"text","text":"the state at each field with a new value:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  func reduce(","    into state: inout State, action: Action","  ) -> EffectTask<Action> {","    switch action {","    case let digestChanged(digest):","      state.digest = digest","      return .none","","    case let displayNameChanged(displayName):","      state.displayName = displayName","      return .none","","    case let enableNotificationsChanged(isOn):","      state.enableNotifications = isOn","      return .none","","    case let protectMyPostsChanged(isOn):","      state.protectMyPosts = isOn","      return .none","","    case let sendEmailNotificationsChanged(isOn):","      state.sendEmailNotifications = isOn","      return .none","","    case let sendMobileNotificationsChanged(isOn):","      state.sendMobileNotifications = isOn","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lot"}]},{"type":"text","text":" of boilerplate for something that should be simple. Luckily, we can dramatically"},{"type":"text","text":" "},{"type":"text","text":"eliminate this boilerplate using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, we can annotate each bindable value of state with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable {","    @BindableState var digest = Digest.daily","    @BindableState var displayName = \"\"","    @BindableState var enableNotifications = false","    var isLoading = false","    @BindableState var protectMyPosts = false","    @BindableState var sendEmailNotifications = false","    @BindableState var sendMobileNotifications = false","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each annotated field is directly bindable to SwiftUI controls, like pickers, toggles, and text"},{"type":"text","text":" "},{"type":"text","text":"fields. Notably, the "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" property is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" annotated as being bindable, which prevents the"},{"type":"text","text":" "},{"type":"text","text":"view from mutating this value directly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we can conform the action type to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" by collapsing all of the individual,"},{"type":"text","text":" "},{"type":"text","text":"field-mutating actions into a single case that holds a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":" generic over the reducer’s"},{"type":"text","text":" "},{"type":"text","text":"state:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then, we can simplify the settings reducer by allowing the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":" to handle these"},{"type":"text","text":" "},{"type":"text","text":"field mutations for us:"}]},{"type":"codeListing","syntax":"swift","code":["struct Settings: ReducerProtocol {","  struct State: Equatable { \/* ... *\/ }","  enum Action: BindableAction { \/* ... *\/ }","","  var body: some ReducerProtocol<State, Action> {","    BindingReducer()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions are constructed and sent to the store by calling"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(_:file:fileID:line:)"},{"type":"text","text":" with a key path to the bindable state:"}]},{"type":"codeListing","syntax":"swift","code":["TextField(\"Display name\", text: viewStore.binding(\\.$displayName))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you need to layer additional functionality over these bindings, your reducer can pattern"},{"type":"text","text":" "},{"type":"text","text":"match the action for a given key path:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerProtocol<State, Action> {","  BindingReducer()","","  Reduce { state, action in ","    case .binding(\\.$displayName):","      \/\/ Validate display name","  ","    case .binding(\\.$enableNotifications):","      \/\/ Return an authorization request effect","  ","    \/\/ ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions can also be tested in much the same way regular actions are tested. Rather than send"},{"type":"text","text":" "},{"type":"text","text":"a specific action describing how a binding changed, such as "},{"type":"codeVoice","code":".displayNameChanged(\"Blob\")"},{"type":"text","text":", you will"},{"type":"text","text":" "},{"type":"text","text":"send a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":" action that describes which key path is being set to what value, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":".set(\\.$displayName, \"Blob\")"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(","  initialState: Settings.State(),","  reducer: Settings()",")","","store.send(.set(\\.$displayName, \"Blob\")) {","  $0.displayName = \"Blob\"","}","store.send(.set(\\.$protectMyPosts, true)) {","  $0.protectMyPosts = true",")"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindings"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Working with SwiftUI bindings","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"seeAlsoSections":[{"title":"Bindings","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(_:file:fileID:line:)"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(get:send:)-65xes":{"role":"symbol","title":"binding(get:send:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"binding"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"get"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"send"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Derives a binding from the store that prevents direct writes to state and instead sends"},{"type":"text","text":" "},{"type":"text","text":"actions to the store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/binding(get:send:)-65xes"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"role":"symbol","title":"BindableAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"type":"text","text":" case that holds a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"url":"\/documentation\/composablearchitecture\/bindableaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI":{"role":"collectionGroup","title":"SwiftUI Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"role":"symbol","title":"BindingAction","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingAction"}],"abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"url":"\/documentation\/composablearchitecture\/bindingaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(_:file:fileID:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ViewAction.State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ViewAction"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BindableAction"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"binding(_:file:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"binding"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"BindableState","preciseIdentifier":"s:22ComposableArchitecture13BindableStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a binding to the resulting bindable state of a given key path."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(_:file:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/binding(_:file:fileid:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"role":"symbol","title":"BindingReducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingReducer"}],"abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"url":"\/documentation\/composablearchitecture\/bindingreducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableState":{"role":"symbol","title":"BindableState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableState"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"type":"text","text":"in SwiftUI views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableState"}],"url":"\/documentation\/composablearchitecture\/bindablestate"}}}