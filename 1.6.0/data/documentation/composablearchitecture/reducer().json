{"seeAlsoSections":[{"title":"State management","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(memberAttribute) "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"kind":"text","text":") "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use this macro you will define a new type, typically a struct, and add inner types for the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"type":"text","text":" associated types, as well as an implementation of the"},{"type":"text","text":" "},{"type":"text","text":"reducerâ€™s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will expand Swift code to conform "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol:"}]},{"type":"codeListing","syntax":"diff","code":["+extension Feature: Reducer {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It will also apply the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro to the "},{"type":"codeVoice","code":"enum Action"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["+@CasePathable"," enum Action {","   \/\/ â€¦"," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will allow you to use key path syntax for specifying enum cases in various APIs in the"},{"type":"text","text":" "},{"type":"text","text":"library, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)-4f2at"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)-yz3v"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":", and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" of your feature is an enum, which is useful for modeling a"},{"type":"text","text":" "},{"type":"text","text":"feature that can be one of multiple mutually exclusive values, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" will apply"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro, as well as "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ â€¦"," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will allow you to use key path syntax for specifying case paths to the "},{"type":"codeVoice","code":"State"},{"type":"text","text":"â€™s cases,"},{"type":"text","text":" "},{"type":"text","text":"as well as allow you to use dot-chaining syntax for optionally extracting a case from the"},{"type":"text","text":" "},{"type":"text","text":"state. This can be useful when using the view modifiers that come with the library that allow"},{"type":"text","text":" "},{"type":"text","text":"for driving navigation from an enum of options:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(","  store: self.store.scope(state: \\.$destination.editForm, action: \\.destination.editForm)",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax "},{"type":"codeVoice","code":"state: \\.$destination.editForm"},{"type":"text","text":" is only possible due to both"},{"type":"text","text":" "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" being applied to the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" enum."}]},{"anchor":"Gotchas","level":2,"type":"heading","text":"Gotchas"},{"anchor":"Autocomplete","level":3,"type":"heading","text":"Autocomplete"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" can break autocompletion in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the reducer. This is a known"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift\/issues\/69477"},{"type":"text","text":", and it can generally be worked around by"},{"type":"text","text":" "},{"type":"text","text":"providing additional type hints to the compiler:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding an explicit "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" conformance in addition to the macro application can restore"},{"type":"text","text":" "},{"type":"text","text":"autocomplete throughout the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the reducer:"}]},{"type":"codeListing","syntax":"diff","code":[" @Reducer","-struct Feature {","+struct Feature: Reducer {"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding explicit generics to instances of "},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" can restore autocomplete"},{"type":"text","text":" "},{"type":"text","text":"inside the "},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":[" var body: some Reducer<State, Action> {","-  Reduce { state, action in","+  Reduce<State, Action> { state, action in"]}]}]},{"anchor":"Circular-reference-errors","level":3,"type":"heading","text":"Circular reference errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is currently a bug in the Swift compiler and macros that prevents you from extending"},{"type":"text","text":" "},{"type":"text","text":"types that are inside other types with macros applied in the same file. For example, if you"},{"type":"text","text":" "},{"type":"text","text":"wanted to extend a reducerâ€™s "},{"type":"codeVoice","code":"State"},{"type":"text","text":" with some extra functionality:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State { \/* ... *\/ }","  \/\/ ...","}","","extension Feature.State {  \/\/ ðŸ›‘ Circular reference","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This unfortunately does not work. It is a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift\/issues\/66450"},{"type":"text","text":", and the only workaround is to"},{"type":"text","text":" "},{"type":"text","text":"either move the extension to a separate file, or move the code from the extension to be"},{"type":"text","text":" "},{"type":"text","text":"directly inside the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" type."}]},{"anchor":"CI-build-failures","level":3,"type":"heading","text":"CI build failures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When testing your code on an external CI server you may run into errors such as the following:"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CasePathsMacros Target â€˜CasePathsMacrosâ€™ must be enabled before it can be used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ComposableArchitectureMacros Target â€˜ComposableArchitectureMacrosâ€™ must be enabled"},{"type":"text","text":" "},{"type":"text","text":"before it can be used."}]}],"type":"aside","name":"Error"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can fix this in one of two ways. You can write a default to the CI machine that allows"},{"type":"text","text":" "},{"type":"text","text":"Xcode to skip macro validation:"}]},{"type":"codeListing","syntax":"shell","code":["defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or if you are invoking "},{"type":"codeVoice","code":"xcodebuild"},{"type":"text","text":" directly in your CI scripts, you can pass the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-skipMacroValidation"},{"type":"text","text":" flag to "},{"type":"codeVoice","code":"xcodebuild"},{"type":"text","text":" when building your project:"}]},{"type":"codeListing","syntax":"shell","code":["xcodebuild -skipMacroValidation â€¦"]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/reducer()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"title":"Reducer()","roleHeading":"Macro","role":"symbol","symbolKind":"macro","externalID":"s:22ComposableArchitecture7Reduceryycfm","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"title":"Reducer conformance","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"role":"symbol","title":"State","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"}],"abstract":[{"type":"text","text":"A type that holds the current state of the reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:line:)-yz3v":{"role":"symbol","title":"forEach(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_StackReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in"},{"type":"text","text":" "},{"type":"text","text":"parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)-yz3v","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:line:)-yz3v"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)-4f2at":{"role":"symbol","title":"ifLet(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_PresentationReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)-4f2at","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:line:)-4f2at"},"https://github.com/apple/swift/issues/69477":{"title":"issue","titleInlineContent":[{"type":"text","text":"issue"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift\/issues\/69477","url":"https:\/\/github.com\/apple\/swift\/issues\/69477"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"role":"symbol","title":"Action","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Action"}],"abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" of the reducer to change"},{"type":"text","text":" "},{"type":"text","text":"and\/or kick off a side "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" that can communicate with the outside world."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/action"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"https://github.com/apple/swift/issues/66450":{"title":"known issue","titleInlineContent":[{"type":"text","text":"known issue"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift\/issues\/66450","url":"https:\/\/github.com\/apple\/swift\/issues\/66450"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-8lumc":{"defaultImplementations":1,"role":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Body"}],"abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-8lumc"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"role":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/composablearchitecture\/scope"}}}