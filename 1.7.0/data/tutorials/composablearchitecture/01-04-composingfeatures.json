{"variants":[{"paths":["\/tutorials\/composablearchitecture\/01-04-composingfeatures"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Composing features","chapter":"Essentials","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}]}]},{"kind":"tasks","tasks":[{"anchor":"Adding-a-tab-view","title":"Adding a tab view","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will explore composing features together by adding a "},{"type":"codeVoice","code":"TabView"},{"type":"text","text":" feature with two tabs,"},{"type":"text","text":" "},{"type":"text","text":"each housing a "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":". This will give us the opportunity to explore the "},{"type":"codeVoice","code":"Scope"},{"type":"text","text":" "},{"type":"text","text":"reducer and the "},{"type":"codeVoice","code":"scope"},{"type":"text","text":" operator on stores."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s approach this in a naive way first by trying to create a root level view that uses"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"TabView"},{"type":"text","text":". To keep things simple we will just have two tabs, and each will contain their"},{"type":"text","text":" "},{"type":"text","text":"own isolated "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":", which was built previously in the tutorial."}]},{"code":"01-04-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called AppFeature.swift with some basic scaffolding in place already"},{"type":"text","text":" "},{"type":"text","text":"for a tab-based view."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-04-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the tab view we want to create two "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":"s, one for each tab, but in order to do"},{"type":"text","text":" "},{"type":"text","text":"so we need to supply two stores."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Where do we get these stores from? Previously when building the "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":" the store was"},{"type":"text","text":" "},{"type":"text","text":"defined as a simple "},{"type":"codeVoice","code":"let"},{"type":"text","text":" property and then whoever constructed the "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":" (e.g."},{"type":"text","text":" "},{"type":"text","text":"the SwiftUI preview and app entry point) was responsibile for constructing the store and"},{"type":"text","text":" "},{"type":"text","text":"passing it along."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We could try that same strategy here."}]},{"code":"01-04-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add two new variables to "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" that hold stores to be provided to each "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this is not ideal. We now have two completely isolated stores that are not capable"},{"type":"text","text":" "},{"type":"text","text":"of communicating with each other. In the future there may be events that happen in one"},{"type":"text","text":" "},{"type":"text","text":"tab that can affect the other tab."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is why in the Composable Architecture we prefer to compose features together and have"},{"type":"text","text":" "},{"type":"text","text":"our views powered by a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":", rather than have multiple"},{"type":"text","text":" "},{"type":"text","text":"isolated stores. This makes it extremely easy for features to communicate with each other,"},{"type":"text","text":" "},{"type":"text","text":"and we can even write tests that the communication is working properly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, let’s put the view aside for a moment and focus first on composing our features’ reducers"},{"type":"text","text":" "},{"type":"text","text":"together into a single package, and then we will come back to the view and see how to"},{"type":"text","text":" "},{"type":"text","text":"properly create this tab view."}]}]},{"anchor":"Composing-reducers","title":"Composing reducers","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ve now seen that by approaching the problem of composing features naively we run into a"},{"type":"text","text":" "},{"type":"text","text":"weird situation of having multiple isolated stores. We can fix this problem by first composing"},{"type":"text","text":" "},{"type":"text","text":"the features together at the reducer level, and then showing how we can have a single store"},{"type":"text","text":" "},{"type":"text","text":"power our tab-based application."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to create a new app-level reducer to power the logic and behavior of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" we created above. We will also be putting the reducer in the same file as the view,"},{"type":"text","text":" "},{"type":"text","text":"just as we did for "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":". We personally prefer to do this until"},{"type":"text","text":" "},{"type":"text","text":"our features get too big, and then we will split the reducer and view into their own files."}]},{"code":"01-04-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" struct and apply the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" "},{"type":"text","text":"macro."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-04-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"type":"codeVoice","code":"State"},{"type":"text","text":" struct and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to the reducer. These data types will hold the state"},{"type":"text","text":" "},{"type":"text","text":"and actions for each tab, each of which are just the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":"."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are proactively conforming "},{"type":"codeVoice","code":"State"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" in order to be able to write"},{"type":"text","text":" "},{"type":"text","text":"tests on this feature later."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-04-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to implement the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc"},{"type":"text","text":" of the reducer."},{"type":"text","text":" "},{"type":"text","text":"Previously we did this by using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce"},{"type":"text","text":" type to open a closure"},{"type":"text","text":" "},{"type":"text","text":"and perform any state mutations necessary based on the action passed in."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We still want to do that for the core logic of the app feature, but we also want compose in"},{"type":"text","text":" "},{"type":"text","text":"the  "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" reducer so that it’s logic can execute on the "},{"type":"codeVoice","code":"tab1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"tab2"},{"type":"text","text":" state"},{"type":"text","text":" "},{"type":"text","text":"without the "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" having to recreate it."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"01-04-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To compose the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" we can use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" reducer. It allows you to focus in on a sub-domain of the"},{"type":"text","text":" "},{"type":"text","text":"parent feature, and run a child reducer on that sub-domain. In this case we want to do that"},{"type":"text","text":" "},{"type":"text","text":"twice. First we single out the "},{"type":"codeVoice","code":"tab1"},{"type":"text","text":" state and actions in order to run the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" "},{"type":"text","text":"reducer, and then we do it again for the "},{"type":"codeVoice","code":"tab2"},{"type":"text","text":" state and actions."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"body"},{"type":"text","text":" computed property is using result builders behind the scenes. It allows"},{"type":"text","text":" "},{"type":"text","text":"us to list any number of reducers in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" as  long as the types match up. When an"},{"type":"text","text":" "},{"type":"text","text":"action comes into the system each reducer will run on the feature’s state from"},{"type":"text","text":" "},{"type":"text","text":"top-to-bottom. Result builders is also what what SwiftUI uses to compose view hierarchies"},{"type":"text","text":" "},{"type":"text","text":"in a view "},{"type":"codeVoice","code":"body"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" is now a fully composed feature comprising 3 completely independent features:"},{"type":"text","text":" "},{"type":"text","text":"there’s the core app feature logic, the counter feature running in the first tab, and the"},{"type":"text","text":" "},{"type":"text","text":"counter feature running in the second tab."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can even write a test for this integration of features before even getting the view"},{"type":"text","text":" "},{"type":"text","text":"properly working."}]},{"code":"01-04-02-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file in your test target called AppFeatureTests.swift and paste in the"},{"type":"text","text":" "},{"type":"text","text":"following basic scaffolding."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to start by showing that when the increment button is tapped in the first tab,"},{"type":"text","text":" "},{"type":"text","text":"the count goes up in the "},{"type":"codeVoice","code":"tab1"},{"type":"text","text":" state."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"01-04-02-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" that holds onto the "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" domain."},{"type":"text","text":" "},{"type":"text","text":"This is done by providing the initial state of the feature and specifying"},{"type":"text","text":" "},{"type":"text","text":"the reducer that powers the feature."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remember that the "},{"type":"codeVoice","code":"TestStore"},{"type":"text","text":" is the testable runtime of a feature that allows you"},{"type":"text","text":" "},{"type":"text","text":"to send actions and assert on how state changes. It also forces you to assert on how effects"},{"type":"text","text":" "},{"type":"text","text":"emit data back into the system."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-04-02-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Send an action into the test store to emulate the user tapping on the increment button"},{"type":"text","text":" "},{"type":"text","text":"in the first tab."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The nesting of the action enums of the features gives us a natural way to"},{"type":"text","text":" "},{"type":"text","text":"distinguish between actions in different tabs. Sending "},{"type":"codeVoice","code":".tab1(.incrementButtonTapped)"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"very different from sending  "},{"type":"codeVoice","code":".tab2(.incrementButtonTapped)"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we were to run this test it would of course fail because we have not asserted on how state"},{"type":"text","text":" "},{"type":"text","text":"changes after sending this action, and by default the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" "},{"type":"text","text":"requires that you exhaustively assert on everything happening in the feature."}]},{"code":"01-04-02-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To get the test to pass we have to open up a trailing closure on "},{"type":"codeVoice","code":"store.send"},{"type":"text","text":" and mutate"},{"type":"text","text":" "},{"type":"text","text":"the previous version of the feature state so that it matches the state after the action"},{"type":"text","text":" "},{"type":"text","text":"is sent."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"And now this test passes!"}]}]},{"anchor":"Deriving-child-stores","title":"Deriving child stores","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have a single composed "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" that encpasulates all of the logic and"},{"type":"text","text":" "},{"type":"text","text":"behavior of the root app and its tabs, we can properly implement the view layer of the"},{"type":"text","text":" "},{"type":"text","text":"application."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Rather than holding onto individual stores for each tab in the "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":", we can now hold"},{"type":"text","text":" "},{"type":"text","text":"onto a single store of the composed "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" domain, and derive child stores for each"},{"type":"text","text":" "},{"type":"text","text":"tab that can be handed to the "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":"s."}]},{"code":"01-04-03-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two individual store properties with a single store of the "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" domain."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-04-03-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" method on"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" to derive a child store focused in on just the "},{"type":"codeVoice","code":"tab1"},{"type":"text","text":" "},{"type":"text","text":"domain. This is done by using key path syntax to single out the field of the state and"},{"type":"text","text":" "},{"type":"text","text":"the case of the action enum."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-04-03-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And do the same for the second tab."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes. We now have a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" powering this"},{"type":"text","text":" "},{"type":"text","text":"entire view, and the logic and behavior of both tabs have been composed into a single reducer."},{"type":"text","text":" "},{"type":"text","text":"We can give the feature a spin by creating a preview in AppFeature.swift."}]},{"code":"01-04-03-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a preview for "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" by initializing a store with the "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" domain."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can also run the feature in the simulator by updating the entry point of the app to be"},{"type":"text","text":" "},{"type":"text","text":"powered by the "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":"."}]},{"code":"01-04-03-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open App.swift and update the entry point to use "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s the basics of composing features together in the Composable Architecture. In its"},{"type":"text","text":" "},{"type":"text","text":"simplest form it starts by composing the reducers together in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of a parent reducer"},{"type":"text","text":" "},{"type":"text","text":"and using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" reducer to focus in on a sub-domain of"},{"type":"text","text":" "},{"type":"text","text":"the parent to run a child reducer. Then in the view you derive child stores from the parent"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" and hand those child"},{"type":"text","text":" "},{"type":"text","text":"stores to the child views."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are more advanced ways of composing features, especially when it comes to navigation."},{"type":"text","text":" "},{"type":"text","text":"See the article "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"},{"type":"text","text":" for more information on the navigation tools in the library,"},{"type":"text","text":" "},{"type":"text","text":"as well as the second tutorial in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},{"type":"text","text":"."}]}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Your first presentation","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Composing features","categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]]},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","title":"Contact detail feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"role":"collectionGroup","title":"Navigation","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-8lumc":{"defaultImplementations":1,"role":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Body"}],"abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-8lumc"},"01-04-02-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct AppFeature {","  struct State: Equatable {","    var tab1 = CounterFeature.State()","    var tab2 = CounterFeature.State()","  }","  enum Action {","    case tab1(CounterFeature.Action)","    case tab2(CounterFeature.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.tab1, action: \\.tab1) {","      CounterFeature()","    }","    Scope(state: \\.tab2, action: \\.tab2) {","      CounterFeature()","    }","    Reduce { state, action in","      \/\/ Core logic of the app feature","      return .none","    }","  }","}"],"fileName":"AppFeature.swift","identifier":"01-04-02-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"01-04-03-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  \/\/ let store1: StoreOf<CounterFeature>","  \/\/ let store2: StoreOf<CounterFeature>","  let store: StoreOf<AppFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store1)","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store2)","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"fileName":"AppFeature.swift","identifier":"01-04-03-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":7}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","title":"Testing your feature","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"role":"pseudoSymbol","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"role":"pseudoSymbol","title":"Managing a timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"01-04-03-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  let store: StoreOf<AppFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store.scope(state: \\.tab1, action: \\.tab1))","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store.scope(state: \\.tab2, action: \\.tab2))","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"fileName":"AppFeature.swift","identifier":"01-04-03-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":14}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"role":"project","title":"Composing features","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures"},"01-04-03-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: AppFeature.State()) {","    AppFeature()","  }","  ","  var body: some Scene {","    WindowGroup {","      AppView(store: MyApp.store)","    }","  }","}"],"fileName":"App.swift","identifier":"01-04-03-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":12}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app"},"01-04-02-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct AppFeature {","  struct State: Equatable {","    var tab1 = CounterFeature.State()","    var tab2 = CounterFeature.State()","  }","  enum Action {","    case tab1(CounterFeature.Action)","    case tab2(CounterFeature.Action)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Core logic of the app feature","      return .none","    }","  }","}"],"fileName":"AppFeature.swift","identifier":"01-04-02-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"role":"pseudoSymbol","title":"Create a reducer","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"role":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"01-04-03-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  let store: StoreOf<AppFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store.scope(state: \\.tab1, action: \\.tab1))","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store2)","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"fileName":"AppFeature.swift","identifier":"01-04-03-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":9}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"role":"pseudoSymbol","title":"Composing reducers","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"01-04-02-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct AppFeature {","  struct State: Equatable {","    var tab1 = CounterFeature.State()","    var tab2 = CounterFeature.State()","  }","  enum Action {","    case tab1(CounterFeature.Action)","    case tab2(CounterFeature.Action)","  }","}"],"fileName":"AppFeature.swift","identifier":"01-04-02-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"role":"pseudoSymbol","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"01-04-03-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  let store: StoreOf<AppFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store.scope(state: \\.tab1, action: \\.tab1))","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store.scope(state: \\.tab2, action: \\.tab2))","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}","","#Preview {","  AppView(","    store: Store(initialState: AppFeature.State()) {","      AppFeature()","    }","  )","}"],"fileName":"AppFeature.swift","identifier":"01-04-03-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"role":"pseudoSymbol","title":"What is a side effect?","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect"},"01-04-02-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct AppFeature {","  ","}"],"fileName":"AppFeature.swift","identifier":"01-04-02-code-0001.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"role":"pseudoSymbol","title":"Adding a tab view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","estimatedTime":"20min","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"01-04-02-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@MainActor","final class AppFeatureTests: XCTestCase {","  func testIncrementInFirstTab() async {","    let store = TestStore(initialState: AppFeature.State()) {","      AppFeature()","    }","  }","}"],"fileName":"AppFeatureTests.swift","identifier":"01-04-02-code-0006.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9}]},"01-04-02-code-0007.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@MainActor","final class AppFeatureTests: XCTestCase {","  func testIncrementInFirstTab() async {","    let store = TestStore(initialState: AppFeature.State()) {","      AppFeature()","    }","    ","    await store.send(.tab1(.incrementButtonTapped))","  }","}"],"fileName":"AppFeatureTests.swift","identifier":"01-04-02-code-0007.swift","type":"file","fileType":"swift","highlights":[{"line":10},{"line":11}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"role":"project","title":"Your first presentation","estimatedTime":"30min","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"role":"pseudoSymbol","title":"Testing effects","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"role":"symbol","title":"Reduce","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reduce"}],"abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":" function."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reduce"}],"url":"\/documentation\/composablearchitecture\/reduce"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"role":"pseudoSymbol","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail"},"01-04-02-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@MainActor","final class AppFeatureTests: XCTestCase {","  func testIncrementInFirstTab() async {","    ","  }","}"],"fileName":"AppFeatureTests.swift","identifier":"01-04-02-code-0005.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"role":"article","title":"Navigation","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","title":"Testing the add contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","title":"Essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"role":"pseudoSymbol","title":"Child-to-parent communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"role":"project","title":"Testing presentation","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"role":"project","title":"Multiple presentation destinations","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"role":"pseudoSymbol","title":"Deriving child stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"role":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/composablearchitecture\/scope"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","title":"Improve domain modeling","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"01-04-01-code-0001.swift":{"syntax":"swift","content":["import SwiftUI","","struct AppView: View {","  var body: some View {","    TabView {","      ","    }","  }","}"],"fileName":"AppFeature.swift","identifier":"01-04-01-code-0001.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"role":"pseudoSymbol","title":"Testing state changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"01-04-01-code-0002.swift":{"syntax":"swift","content":["import SwiftUI","","struct AppView: View {","  var body: some View {","    TabView {","      CounterView(store: ???)","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: ???)","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"fileName":"AppFeature.swift","identifier":"01-04-01-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":11},{"line":12},{"line":13},{"line":14}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"role":"project","title":"Adding side effects","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"01-04-02-code-0008.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@MainActor","final class AppFeatureTests: XCTestCase {","  func testIncrementInFirstTab() async {","    let store = TestStore(initialState: AppFeature.State()) {","      AppFeature()","    }","    ","    await store.send(.tab1(.incrementButtonTapped)) {","      $0.tab1.count = 1","    }","  }","}"],"fileName":"AppFeatureTests.swift","identifier":"01-04-02-code-0008.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13}]},"01-04-01-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  let store1: StoreOf<CounterFeature>","  let store2: StoreOf<CounterFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store1)","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store2)","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"fileName":"AppFeature.swift","identifier":"01-04-01-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":10},{"line":15}]}}}