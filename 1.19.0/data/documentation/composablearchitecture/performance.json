{"abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"As your features and application grow you may run into performance problems, such as reducers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"becoming slow to execute, SwiftUI view bodies executing more often than expected, and more. This"},{"type":"text","text":" "},{"type":"text","text":"article outlines a few common pitfalls when developing features in the library, and how to fix"},{"type":"text","text":" "},{"text":"them.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"#Sharing-logic-with-actions","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#CPU-intensive-calculations","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#High-frequency-actions"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#Store-scoping","isActive":true,"type":"reference"}],"type":"paragraph"}]}]},{"level":3,"text":"Sharing logic with actions","anchor":"Sharing-logic-with-actions","type":"heading"},{"inlineContent":[{"type":"text","text":"There is a common pattern of using actions to share logic across multiple parts of a reducer."},{"type":"text","text":" "},{"text":"This is an inefficient way to share logic. Sending actions is not as lightweight of an operation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as, say, calling a method on a class. Actions travel through multiple layers of an application, and"},{"text":" ","type":"text"},{"type":"text","text":"at each layer a reducer can intercept and reinterpret the action."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It is far better to share logic via simple methods on your "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" conformance.","type":"text"},{"text":" ","type":"text"},{"text":"The helper methods can take ","type":"text"},{"type":"codeVoice","code":"inout State"},{"type":"text","text":" as an argument if it needs to make mutations, and it"},{"type":"text","text":" "},{"type":"text","text":"can return an "},{"type":"codeVoice","code":"Effect<Action>"},{"type":"text","text":". This allows you to share logic without incurring the cost"},{"type":"text","text":" "},{"type":"text","text":"of sending needless actions."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, suppose that there are 3 UI components in your feature such that when any is changed","type":"text"},{"type":"text","text":" "},{"text":"you want to update the corresponding field of state, but then you also want to make some mutations","type":"text"},{"text":" ","type":"text"},{"text":"and execute an effect. That common mutation and effect could be put into its own action and then","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"each user action can return an effect that immediately emits that shared action:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        state.count += 1","        return .send(.sharedComputation)","","      case .toggleChanged:","        state.isEnabled.toggle()","        return .send(.sharedComputation)","","      case let .textFieldChanged(text):","        state.description = text","        return .send(.sharedComputation)","","      case .sharedComputation:","        \/\/ Some shared work to compute something.","        return .run { send in","          \/\/ A shared effect to compute something","        }","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is one way of sharing the logic and effect, but we are now incurring the cost of two actions"},{"text":" ","type":"text"},{"type":"text","text":"even though the user performed a single action. That is not going to be as efficient as it would"},{"text":" ","type":"text"},{"type":"text","text":"be if only a single action was sent."}]},{"inlineContent":[{"type":"text","text":"Besides just performance concerns, there are two other reasons why you should not follow this"},{"text":" ","type":"text"},{"text":"pattern. First, this style of sharing logic is not very flexible. Because the shared logic is","type":"text"},{"type":"text","text":" "},{"text":"relegated to a separate action it must always be run after the initial logic. But what if","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instead you need to run some shared logic "},{"type":"emphasis","inlineContent":[{"text":"before","type":"text"}]},{"type":"text","text":" the core logic? This style cannot accommodate that."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Second, this style of sharing logic also muddies tests. When you send a user action you have to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"further assert on receiving the shared action and assert on how state changed. This bloats tests"},{"type":"text","text":" "},{"text":"with unnecessary internal details, and the test no longer reads as a script from top-to-bottom of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actions the user is taking in the feature:"}]},{"code":["let store = TestStore(initialState: Feature.State()) {","  Feature()","}","","store.send(.buttonTapped) {","  $0.count = 1","}","store.receive(\\.sharedComputation) {","  \/\/ Assert on shared logic","}","store.send(.toggleChanged) {","  $0.isEnabled = true","}","store.receive(\\.sharedComputation) {","  \/\/ Assert on shared logic","}","store.send(.textFieldChanged(\"Hello\")) {","  $0.description = \"Hello\"","}","store.receive(\\.sharedComputation) {","  \/\/ Assert on shared logic","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, we do not recommend sharing logic in a reducer by having dedicated actions for the logic"},{"type":"text","text":" "},{"type":"text","text":"and executing synchronous effects."}]},{"inlineContent":[{"type":"text","text":"Instead, we recommend sharing logic with methods defined in your feature’s reducer. The method has"},{"type":"text","text":" "},{"type":"text","text":"full access to all dependencies, it can take an "},{"type":"codeVoice","code":"inout State"},{"text":" if it needs to make mutations to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state, and it can return an "},{"code":"Effect<Action>","type":"codeVoice"},{"type":"text","text":" if it needs to execute effects."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The above example can be refactored like so:","type":"text"}]},{"type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        state.count += 1","        return self.sharedComputation(state: &state)","","      case .toggleChanged:","        state.isEnabled.toggle()","        return self.sharedComputation(state: &state)","","      case let .textFieldChanged(text):","        state.description = text","        return self.sharedComputation(state: &state)","      }","    }","  }","","  func sharedComputation(state: inout State) -> Effect<Action> {","    \/\/ Some shared work to compute something.","    return .run { send in","      \/\/ A shared effect to compute something","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This effectively works the same as before, but now when a user action is sent all logic is executed"},{"text":" ","type":"text"},{"type":"text","text":"at once without sending an additional action. This also fixes the other problems we mentioned above."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, if you need to execute the shared logic "},{"inlineContent":[{"text":"before","type":"text"}],"type":"emphasis"},{"type":"text","text":" the core logic, you can do so easily:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["case .buttonTapped:","  let sharedEffect = self.sharedComputation(state: &state)","  state.count += 1","  return sharedEffect"]},{"inlineContent":[{"type":"text","text":"You have complete flexibility to decide how, when and where you want to execute the shared logic."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Further, tests become more streamlined since you do not have to assert on internal details of"},{"text":" ","type":"text"},{"type":"text","text":"shared actions being sent around. The test reads  like a user script of what the user is doing"},{"type":"text","text":" "},{"type":"text","text":"in the feature:"}],"type":"paragraph"},{"code":["let store = TestStore(initialState: Feature.State()) {","  Feature()","}","","store.send(.buttonTapped) {","  $0.count = 1","  \/\/ Assert on shared logic","}","store.send(.toggleChanged) {","  $0.isEnabled = true","  \/\/ Assert on shared logic","}","store.send(.textFieldChanged(\"Hello\") {","  $0.description = \"Hello\"","  \/\/ Assert on shared logic","}"],"type":"codeListing","syntax":"swift"},{"text":"Sharing logic in child features","anchor":"Sharing-logic-in-child-features","level":5,"type":"heading"},{"inlineContent":[{"text":"There is another common scenario for sharing logic in features where the parent feature wants to","type":"text"},{"type":"text","text":" "},{"text":"invoke logic in a child feature. One can technically do this by sending actions from the parent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the child, but we do not recommend it (see above in "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Sharing-logic-with-actions","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"to learn why):","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Handling action from parent feature:","case .buttonTapped:","  \/\/ Send action to child to perform logic:","  return .send(.child(.refresh))"]},{"inlineContent":[{"text":"Instead, we recommend invoking the child reducer directly:","type":"text"}],"type":"paragraph"},{"code":["case .buttonTapped:","  return reduce(into: &state, action: .child(.refresh))"],"syntax":"swift","type":"codeListing"},{"level":3,"anchor":"CPU-intensive-calculations","text":"CPU intensive calculations","type":"heading"},{"inlineContent":[{"text":"Reducers are run on the main thread and so they are not appropriate for performing intense CPU","type":"text"},{"type":"text","text":" "},{"text":"work. If you need to perform lots of CPU-bound work, then it is more appropriate to use an","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":", which will operate in the cooperative thread pool, and then send actions back into","type":"text"},{"type":"text","text":" "},{"text":"the system. You should also make sure to perform your CPU intensive work in a cooperative manner by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"periodically suspending with "},{"type":"codeVoice","code":"Task.yield()"},{"type":"text","text":" so that you do not block a thread in the cooperative"},{"type":"text","text":" "},{"type":"text","text":"pool for too long."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"So, instead of performing intense work like this in your reducer:","type":"text"}]},{"code":["case .buttonTapped:","  var result = \/\/ ...","  for value in someLargeCollection {","    \/\/ Some intense computation with value","  }","  state.result = result"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"…you should return an effect to perform that work, sprinkling in some yields every once in awhile,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and then delivering the result in an action:"}]},{"syntax":"swift","code":["case .buttonTapped:","  return .run { send in","    var result = \/\/ ...","    for (index, value) in someLargeCollection.enumerated() {","      \/\/ Some intense computation with value","","      \/\/ Yield every once in awhile to cooperate in the thread pool.","      if index.isMultiple(of: 1_000) {","        await Task.yield()","      }","    }","    await send(.computationResponse(result))","  }","","case let .computationResponse(result):","  state.result = result"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This will keep CPU intense work from being performed in the reducer, and hence not on the main","type":"text"},{"text":" ","type":"text"},{"text":"thread.","type":"text"}]},{"text":"High-frequency actions","anchor":"High-frequency-actions","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sending actions in a Composable Architecture application should not be thought as simple method"},{"text":" ","type":"text"},{"type":"text","text":"calls that one does with classes, such as "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" conformances. When an action is sent"},{"type":"text","text":" "},{"text":"into the system there are multiple layers of features that can intercept and interpret it, and","type":"text"},{"type":"text","text":" "},{"text":"the resulting state changes can reverberate throughout the entire application.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because of this, sending actions does come with a cost. You should aim to only send “significant”"},{"text":" ","type":"text"},{"type":"text","text":"actions into the system, that is, actions that cause the execution of important logic and effects"},{"type":"text","text":" "},{"text":"for your application. High-frequency actions, such as sending dozens of actions per second,","type":"text"},{"text":" ","type":"text"},{"text":"should be avoided unless your application truly needs that volume of actions in order to implement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"its logic."}]},{"type":"paragraph","inlineContent":[{"text":"However, there are often times that actions are sent at a high frequency but the reducer doesn’t","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actually need that volume of information. For example, say you were constructing an effect that"},{"type":"text","text":" "},{"text":"wanted to report its progress back to the system for each step of its work. You could choose to send","type":"text"},{"type":"text","text":" "},{"text":"the progress for literally every step:","type":"text"}]},{"code":["case .startButtonTapped:","  return .run { send in","    var count = 0","    let max = await self.eventsClient.count()","","    for await event in self.eventsClient.events() {","      defer { count += 1 }","      await send(.progress(Double(count) \/ Double(max)))","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, what if the effect required 10,000 steps to finish? Or 100,000? Or more? It would be"},{"text":" ","type":"text"},{"type":"text","text":"immensely wasteful to send 100,000 actions into the system to report a progress value that is only"},{"type":"text","text":" "},{"type":"text","text":"going to vary from 0.0 to 1.0."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead, you can choose to report the progress every once in awhile. You can even do the math"},{"type":"text","text":" "},{"type":"text","text":"to make it so that you report the progress at most 100 times:"}]},{"syntax":"swift","code":["case .startButtonTapped:","  return .run { send in","    var count = 0","    let max = await self.eventsClient.count()","    let interval = max \/ 100","","    for await event in self.eventsClient.events() {","      defer { count += 1 }","      if count.isMultiple(of: interval) {","        await send(.progress(Double(count) \/ Double(max)))","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"This greatly reduces the bandwidth of actions being sent into the system so that you are not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"incurring unnecessary costs for sending actions."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Another example that comes up often is sliders. If done in the most direct way, by deriving a","type":"text"},{"text":" ","type":"text"},{"text":"binding from the store to hand to a ","type":"text"},{"code":"Slider","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["Slider(value: store.$opacity, in: 0...1)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This will send an action into the system for every little change to the slider, which can be dozens","type":"text"},{"text":" ","type":"text"},{"text":"or hundreds of actions as the user is dragging the slider. If this turns out to be problematic then","type":"text"},{"text":" ","type":"text"},{"text":"you can consider alternatives.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example, you can hold onto some local "},{"type":"codeVoice","code":"@State"},{"text":" in the view for using with the ","type":"text"},{"type":"codeVoice","code":"Slider"},{"type":"text","text":", and"},{"text":" ","type":"text"},{"text":"then you can use the trailing ","type":"text"},{"type":"codeVoice","code":"onEditingChanged"},{"type":"text","text":" closure to send an action to the store:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Slider(value: self.$opacity, in: 0...1) {","  self.store.send(.setOpacity(self.opacity))","}"]},{"type":"paragraph","inlineContent":[{"text":"This way an action is only sent once the user stops moving the slider.","type":"text"}]},{"anchor":"Store-scoping","type":"heading","level":3,"text":"Store scoping"},{"inlineContent":[{"type":"text","text":"In the 1.5.6 release of the library a change was made to "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"type":"text","text":" that"},{"type":"text","text":" "},{"type":"text","text":"made it more sensitive to performance considerations."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most common form of scoping, that of scoping directly along boundaries of child features, is"},{"type":"text","text":" "},{"type":"text","text":"the most performant form of scoping and is the intended use of scoping. The library is slowly"},{"type":"text","text":" "},{"type":"text","text":"evolving to a state where that is the "},{"type":"emphasis","inlineContent":[{"text":"only","type":"text"}]},{"text":" kind of scoping one can do on a store.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest example of this directly scoping to some child state and actions for handing to a"},{"type":"text","text":" "},{"text":"child view:","type":"text"}]},{"syntax":"swift","code":["ChildView(","  store: store.scope(state: \\.child, action: \\.child)",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Furthermore, scoping to a child domain to be used with one of the libraries navigation view modifiers,"},{"type":"text","text":" "},{"text":"such as ","type":"text"},{"code":"SwiftUI\/View\/sheet(store:onDismiss:content:)","type":"codeVoice"},{"text":", also falls under the intended","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use of scope:"}]},{"syntax":"swift","type":"codeListing","code":[".sheet(store: store.scope(state: \\.child, action: \\.child)) { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these examples are how "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference","isActive":true},{"text":" is intended to be used, and you","type":"text"},{"type":"text","text":" "},{"text":"can continue using it in this way with no performance concerns.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Where performance can become a concern is when using ","type":"text"},{"type":"codeVoice","code":"scope"},{"text":" on ","type":"text"},{"inlineContent":[{"text":"computed","type":"text"}],"type":"emphasis"},{"type":"text","text":" properties rather than"},{"text":" ","type":"text"},{"text":"simple stored fields. For example, say you had a computed property in the parent feature’s state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for deriving the child state:"}]},{"syntax":"swift","code":["extension ParentFeature.State {","  var computedChild: ChildFeature.State {","    ChildFeature.State(","      \/\/ Heavy computation here...","    )","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"And then in the view, say you scoped along that computed property:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["ChildView(","  store: store.scope(state: \\.computedChild, action: \\.child)",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If the computation in that property is heavy, it is going to become exacerbated by the changes","type":"text"},{"type":"text","text":" "},{"text":"made in 1.5, and the problem worsens the closer the scoping is to the root of the application.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The problem is that in version 1.5 scoped stores stopped directly holding onto their local state,"},{"text":" ","type":"text"},{"type":"text","text":"and instead hold onto a reference to the store at the root of the application. And when you access"},{"text":" ","type":"text"},{"type":"text","text":"state from the scoped store, it transforms the root state to the child state on the fly."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This transformation will include the heavy computed property, and potentially compute it many times"},{"type":"text","text":" "},{"type":"text","text":"if you need to access multiple pieces of state from the store. If you are noticing a performance"},{"text":" ","type":"text"},{"type":"text","text":"problem while depending on 1.5+ of the library, look through your code base for any place you are"},{"text":" ","type":"text"},{"type":"text","text":"using computed properties in scopes. You can even put a "},{"type":"codeVoice","code":"print"},{"type":"text","text":" statement in the computed property"},{"text":" ","type":"text"},{"type":"text","text":"so that you can see first hand just how many times it is being invoked while running your"},{"text":" ","type":"text"},{"text":"application.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix the problem we recommend using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"text":" only along stored","type":"text"},{"type":"text","text":" "},{"text":"properties of child features. Such key paths are simple getters, and so not have a problem with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"performance. If you are using a computed property in a scope, then reconsider if that could instead"},{"type":"text","text":" "},{"text":"be done along a plain, stored property and moving the computed logic into the child view. The","type":"text"},{"type":"text","text":" "},{"text":"further you push the computation towards the leaf nodes of your application, the less performance","type":"text"},{"text":" ","type":"text"},{"text":"problems you will see.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/performance"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ"],"title":"Essentials","anchor":"Essentials","generated":true}],"metadata":{"role":"article","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article","title":"Performance"},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA":{"role":"article","url":"\/documentation\/composablearchitecture\/testingtca","kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"title":"Testing","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA"},"#Sharing-logic-with-actions":{"url":"#Sharing-logic-with-actions","identifier":"#Sharing-logic-with-actions","titleInlineContent":[{"type":"text","text":"Sharing logic with actions"}],"title":"Sharing logic with actions","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","title":"Navigation","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"url":"\/documentation\/composablearchitecture\/navigation","type":"topic","role":"collectionGroup","kind":"article"},"#CPU-intensive-calculations":{"url":"#CPU-intensive-calculations","identifier":"#CPU-intensive-calculations","titleInlineContent":[{"type":"text","text":"CPU-intensive calculations"}],"title":"CPU-intensive calculations","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance#Sharing-logic-with-actions":{"type":"topic","kind":"section","title":"Sharing logic with actions","url":"\/documentation\/composablearchitecture\/performance#Sharing-logic-with-actions","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Sharing-logic-with-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"role":"symbol","abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}],"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","title":"scope(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"url":"\/documentation\/composablearchitecture\/dependencymanagement","title":"Dependencies","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","role":"article","kind":"article","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"title":"Sharing state","type":"topic","abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"text":" ","type":"text"},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","url":"\/documentation\/composablearchitecture\/sharingstate","kind":"article","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FAQ":{"url":"\/documentation\/composablearchitecture\/faq","title":"Frequently asked questions","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ","role":"article","kind":"article","abstract":[{"type":"text","text":"A collection of some of the most common questions and comments people have concerning the library."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","kind":"symbol","title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/GettingStarted":{"kind":"article","title":"Getting started","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","abstract":[{"type":"text","text":"Learn how to integrate the Composable Architecture into your project and write your first"},{"type":"text","text":" "},{"type":"text","text":"application."}],"role":"article","url":"\/documentation\/composablearchitecture\/gettingstarted","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"symbol","title":"ComposableArchitecture","type":"topic","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"#High-frequency-actions":{"url":"#High-frequency-actions","identifier":"#High-frequency-actions","titleInlineContent":[{"type":"text","text":"High-frequency actions"}],"title":"High-frequency actions","type":"link"},"#Store-scoping":{"url":"#Store-scoping","identifier":"#Store-scoping","titleInlineContent":[{"type":"text","text":"Store scoping"}],"title":"Store scoping","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"kind":"symbol","title":"Effect","type":"topic","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}]}}}