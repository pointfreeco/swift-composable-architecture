{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":" "},{"kind":"internalParam","text":"toChildState"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":" "},{"kind":"internalParam","text":"fromChildAction"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new store with its domain (state and action) transformed."}]}]},{"kind":"parameters","parameters":[{"name":"toChildState","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that transforms "},{"type":"codeVoice","code":"State"},{"type":"text","text":" into "},{"type":"codeVoice","code":"ChildState"},{"type":"text","text":"."}]}]},{"name":"fromChildAction","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that transforms "},{"type":"codeVoice","code":"ChildAction"},{"type":"text","text":" into "},{"type":"codeVoice","code":"Action"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be useful for deriving new stores to hand to child views in an application. For"},{"type":"text","text":" "},{"type":"text","text":"example:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Application state made from child states.","struct State { var login: LoginState, ... }","enum Action { case login(LoginAction), ... }","","\/\/ A store that runs the entire application.","let store = Store(","  initialState: AppReducer.State(),","  reducer: AppReducer()",")","","\/\/ Construct a login view by scoping the store to one that works with only login domain.","LoginView(","  store: store.scope(","    state: \\.login,","    action: AppReducer.Action.login","  )",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Scoping in this fashion allows you to better modularize your application. In this case,"},{"type":"text","text":" "},{"type":"codeVoice","code":"LoginView"},{"type":"text","text":" could be extracted to a module that has no access to "},{"type":"codeVoice","code":"App.State"},{"type":"text","text":" or "},{"type":"codeVoice","code":"App.Action"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Scoping also gives a view the opportunity to focus on just the state and actions it cares"},{"type":"text","text":" "},{"type":"text","text":"about, even if its feature domain is larger."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the above login domain could model a two screen login flow: a login form followed"},{"type":"text","text":" "},{"type":"text","text":"by a two-factor authentication screen. The second screen’s domain might be nested in the"},{"type":"text","text":" "},{"type":"text","text":"first:"}]},{"type":"codeListing","syntax":"swift","code":["struct LoginState: Equatable {","  var email = \"\"","  var password = \"\"","  var twoFactorAuth: TwoFactorAuthState?","}","","enum LoginAction: Equatable {","  case emailChanged(String)","  case loginButtonTapped","  case loginResponse(Result<TwoFactorAuthState, LoginError>)","  case passwordChanged(String)","  case twoFactorAuth(TwoFactorAuthAction)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The login view holds onto a store of this domain:"}]},{"type":"codeListing","syntax":"swift","code":["struct LoginView: View {","  let store: Store<LoginState, LoginAction>","","  var body: some View { ... }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If its body were to use a view store of the same domain, this would introduce a number of"},{"type":"text","text":" "},{"type":"text","text":"problems:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The login view would be able to read from "},{"type":"codeVoice","code":"twoFactorAuth"},{"type":"text","text":" state. This state is only intended"},{"type":"text","text":" "},{"type":"text","text":"to be read from the two-factor auth screen."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even worse, changes to "},{"type":"codeVoice","code":"twoFactorAuth"},{"type":"text","text":" state would now cause SwiftUI to recompute"},{"type":"text","text":" "},{"type":"codeVoice","code":"LoginView"},{"type":"text","text":"’s body unnecessarily."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The login view would be able to send "},{"type":"codeVoice","code":"twoFactorAuth"},{"type":"text","text":" actions. These actions are only"},{"type":"text","text":" "},{"type":"text","text":"intended to be sent from the two-factor auth screen (and reducer)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The login view would be able to send non user-facing login actions, like "},{"type":"codeVoice","code":"loginResponse"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These actions are only intended to be used in the login reducer to feed the results of"},{"type":"text","text":" "},{"type":"text","text":"effects back into the store."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To avoid these issues, one can introduce a view-specific domain that slices off the subset of"},{"type":"text","text":" "},{"type":"text","text":"state and actions that a view cares about:"}]},{"type":"codeListing","syntax":"swift","code":["extension LoginView {","  struct State: Equatable {","    var email: String","    var password: String","  }","","  enum Action: Equatable {","    case emailChanged(String)","    case loginButtonTapped","    case passwordChanged(String)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can also introduce a couple helpers that transform feature state into view state and"},{"type":"text","text":" "},{"type":"text","text":"transform view actions into feature actions."}]},{"type":"codeListing","syntax":"swift","code":["extension LoginState {","  var view: LoginView.State {","    .init(email: self.email, password: self.password)","  }","}","","extension LoginView.Action {","  var feature: LoginAction {","    switch self {","    case let .emailChanged(email)","      return .emailChanged(email)","    case .loginButtonTapped:","      return .loginButtonTapped","    case let .passwordChanged(password)","      return .passwordChanged(password)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With these helpers defined, "},{"type":"codeVoice","code":"LoginView"},{"type":"text","text":" can now scope its store’s feature domain into its view"},{"type":"text","text":" "},{"type":"text","text":"domain:"}]},{"type":"codeListing","syntax":"swift","code":[" var body: some View {","   WithViewStore(","     self.store, observe: \\.view, send: \\.feature","   ) { viewStore in","     ...","   }"," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This view store is now incapable of reading any state but view state (and will not recompute"},{"type":"text","text":" "},{"type":"text","text":"when non-view state changes), and is incapable of sending any actions but view actions."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/store\/scope(state:action:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"title":"scope(state:action:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:22ComposableArchitecture5StoreC5scope5state6actionACyqd__qd_0_Gqd__xc_q_qd_0_ctr0_lF","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"]]},"topicSections":[{"title":"Overloads","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/stateless","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/actionless"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/stateless":{"role":"symbol","title":"stateless","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stateless"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a “stateless” store by erasing state to "},{"type":"codeVoice","code":"Void"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/stateless","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/stateless"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)":{"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/actionless":{"role":"symbol","title":"actionless","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"actionless"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an “actionless” store by erasing action to "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/actionless","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/actionless"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:)":{"role":"symbol","title":"scope(state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:)"}}}