{"abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"seeAlsoSections":[{"anchor":"Integrations","generated":true,"title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"title":"Observation backport","roleHeading":"Article","role":"article"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/composablearchitecture\/observationbackport"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs","type":"text"},{"text":" ","type":"text"},{"text":"observation tools, ","type":"text"},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"text":" we have backported those tools to work in iOS 13 and later. Using the","type":"text"},{"text":" ","type":"text"},{"text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be","type":"text"},{"text":" ","type":"text"},{"text":"aware of.","type":"text"}]},{"text":"The Perception framework","level":2,"type":"heading","anchor":"The-Perception-framework"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture comes with a framework known as Perception, which is our backport of","type":"text"},{"text":" ","type":"text"},{"text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the","type":"text"},{"text":" ","type":"text"},{"text":"Observation framework there is a corresponding tool in Perception.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, instead of the "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" macro, there is the "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" macro:"}]},{"code":["@Perceptible","class CounterModel {","  var count = 0","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must","type":"text"},{"text":" ","type":"text"},{"text":"remember to wrap the contents of your view in the ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":" view:","type":"text"}]},{"code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will make sure that the view subscribes to any fields accessed in the "},{"code":"@Perceptible","type":"codeVoice"},{"type":"text","text":" model so"},{"type":"text","text":" "},{"type":"text","text":"that changes to those fields invalidate the view and cause it to re-render."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a field of a "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" model is accessed in a view while "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" inside"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":", then a runtime warning will be triggered:"}]},{"name":"üü£ Runtime Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Perceptible state was accessed but is not being tracked. Track changes to"},{"type":"text","text":" "},{"type":"text","text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view."}]}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack"},{"type":"text","text":" "},{"type":"text","text":"frames displayed to find the line in your view where you are accessing state without being inside"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}]},{"type":"heading","level":2,"text":"Bindings","anchor":"Bindings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to derive bindings from the store (see "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","type":"reference","isActive":true},{"type":"text","text":" for more information), then you"},{"type":"text","text":" "},{"type":"text","text":"would typically use the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper that comes with SwiftUI:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" is iOS 17+. So, the Perception library comes with a tool that can be used in"},{"type":"text","text":" "},{"type":"text","text":"its place until you can target iOS 17 and later. You just have to qualify "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Perception"},{"type":"text","text":" namespace:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"type":"heading","level":2,"text":"Gotchas","anchor":"Gotchas"},{"type":"paragraph","inlineContent":[{"text":"There are a few gotchas to be aware of when using ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","level":3,"text":"Lazy view closures","anchor":"Lazy-view-closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and"},{"type":"text","text":" "},{"type":"text","text":"not necessarily in the same stack frames as the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view. For example, the trailing"},{"type":"text","text":" "},{"type":"text","text":"closure of "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" is called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view has been computed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that even if you wrap the body of the view in "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"‚Ä¶the access to the row‚Äôs ","type":"text"},{"type":"codeVoice","code":"store.title"},{"text":" happens ","type":"text"},{"inlineContent":[{"text":"outside","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":", and hence will","type":"text"},{"text":" ","type":"text"},{"text":"not work and will trigger a runtime warning as described above.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fix for this is to wrap the content of the trailing closure in another "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"]},{"level":3,"type":"heading","anchor":"Mixing-legacy-and-modern-features-together","text":"Mixing legacy and modern features together"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", and features built in the ‚Äúmodern‚Äù style, using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro. The problems mostly manifest themselves as re-computing view bodies"},{"type":"text","text":" "},{"type":"text","text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what"},{"type":"text","text":" "},{"type":"text","text":"state changed, and can cause glitches or exacerbate navigation bugs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating"},{"type":"text","text":" for more information about this."}]}],"kind":"content"}],"kind":"article","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"topic","abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"url":"\/documentation\/composablearchitecture\/observablestate()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"title":"ObservableState()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"abstract":[],"title":"Incrementally migrating","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","type":"topic","title":"UIKit Integration","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uikit","abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","title":"Store","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"deprecated":true,"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"title":"WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" into a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","role":"collection","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","role":"symbol","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"kind":"article","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}],"type":"topic","url":"\/documentation\/composablearchitecture\/swiftconcurrency","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","title":"Adopting Swift concurrency","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"kind":"article","title":"Working with SwiftUI bindings","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","url":"\/documentation\/composablearchitecture\/bindings","type":"topic","abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","role":"collectionGroup","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration"}}}