{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stack-based navigation is the process of modeling navigation using collections of state. This style"},{"type":"text","text":" "},{"type":"text","text":"of navigation allows you to deep-link into any state of your application by simply constructing a"},{"type":"text","text":" "},{"type":"text","text":"flat collection of data, handing, handing it off to SwiftUI, and letting it take care of the rest."},{"type":"text","text":" "},{"type":"text","text":"It also allows for complex and recursive navigation paths in your application."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Basics"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Integration"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Dismissal"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#StackState-vs-NavigationPath"}]}]}]},{"anchor":"Basics","level":2,"type":"heading","text":"Basics"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The tools for this style of navigation include "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" and the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/forEach(_:action:destination:fileID:line:)"},{"type":"text","text":" operator, as well as a new"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":" view that behaves like "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" but is tuned specifically for the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The process of integrating features into a navigation stack largely consists of 2 steps:"},{"type":"text","text":" "},{"type":"text","text":"integrating the features’ domains together, and constructing a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":" for"},{"type":"text","text":" "},{"type":"text","text":"describing all the views in the stack. One typically starts by integrating the features’ domains"},{"type":"text","text":" "},{"type":"text","text":"together. This consists of defining a new reducer, typically called "},{"type":"codeVoice","code":"Path"},{"type":"text","text":", that holds the domains"},{"type":"text","text":" "},{"type":"text","text":"of all the features that can be pushed onto the stack:"}]},{"type":"codeListing","syntax":"swift","code":["struct RootFeature: ReducerProtocol {","  \/\/ ...","","  struct Path: ReducerProtocol {","    enum State {","      case addItem(AddFeature.State)","      case detailItem(DetailFeature.State)","      case editItem(EditFeature.State)","    }","    enum Action {","      case addItem(AddFeature.Action)","      case detailItem(DetailFeature.Action)","      case editItem(EditFeature.Action)","    }","    var body: some ReducerProtocolOf<Self> {","      Scope(state: \/State.addItem, action: \/Action.addItem) { ","        AddFeature()","      }","      Scope(state: \/State.editItem, action: \/Action.editItem) { ","        EditFeature()","      }","      Scope(state: \/State.detailItem, action: \/Action.detailItem) { ","        DetailFeature()","      }","    }","  }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer is identical to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer that one creates for tree-based"},{"type":"text","text":" "},{"type":"text","text":"navigation when using enums. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state"},{"type":"text","text":" for more information."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer is defined we can then hold onto "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" in the"},{"type":"text","text":" "},{"type":"text","text":"feature that manages the navigation stack:"}]},{"type":"codeListing","syntax":"swift","code":["struct RootFeature: ReducerProtocol {","  struct State {","    var path = StackState<Path.State>()","    \/\/ ...","  }","  enum Action {","    case path(StackAction<Path.State, Path.Action>)","    \/\/ ...","  }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" is generic over both state and action of the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" domain. This is"},{"type":"text","text":" "},{"type":"text","text":"different from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":", which only has a single generic."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we must make use of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/forEach(_:action:destination:fileID:line:)"},{"type":"text","text":" "},{"type":"text","text":"method to integrate the domains of all the features that can be navigated to with the domain of the"},{"type":"text","text":" "},{"type":"text","text":"parent feature:"}]},{"type":"codeListing","syntax":"swift","code":["struct RootFeature: ReducerProtocol {","  \/\/ ...","","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in ","      \/\/ Core logic for root feature","    }","    .forEach(\\.path, action: \/Action.path) { ","      Path()","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That completes the steps to integrate the child and parent features together for a navigation stack."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we must integrate the child and parent views together. This is done by construct a special"},{"type":"text","text":" "},{"type":"text","text":"version of SwiftUI’s "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" view that comes with this library, called"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":". This view takes 3 arguments: a store focused in on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" in your domain, a trailing view builder for the root view of the stack, and"},{"type":"text","text":" "},{"type":"text","text":"another trailing view builder for all of the views that can be pushed onto the stack:"}]},{"type":"codeListing","syntax":"swift","code":["NavigationStackStore(","  \/\/ Store focused on StackState and StackAction",") {","  \/\/ Root view of the navigation stack","} destination: { state in ","  switch state {","    \/\/ A view for each case of the Path.State enum","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fill in the first argument you only need to scope your store to the "},{"type":"codeVoice","code":"path"},{"type":"text","text":" state and "},{"type":"codeVoice","code":"path"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"action you already hold in the root feature:"}]},{"type":"codeListing","syntax":"swift","code":["struct RootView: View {","  let store: StoreOf<RootFeature>","","  var body: some View {","    NavigationStackStore(","      path: self.store.scope(state: \\.path, action: { .path($0) })","    ) {","      \/\/ Root view of the navigation stack","    } destination: { state in","      \/\/ A view for each case of the Path.State enum","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The root view can be anything you want, and would typically have some "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":"s or other"},{"type":"text","text":" "},{"type":"text","text":"buttons that push new data onto the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" held in your domain."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And the last trailing closure is provided a single piece of the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" enum so that you can"},{"type":"text","text":" "},{"type":"text","text":"switch on it:"}]},{"type":"codeListing","syntax":"swift","code":["} destination: { state in","  switch state {","  case .addItem:","  case .detailItem:","  case .editItem:","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will give you compile-time guarantees that you have handled each case of the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" enum,"},{"type":"text","text":" "},{"type":"text","text":"which can be nice for when you add new types of destinations to the stack."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In each of these cases you can return any kind of view that you want, but ultimately you want to"},{"type":"text","text":" "},{"type":"text","text":"make use of the library’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" view in order to scope down to a specific case of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" enum:"}]},{"type":"codeListing","syntax":"swift","code":["} destination: { state in","  switch state {","  case .addItem:","    CaseLet(","      state: \/RootFeature.Path.State.addItem,","      action: RootFeature.Path.Action.addItem,","      then: AddView.init(store:)","    )","  case .detailItem:","    CaseLet(","      state: \/RootFeature.Path.State.detailItem,","      action: RootFeature.Path.Action.detailItem,","      then: DetailView.init(store:)","    )","  case .editItem:","    CaseLet(","      state: \/RootFeature.Path.State.editItem,","      action: RootFeature.Path.Action.editItem,","      then: EditView.init(store:)","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that is all it takes to integrate multiple child features together into a navigation stack,"},{"type":"text","text":" "},{"type":"text","text":"and done so with concisely modeled domains. Once those steps are taken you can easily add"},{"type":"text","text":" "},{"type":"text","text":"additional features to the stack by adding a new case to the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer state and action enums,"},{"type":"text","text":" "},{"type":"text","text":"and you get complete introspection into what is happening in each child feature from the parent."},{"type":"text","text":" "},{"type":"text","text":"Continue reading into "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration"},{"type":"text","text":" for more information on that."}]},{"anchor":"Integration","level":2,"type":"heading","text":"Integration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once your features are integrated together using the steps above, your parent feature gets instant"},{"type":"text","text":" "},{"type":"text","text":"access to everything happening inside the navigation stack. You can use this as a means to integrate"},{"type":"text","text":" "},{"type":"text","text":"the logic of the stack element features with the parent feature. For example, if you want to detect"},{"type":"text","text":" "},{"type":"text","text":"when the “Save” button inside the edit feature is tapped, you can simply destructure on that action."},{"type":"text","text":" "},{"type":"text","text":"This consists of pattern matching on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":", then the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)"},{"type":"text","text":" action, then the feature you are interested in, and finally the"},{"type":"text","text":" "},{"type":"text","text":"action you are interested in:"}]},{"type":"codeListing","syntax":"swift","code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  \/\/ ..."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once inside that case you can then try extracting out the feature state so that you can perform"},{"type":"text","text":" "},{"type":"text","text":"additional logic, such as popping the “edit” feature and saving the edited item to the database:"}]},{"type":"codeListing","syntax":"swift","code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  guard case let .editItem(editItemState) = self.path[id: id]","  else { return .none }","","  state.path.pop(from: id)","  return .fireAndForget {","    self.database.save(editItemState.item)","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that when destructuring the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)"},{"type":"text","text":" action we get access to not"},{"type":"text","text":" "},{"type":"text","text":"only the action that happened in the child domain, but also the ID of the element in the stack."},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" automatically manages IDs for every feature added to the stack, which can be used"},{"type":"text","text":" "},{"type":"text","text":"to look up specific elements in the stack using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:)"},{"type":"text","text":" and pop elements"},{"type":"text","text":" "},{"type":"text","text":"from the stack using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)"},{"type":"text","text":"."}]},{"anchor":"Dismissal","level":2,"type":"heading","text":"Dismissal"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dismissing a feature in a stack is as simple as using mutating the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" using one of its"},{"type":"text","text":" "},{"type":"text","text":"methods, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)"},{"type":"text","text":" and more:"}]},{"type":"codeListing","syntax":"swift","code":["case .closeButtonTapped:","  state.popLast()","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in order to do this you must have access to that stack state, and usually only the parent"},{"type":"text","text":" "},{"type":"text","text":"has access. But often we would like to encapsulate the logic of dismissing a feature to be inside"},{"type":"text","text":" "},{"type":"text","text":"the child feature without needing explicit communication with the parent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI provides a wonderful tool for allowing child "},{"type":"emphasis","inlineContent":[{"type":"text","text":"views"}]},{"type":"text","text":" to dismiss themselves from the parent,"},{"type":"text","text":" "},{"type":"text","text":"all without any explicit communication with the parent. It’s an environment value called "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and it can be used like so:"}]},{"type":"codeListing","syntax":"swift","code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked, SwiftUI finds the closet parent view that is presented in the"},{"type":"text","text":" "},{"type":"text","text":"navigation stack, and removes that state from the collection powering the stack. This can be"},{"type":"text","text":" "},{"type":"text","text":"incredibly useful, but it is also relegated to the view layer. It is not possible to use"},{"type":"text","text":" "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" elsewhere, like in an observable object, which would allow you to have nuanced logic"},{"type":"text","text":" "},{"type":"text","text":"for dismissal such as validation or async work."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,"},{"type":"text","text":" "},{"type":"text","text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s"},{"type":"text","text":" "},{"type":"text","text":"dependency management system (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"type":"text","text":") using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .closeButtonTapped:","      return .fireAndForget { await self.dismiss() }","    \/\/ ...","    } ","  }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":" function is async which means it cannot be invoked directly inside a"},{"type":"text","text":" "},{"type":"text","text":"reducer. Instead it must be called from either"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/run(priority:operation:catch:fileID:line:)"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/fireAndForget(priority:_:)"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked it will remove the corresponding value from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" "},{"type":"text","text":"powering the navigation stack. It does this by sending a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"type":"text","text":" action back"},{"type":"text","text":" "},{"type":"text","text":"into the system, causing the feature state to be removed. This allows you to encapsulate the logic"},{"type":"text","text":" "},{"type":"text","text":"for dismissing a child feature entirely inside the child domain without explicitly communicating"},{"type":"text","text":" "},{"type":"text","text":"with the parent."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because dismissal is handled by sending an action, it is not valid to ever send an action"},{"type":"text","text":" "},{"type":"text","text":"after invoking "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To do so would be to send an action for a feature while its state is not present in the stack,"},{"type":"text","text":" "},{"type":"text","text":"and that will cause a runtime warning in Xcode and a test failure when running tests."}]}],"type":"aside","name":"Note"},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI’s environment value "},{"type":"codeVoice","code":"@Environment(\\.dismiss)"},{"type":"text","text":" and the Composable Architecture’s"},{"type":"text","text":" "},{"type":"text","text":"dependency value "},{"type":"codeVoice","code":"@Dependency(\\.dismiss)"},{"type":"text","text":" serve similar purposes, but are completely different"},{"type":"text","text":" "},{"type":"text","text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s"},{"type":"text","text":" "},{"type":"text","text":"dependency value can only be used inside reducers."}]}],"type":"aside","name":"Warning"},{"anchor":"Testing","level":2,"type":"heading","text":"Testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A huge benefit of using the tools of this library to model navigation stacks is that testing because"},{"type":"text","text":" "},{"type":"text","text":"quite easy. Further, using “non-exhaustive testing” (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":") can"},{"type":"text","text":" "},{"type":"text","text":"be very useful for testing navigation since you often only want to assert on a few high level"},{"type":"text","text":" "},{"type":"text","text":"details and not all state mutations and effects."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, consider the following simple counter feature that wants to dismiss itself if its"},{"type":"text","text":" "},{"type":"text","text":"count is greater than or equal to 5:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterFeature: ReducerProtocol {","  struct State: Equatable {","    var count = 0","  }","  enum Action: Equatable {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count += 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return state.count >= 5","        ? .fireAndForget { await self.dismiss() }","        : .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then let’s embed that feature into a parent feature:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State: Equatable {","    var path = StackState<Path.State>()","  }","  enum Action: Equatable {","    case path(StackAction<Path.State, Path.Action>)","  }","","  struct Path: ReducerProtocol {","    enum State: Equatable { case counter(Counter.State) }","    enum Action: Equatable { case counter(Counter.Action) }","    var body: some ReducerProtocolOf<Self> {","      Scope(state: \/State.counter, action: \/Action.counter) { Counter() }","    }","  }","","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in ","      \/\/ Logic and behavior for core feature.","    }","    .forEach(\\.path, action: \/Action.path) { Path() }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s try to write a test on the "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer that proves that when the child counter"},{"type":"text","text":" "},{"type":"text","text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" for "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" that starts in a state with a single counter already on the stack:"}]},{"type":"codeListing","syntax":"swift","code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can send the "},{"type":"codeVoice","code":".incrementButtonTapped"},{"type":"text","text":" action in the counter child feature inside the"},{"type":"text","text":" "},{"type":"text","text":"stack in order to to confirm that the count goes up by one, but in order to do so we need to provide"},{"type":"text","text":" "},{"type":"text","text":"an ID:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.path(.element(id: ???, action: .incrementButtonTapped))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" automatically manages IDs"},{"type":"text","text":" "},{"type":"text","text":"for each feature and those IDs are mostly opaque to the outside. However, specifically in tests"},{"type":"text","text":" "},{"type":"text","text":"those IDs are integers and generational, which means the ID starts at 0 and then for each feature"},{"type":"text","text":" "},{"type":"text","text":"pushed onto the stack the global ID increments by one."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that when the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" were constructed with a single element already in the stack"},{"type":"text","text":" "},{"type":"text","text":"that it was given an ID of 0, and so that is the ID we can use when sending an action:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to assert how the counter feature in the stack changes when the action is sent. To"},{"type":"text","text":" "},{"type":"text","text":"do this we must go through multiple layers: first subscript through the ID, then unwrap the"},{"type":"text","text":" "},{"type":"text","text":"optional value returned from that subscript, then pattern match on the case of the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" "},{"type":"text","text":"enum, and then perform the mutation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library provides two different tools to perform all of these steps in a single step. You can"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" helper:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  XCTModify(&$0[id: 0], case: \/Feature.Path.State.counter) {","    $0.count = 4","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" function takes an "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" piece of enum state as its first argument and a case"},{"type":"text","text":" "},{"type":"text","text":"path for its second argument, and then uses the case path to extract the payload in that case,"},{"type":"text","text":" "},{"type":"text","text":"allow you to perform a mutation to it, and embed the data back into the enum. So, in the code"},{"type":"text","text":" "},{"type":"text","text":"above we are subscripting into ID 0, isolating the "},{"type":"codeVoice","code":".counter"},{"type":"text","text":" case of the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" enum,"},{"type":"text","text":" "},{"type":"text","text":"and mutating the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" to be 4 since it incremented by one. Further, if the case of "},{"type":"codeVoice","code":"$0[id: 0]"},{"type":"text","text":" "},{"type":"text","text":"didn’t match the case path, then a test failure would be emitted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another option is to use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)"},{"type":"text","text":" to simultaneously subscript into an"},{"type":"text","text":" "},{"type":"text","text":"ID on the stack "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" a case of the path enum:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  $0[id: 0, case: \/Feature.Path.State.counter]?.count = 4","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" style is best when you have many things you need to modify on the state, and the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)"},{"type":"text","text":" style is best when you have simple mutations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Continuing with the test, we can send it one more time to see that the count goes up to 5:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) {","  XCTModify(&$0[id: 0], case: \/Feature.Path.State.counter) {","    $0.count = 5","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we finally expect that the child dismisses itself, which manifests itself as the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"type":"text","text":" action being sent to pop the counter feature off the stack, which we"},{"type":"text","text":" "},{"type":"text","text":"can assert using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-1rwdd"},{"type":"text","text":" method on"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["await store.receive(.path(.popFrom(id: 0))) {","  $0.path[id: 0] = nil","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This shows how we can write very nuanced tests on how parent and child features interact with each"},{"type":"text","text":" "},{"type":"text","text":"other in a navigation stack."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, the more complex the features become, the more cumbersome testing their integration can be."},{"type":"text","text":" "},{"type":"text","text":"By default, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" requires us to be exhaustive in our assertions. We must assert on how"},{"type":"text","text":" "},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"type":"text","text":" "},{"type":"text","text":"sure that all effects finish by the end of the test (see "},{"type":"reference","isActive":true,"identifier":"docs:Testing"},{"type":"text","text":" for more info)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" also supports a form of testing known as “non-exhaustive testing” that allows you"},{"type":"text","text":" "},{"type":"text","text":"to assert on only the parts of the features that you actually care about (see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":" for more info)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if we turn off exhaustivity on the test store (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"type":"text","text":") then we"},{"type":"text","text":" "},{"type":"text","text":"can assert at a high level that when the increment button is tapped twice that eventually we receive"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"type":"text","text":" action:"}]},{"type":"codeListing","syntax":"swift","code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) ","  await store.send(.path(.element(id: 0, action: .incrementButtonTapped))) ","  await store.receive(.path(.popFrom(id: 0)))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer"},{"type":"text","text":" "},{"type":"text","text":"lines and is more resilient to future changes in the features that we don’t necessarily care about."}]},{"anchor":"StackState-vs-NavigationPath","level":2,"type":"heading","text":"StackState vs NavigationPath"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI comes with a powerful type for modeling data in navigation stacks called"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath"},{"type":"text","text":", and so you might wonder why we created our own data type,"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":", instead of leveraging "},{"type":"codeVoice","code":"NavigationPath"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NavigationPath"},{"type":"text","text":" data type is a type-erased list of data that is tuned specifically for"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":"s. It allows you to maximally decouple features in the stack since you can add any"},{"type":"text","text":" "},{"type":"text","text":"kind of data to a path, as long as it is "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var path = NavigationPath()","path.append(1)","path.append(\"Hello\")","path.append(false)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And SwiftUI interprets that data by describing what view should be pushed onto the stack"},{"type":"text","text":" "},{"type":"text","text":"corresponding to a type of data:"}]},{"type":"codeListing","syntax":"swift","code":["struct RootView: View {","  @State var path = NavigationPath()","","  var body: some View {","    NavigationStack(path: self.$path) {","      Form {","        \/\/ ...","      }","      .navigationDestination(for: Int.self) { integer in ","        \/\/ ...","      }","      .navigationDestination(for: String.self) { string in ","        \/\/ ...","      }","      .navigationDestination(for: Bool.self) { bool in ","        \/\/ ...","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be powerful, but it does come with some downsides. Because the underlying data is"},{"type":"text","text":" "},{"type":"text","text":"type-erased, SwiftUI has decided to not expose much API on the data type. For example, the only"},{"type":"text","text":" "},{"type":"text","text":"things you can do with a path are append data to the end of it, as seen above, or remove data"},{"type":"text","text":" "},{"type":"text","text":"from the end of it:"}]},{"type":"codeListing","syntax":"swift","code":["path.removeLast()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or count the elements in the path:"}]},{"type":"codeListing","syntax":"swift","code":["path.count"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that is all. You can’t insert or remove elements from anywhere but the end, and you can’t even"},{"type":"text","text":" "},{"type":"text","text":"iterate over the path:"}]},{"type":"codeListing","syntax":"swift","code":["let path: NavigationPath = …","for element in path {  \/\/ 🛑","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can make it very difficult to analyze what is on the stack and aggregate data across the"},{"type":"text","text":" "},{"type":"text","text":"entire stack."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" serves a similar purpose as "},{"type":"codeVoice","code":"NavigationPath"},{"type":"text","text":", but"},{"type":"text","text":" "},{"type":"text","text":"with different trade offs:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" is fully statically typed, and so you cannot add just "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" kind of data to it."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"But, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" conforms to the "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" protocol (as well as "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"), which gives you access to a lot of methods for manipulating the"},{"type":"text","text":" "},{"type":"text","text":"collection and introspecting what is inside the stack."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your feature’s data does not need to be "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" to put it in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":". The data type"},{"type":"text","text":" "},{"type":"text","text":"manages stable identifiers for your features under the hood, and automatically derives a hash"},{"type":"text","text":" "},{"type":"text","text":"value from those identifiers."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We feel that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" offers a nice balance between full runtime flexibility and static,"},{"type":"text","text":" "},{"type":"text","text":"compile-time guarantees, and that it is the perfect tool for modeling navigation stacks in the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/stackbasednavigation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to"},{"type":"text","text":" "},{"type":"text","text":"model your domains, how to integrate features, how to test your features, and more."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Stack-based navigation","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"seeAlsoSections":[{"title":"Stack-based navigation","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/forEach(_:action:destination:fileID:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"],"generated":true}],"references":{"#Testing":{"title":"Testing","titleInlineContent":[{"type":"text","text":"Testing"}],"type":"link","identifier":"#Testing","url":"#Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"role":"symbol","title":"NavigationStackStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationStackStore"}],"abstract":[{"type":"text","text":"A navigation stack that is driven by a store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/popFrom(id:)":{"role":"symbol","title":"StackAction.popFrom(id:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"popFrom"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An action sent to dismiss the associated stack element at a given identifier."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackaction\/popfrom(id:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/pop(from:)":{"role":"symbol","title":"pop(from:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pop"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Pops the element corresponding to "},{"type":"codeVoice","code":"id"},{"type":"text","text":" from the stack, and all elements after it."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackstate\/pop(from:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackElementID":{"role":"symbol","title":"StackElementID","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackElementID"}],"abstract":[{"type":"text","text":"An opaque type that identifies an element of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackElementID"}],"url":"\/documentation\/composablearchitecture\/stackelementid"},"docs:Testing":{"title":"docs:Testing","titleInlineContent":[{"type":"text","text":"docs:Testing"}],"type":"link","identifier":"docs:Testing","url":"docs:Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"role":"symbol","title":"DismissEffect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DismissEffect"}],"abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"role":"collectionGroup","title":"Navigation","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-1rwdd":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ScopedState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"receive(_:timeout:assert:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ScopedState"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-1rwdd","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-1rwdd"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation#Integration":{"abstract":[],"title":"Integration","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","url":"\/documentation\/composablearchitecture\/stackbasednavigation#Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"role":"symbol","title":"CaseLet","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CaseLet"}],"url":"\/documentation\/composablearchitecture\/caselet"},"#Dismissal":{"title":"Dismissal","titleInlineContent":[{"type":"text","text":"Dismissal"}],"type":"link","identifier":"#Dismissal","url":"#Dismissal"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"role":"symbol","title":"StackState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackState"}],"abstract":[{"type":"text","text":"A list of data representing the content of a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackState"}],"url":"\/documentation\/composablearchitecture\/stackstate"},"#StackState-vs-NavigationPath":{"title":"StackState vs NavigationPath","titleInlineContent":[{"type":"text","text":"StackState vs NavigationPath"}],"type":"link","identifier":"#StackState-vs-NavigationPath","url":"#StackState-vs-NavigationPath"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:)":{"role":"symbol","title":"subscript(id:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Accesses the value associated with the given id for reading and writing."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","title":"PresentationAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/element(id:action:)":{"role":"symbol","title":"StackAction.element(id:action:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"element"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An action sent to the associated stack element at a given identifier."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackaction\/element(id:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:case:)":{"role":"symbol","title":"subscript(id:case:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Case"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"case"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Accesses the value associated with the given id and case for reading and writing."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:case:)"},"#Integration":{"title":"Integration","titleInlineContent":[{"type":"text","text":"Integration"}],"type":"link","identifier":"#Integration","url":"#Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/forEach(_:action:destination:fileID:line:)":{"role":"symbol","title":"forEach(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_StackReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in"},{"type":"text","text":" "},{"type":"text","text":"parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/forEach(_:action:destination:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducerprotocol\/foreach(_:action:destination:fileid:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"role":"symbol","title":"exhaustivity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"role":"symbol","title":"StackAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"url":"\/documentation\/composablearchitecture\/stackaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"role":"article","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/run(priority:operation:catch:fileID:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"run(priority:operation:catch:fileID:line:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/run(priority:operation:catch:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effectpublisher\/run(priority:operation:catch:fileid:line:)"},"#Basics":{"title":"Basics","titleInlineContent":[{"type":"text","text":"Basics"}],"type":"link","identifier":"#Basics","url":"#Basics"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/fireAndForget(priority:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"fireAndForget(priority:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fireAndForget"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/fireAndForget(priority:_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/effectpublisher\/fireandforget(priority:_:)"},"https://developer.apple.com/documentation/swiftui/navigationpath":{"title":"NavigationPath","titleInlineContent":[{"type":"codeVoice","code":"NavigationPath"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"abstract":[],"title":"Enum state","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"role":"symbol","title":"SwitchStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"}],"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"url":"\/documentation\/composablearchitecture\/switchstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/popLast()":{"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BidirectionalCollection"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"popLast()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"popLast"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackstate\/poplast()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"abstract":[],"title":"Non-exhaustive testing","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing"}}}