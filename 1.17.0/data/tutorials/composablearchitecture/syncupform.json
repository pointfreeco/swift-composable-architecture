{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},"sections":[{"kind":"hero","chapter":"New sync-up form","content":[{"inlineContent":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"text":"feature to make things a little more interesting.","type":"text"}],"type":"paragraph"}],"title":"Sync-up form","estimatedTimeInMinutes":15},{"kind":"tasks","tasks":[{"title":"Sync-up form basics","anchor":"Sync-up-form-basics","stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file named SyncUpForm.swift to hold the feature that will allow entering the"},{"type":"text","text":" "},{"type":"text","text":"details of a sync-up. Let’s also go ahead and create a stub of a new reducer."}]}],"media":null,"code":"SyncUpForm-01-code-0001.swift","runtimePreview":null,"caption":[]},{"type":"step","caption":[],"code":"SyncUpForm-01-code-0002.swift","content":[{"inlineContent":[{"type":"text","text":"We can start with the domain modeling. In the state we only need a single, mutable "},{"code":"SyncUp","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"value."}],"type":"paragraph"}],"runtimePreview":null,"media":null},{"inlineContent":[{"type":"text","text":"For the actions we technically need one action for every UI control in the form. That means"},{"type":"text","text":" "},{"type":"text","text":"one action for the title text field, duration slider, theme picker, and attendee name text"},{"text":" ","type":"text"},{"text":"field. That can be extremely verbose, and so the library comes with a tool to help streamline","type":"text"},{"text":" ","type":"text"},{"text":"this. We also have a dedicated article on the topic, ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},{"type":"text","text":", for more detailed"},{"type":"text","text":" "},{"type":"text","text":"information."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use the tools we must complete two steps."}]},{"code":"SyncUpForm-01-code-0003.swift","runtimePreview":null,"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First, rather than creating an action for every single UI control in the form, we will"},{"text":" ","type":"text"},{"type":"text","text":"create one single action that is capable of deriving bindings for any data in the feature."},{"text":" ","type":"text"},{"type":"text","text":"This is done by conforming the action to "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"providing a single case that holds a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}]}],"caption":[]},{"code":"SyncUpForm-01-code-0004.swift","runtimePreview":null,"caption":[{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In order for this composition to work all reducers must operate on the same state"},{"text":" ","type":"text"},{"text":"and actions. There are operators in the library that help you transform existing reducers","type":"text"},{"type":"text","text":" "},{"text":"into the right shape so that they can be composed with others.","type":"text"}]}],"name":"Note"}],"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And second, compose the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference"},{"type":"text","text":" into your feature’s"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"type":"text","text":". This is our first time encountering reducer"},{"type":"text","text":" "},{"text":"composition in this tutorial, and it is done by simply listing all the reducers you want","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to compose in the "},{"code":"body","type":"codeVoice"},{"text":".","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few other actions we need to represent in this view. We are going to allow"},{"type":"text","text":" "},{"type":"text","text":"deleting attendees by swiping on their row, and we need a button for adding attendees."}]},{"type":"step","caption":[{"inlineContent":[{"text":"We have also added some additional logic to make sure that the collection of attendees is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not empty. This is the kind of logic we would like to get test coverage on eventually."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an "},{"code":"onDeleteAttendees","type":"codeVoice"},{"type":"text","text":" action that we can send from the "},{"type":"codeVoice","code":"onDelete"},{"text":" closure in the view.","type":"text"},{"type":"text","text":" "},{"text":"This is similar to what we did in the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"text":" reducer, but we have decided to name it","type":"text"},{"type":"text","text":" "},{"text":"more explicitly as ","type":"text"},{"type":"codeVoice","code":"onDeleteAttendees"},{"text":" since the “attendee” is not the core focus of this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature."}]}],"code":"SyncUpForm-01-code-0005.swift","media":null,"runtimePreview":null},{"caption":[],"type":"step","code":"SyncUpForm-01-code-0006.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Add an ","type":"text"},{"type":"codeVoice","code":"addAttendeeButtonTapped"},{"text":" action that inserts a new element to the end of the","type":"text"},{"text":" ","type":"text"},{"code":"syncUp.attendees","type":"codeVoice"},{"text":" collection.","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"That is all it takes to implement the basic functionality of the sync-up form. There will"},{"text":" ","type":"text"},{"type":"text","text":"be more to do in here too, but we can now move onto the view."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"In the same file as the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" reducer create a basic stub of a view that will hold"},{"text":" ","type":"text"},{"text":"the UI for the form.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"caption":[{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"We are collapsing the code in the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" reducer to make it easier to read"},{"type":"text","text":" "},{"text":"the view code.","type":"text"}]}],"type":"aside","style":"note"}],"code":"SyncUpForm-01-code-0007.swift"},{"code":"SyncUpForm-01-code-0008.swift","runtimePreview":null,"caption":[{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper is iOS 17+, and so if you are supporting older"},{"text":" ","type":"text"},{"type":"text","text":"platforms you can use the "},{"code":"@Perception.Bindable","type":"codeVoice"},{"type":"text","text":" property wrapper that comes with the"},{"text":" ","type":"text"},{"type":"text","text":"library. See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"},{"type":"text","text":" for more information."}]}],"name":"Note"}],"type":"step","content":[{"inlineContent":[{"text":"Add a ","type":"text"},{"code":"store","type":"codeVoice"},{"type":"text","text":" property to the view, just as we did in the "},{"code":"SyncUpsListView","type":"codeVoice"},{"type":"text","text":", but this time"},{"type":"text","text":" "},{"text":"we have annotated the variable with SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" property wrapper. That will allow","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"us to derive bindings from the store."}],"type":"paragraph"}],"media":null},{"code":"SyncUpForm-01-code-0009.swift","runtimePreview":null,"media":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Implement the rest of the form view by deriving bindings from the store to hand to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"various UI controls. This can be done by first getting a binding to the store via the"},{"text":" ","type":"text"},{"code":"$store","type":"codeVoice"},{"text":" syntax, and then dot-chaining onto that to derive bindings to any data inside the","type":"text"},{"text":" ","type":"text"},{"text":"store.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"We now have the basics of the sync-up form view in place. We can edit any field, and even add"},{"text":" ","type":"text"},{"type":"text","text":"attendees to the sync-up. Before integrating this feature into the sync-ups list (so that we"},{"text":" ","type":"text"},{"type":"text","text":"can actually create new sync-ups and add them to the list), let’s make this form feature a bit"},{"type":"text","text":" "},{"type":"text","text":"more interesting by controlling how the focus flows through the view."}],"type":"paragraph"}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by getting the basics of the new sync-up form feature into place. It will allow"},{"type":"text","text":" "},{"type":"text","text":"you to edit all the various parts of a sync-up, and it will be a pretty simple feature to"},{"type":"text","text":" "},{"text":"start, but we will layer on some more interesting functionality later on.","type":"text"}]}],"mediaPosition":"trailing","media":"SyncUpFormBasics-01-0000.png"}]},{"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Right now there is a small user experience problem with our sync-up form. When the form first"},{"text":" ","type":"text"},{"text":"appears nothing is focused, and so the user is forced to tap into the title text field to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"begin entering the details of the new sync-up. Further, when an attendee is added the newly"},{"type":"text","text":" "},{"type":"text","text":"added text field is not focused, forcing the user again to tap the text field."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can improve these small annoyances, and we will first start with an approach that puts all"},{"type":"text","text":" "},{"type":"text","text":"the logic in the view, and then we will explore a better approach after."}]}],"kind":"contentAndMedia"}],"title":"Form focus: an approach","anchor":"Form-focus-an-approach","stepsSection":[{"runtimePreview":null,"code":"SyncUpForm-02-code-0001.swift","caption":[],"media":null,"type":"step","content":[{"inlineContent":[{"text":"Focus is handled in SwiftUI with the ","type":"text"},{"code":"@FocusState","type":"codeVoice"},{"text":" property. Typically you start by modeling","type":"text"},{"type":"text","text":" "},{"text":"all of the fields that can be focused in the view with an enum, and then you hold onto","type":"text"},{"type":"text","text":" "},{"type":"text","text":"some optional enum state to represent what is currently focused, or if "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" then nothing"},{"type":"text","text":" "},{"type":"text","text":"is focused."}],"type":"paragraph"}]},{"code":"SyncUpForm-02-code-0002.swift","runtimePreview":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"And then you use the SwiftUI "},{"type":"codeVoice","code":".focused(_:equals:)"},{"type":"text","text":" view modifier to annotate the UI"},{"text":" ","type":"text"},{"text":"controls that can be focused.","type":"text"}],"type":"paragraph"}],"media":null},{"inlineContent":[{"type":"text","text":"With that little bit of work done we can now control focus in the view by simply mutating the"},{"type":"text","text":" "},{"type":"codeVoice","code":"focus"},{"type":"text","text":" state in the view. However, all of the other logic of our feature is in the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":" reducer. What if we need to implement complex and nuanced logic around how the","type":"text"},{"type":"text","text":" "},{"text":"focus changes in the feature? Does that logic need to live in the view?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s try it out and see how it goes."}],"type":"paragraph"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can start by introducing an "},{"type":"codeVoice","code":"onAppear"},{"type":"text","text":" view modifier that sets the focus to "},{"type":"codeVoice","code":".title"},{"text":" ","type":"text"},{"type":"text","text":"when the view appears."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is not possible to give "},{"type":"codeVoice","code":"@FocusState"},{"type":"text","text":" a default, and so it is necessary to use"},{"type":"text","text":" "},{"type":"codeVoice","code":"onAppear"},{"text":".","type":"text"}]},{"type":"aside","name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"onAppear","type":"codeVoice"},{"type":"text","text":" closure is called every time the view appears, not just the"},{"text":" ","type":"text"},{"text":"first time. So if we later added a feature that allowed you to drill-down to a child","type":"text"},{"type":"text","text":" "},{"text":"feature and then come back to the ","type":"text"},{"type":"codeVoice","code":"SyncUpFormView"},{"type":"text","text":", the focus would reset back to the"},{"type":"text","text":" "},{"type":"text","text":"title. That is probably not the behavior you would want, and so you may need to create"},{"text":" ","type":"text"},{"type":"text","text":"your own "},{"code":"onFirstAppear","type":"codeVoice"},{"type":"text","text":" view modifier to help with that situation."}]}]}],"code":"SyncUpForm-02-code-0003.swift","runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"text":"Next we can implement the focusing logic for adding a new attendee by pointing the ","type":"text"},{"code":"focus","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"state to the "},{"code":".attendee","type":"codeVoice"},{"text":" case with the ID of the newly created attendee.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"text":"We are force unwrapping here because we “know” that an attendee will","type":"text"},{"type":"text","text":" "},{"text":"definitely be added by the reducer. However, if the reducer logic changed some day so that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in certain cases an attendee is not added, we would run the risk of a crash. That means we"},{"text":" ","type":"text"},{"type":"text","text":"would need to beef up this logic more, and then we would want to get some test coverage on"},{"text":" ","type":"text"},{"type":"text","text":"it. But unfortunately that’s not really possible while the logic is trapped in the view."}]}],"type":"aside"}],"code":"SyncUpForm-02-code-0004.swift","media":null,"type":"step"},{"inlineContent":[{"type":"text","text":"Next we can implement some focusing logic for removing an attendee. We are going to go the"},{"text":" ","type":"text"},{"text":"extra distance to make this as user friendly as possible. We will make it so that if you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"delete an attendee that is focused, we will re-focus on the nearest attendee."}],"type":"paragraph"},{"code":"SyncUpForm-02-code-0005.swift","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Implement the logic for re-focusing after deleting an attendee. We first get the attendee","type":"text"},{"type":"text","text":" "},{"text":"that is being deleted. Then we send the ","type":"text"},{"type":"codeVoice","code":"onDeleteAttendees"},{"type":"text","text":" action to perform the actual"},{"type":"text","text":" "},{"type":"text","text":"deletion logic. Then we check if the attendee deleted was focused, and if so we compute"},{"text":" ","type":"text"},{"type":"text","text":"the index of the closest attendee so that we can focus them."}]}],"type":"step","media":null},{"media":null,"code":"SyncUpForm-02-code-0006.swift","content":[{"inlineContent":[{"text":"The focusing logic is now implemented. Add a preview at the bottom of the file.","type":"text"}],"type":"paragraph"}],"type":"step","runtimePreview":null,"caption":[]},{"code":null,"content":[{"inlineContent":[{"text":"Run the preview to see that the logic works as we expect. The preview begins with the title","type":"text"},{"type":"text","text":" "},{"text":"field focused. When adding an attendee the new field is automatically focused. And when","type":"text"},{"type":"text","text":" "},{"text":"deleting an attendee the next attendee is automatically focused.","type":"text"}],"type":"paragraph"}],"type":"step","media":"SyncUpForm-02-video-0007.mp4","caption":[],"runtimePreview":null},{"inlineContent":[{"text":"The focusing logic in the feature is now fully implemented. But there are a few things to not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like about how we have accomplished things so far."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have logic implemented in two distinct places in the feature. The logic of adding"},{"type":"text","text":" "},{"text":"and removing attendees is in the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" reducer, and the logic of focus is in the view."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are making assumptions in the view about how the reducer executes its logic, and those"},{"type":"text","text":" "},{"type":"text","text":"assumptions may someday be wrong."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The logic for focusing is complex. We are performing index juggling and subscripting"},{"type":"text","text":" "},{"text":"directly into a collection. If we get any of the logic wrong we could potentially have a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"crash. For these reasons we would like to test this logic, but that is not possible to do"},{"type":"text","text":" "},{"text":"easily since it is trapped in the view.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Let’s see what it takes to move all of the focus logic into the reducer, where it belongs.","type":"text"}],"type":"paragraph"}]},{"anchor":"Form-focus-a-better-approach","title":"Form focus: a better approach","stepsSection":[{"code":"SyncUpForm-03-code-0001.swift","type":"step","content":[{"inlineContent":[{"text":"Move the ","type":"text"},{"type":"codeVoice","code":"Field"},{"type":"text","text":" enum from the view to "},{"code":"SyncUpForm.State","type":"codeVoice"},{"type":"text","text":" and add an optional "},{"type":"codeVoice","code":"focus"},{"text":" field","type":"text"},{"text":" ","type":"text"},{"text":"to the state. We are not using ","type":"text"},{"type":"codeVoice","code":"@FocusState"},{"type":"text","text":" because that can only be used in the view."},{"type":"text","text":" "},{"text":"That also means that we can give the focus a default, which wasn’t possible when using","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"@FocusState"},{"type":"text","text":" property wrapper."}],"type":"paragraph"}],"caption":[{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"We have collapsed the view code to make it easier to read the reducer code.","type":"text"}]}]}],"runtimePreview":null,"media":null},{"inlineContent":[{"type":"text","text":"Next we start moving the focus logic from the view into the reducer."}],"type":"paragraph"},{"caption":[],"content":[{"inlineContent":[{"text":"Implement the logic of focusing a new added attendee. Now that we have immediate access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the reducer’s logic we no longer to do any force unwrapping or defensive programming"},{"type":"text","text":" "},{"text":"with ","type":"text"},{"code":"guard","type":"codeVoice"},{"type":"text","text":"s."}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null,"code":"SyncUpForm-03-code-0002.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the logic for focusing the nearest attendee when deleting an attendee. This logic"},{"type":"text","text":" "},{"type":"text","text":"is very similar to what we wrote in the view, but we can implement it with more confidence"},{"type":"text","text":" "},{"text":"since we are doing it right next to the logic that removes the attendee from the collection.","type":"text"}]}],"media":null,"caption":[],"code":"SyncUpForm-03-code-0003.swift","runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that all of the focus logic is in the reducer, we can remove it from the view. Delete"},{"text":" ","type":"text"},{"type":"text","text":"that logic from the “Add attendee” and "},{"type":"codeVoice","code":"onDelete"},{"text":" action closures, and delete the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"onAppear"},{"type":"text","text":" view modifier."}]}],"media":null,"code":"SyncUpForm-03-code-0004.swift","runtimePreview":null,"caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This massively cleans up the view, and we now have one single place for all logic of the"},{"text":" ","type":"text"},{"type":"text","text":"feature. However, focus is now completely broken. The "},{"code":"SyncUpForm","type":"codeVoice"},{"text":" reducer is managing its","type":"text"},{"type":"text","text":" "},{"type":"text","text":"own version of the "},{"code":"focus","type":"codeVoice"},{"type":"text","text":" state, and the view also has its own "},{"type":"codeVoice","code":"focus"},{"type":"text","text":" state. Those two"},{"text":" ","type":"text"},{"text":"pieces of state are completely disconnected, and so the change of one has no influence on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the other."}]},{"inlineContent":[{"type":"text","text":"Luckily this is easy to fix, using a tool that comes with the Composable Architecture called"},{"text":" ","type":"text"},{"code":"bind(_:to:)","type":"codeVoice"},{"type":"text","text":". It allows you to synchronize two bindings so that when one changes it immediately"},{"text":" ","type":"text"},{"text":"changes the other. This is useful for dealing with SwiftUI property wrappers that only work","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the view, such as "},{"type":"codeVoice","code":"@FocusState"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"At the bottom of the view use the "},{"type":"codeVoice","code":"bind(_:to:)"},{"type":"text","text":" view modifier to synchronize the focus"},{"type":"text","text":" "},{"text":"binding from the store, ","type":"text"},{"type":"codeVoice","code":"$store.focus"},{"text":", with the focus binding in the view, ","type":"text"},{"code":"$focus","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"SyncUpForm-03-code-0005.swift","media":null,"runtimePreview":null,"caption":[],"type":"step"},{"type":"paragraph","inlineContent":[{"text":"The preview is now back to working exactly as it did before, but now all logic is contained","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in one single place. And best of all, it is all testable."}]}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"A better approach to handling focus logic is to move it to the reducer. However, the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@FocusState"},{"text":" property cannot be used outside of SwiftUI views, and so we will need to do","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a small amount of work to bridge those worlds."}]}],"mediaPosition":"trailing"}]}]},{"abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"featuredEyebrow":"Tutorial","kind":"callToAction","action":{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started"},"title":"Testing the sync-up form"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"task"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps"}]},{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"}]}]},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk"},{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer"}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/syncupform"]}],"metadata":{"category":"Building SyncUps","title":"Sync-up form","categoryPathComponent":"BuildingSyncUps","role":"project"},"kind":"project","references":{"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"type":"topic","url":"\/tutorials\/buildingsyncups\/record-meeting","kind":"article","title":"Record meeting","role":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"title":"BindingAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingAction"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"type":"topic","url":"\/documentation\/composablearchitecture\/bindingaction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"type":"section","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"text":" ","type":"text"},{"text":"to test new features as you add them, and in the future we will have much more complicated","type":"text"},{"type":"text","text":" "},{"text":"behavior to test.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"section","title":"Writing your first test"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups","kind":"article","title":"Lists of sync-ups","abstract":[]},"SyncUpForm-01-code-0004.swift":{"identifier":"SyncUpForm-01-code-0004.swift","syntax":"swift","fileType":"swift","fileName":"SyncUpForm.swift","type":"file","highlights":[{"line":16},{"line":17},{"line":20},{"line":21}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","    ","    Reduce { state, action in","      switch action {","      case .binding:","        return .none","      }","    }","  }","}"]},"SyncUpForm-01-code-0001.swift":{"syntax":"swift","highlights":[],"fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","  }","","  enum Action {","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileName":"SyncUpForm.swift","identifier":"SyncUpForm-01-code-0001.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature","kind":"section","title":"Create a new feature","abstract":[{"text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"type":"topic","role":"project","estimatedTime":"5min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","url":"\/tutorials\/composablearchitecture\/persistingsyncups","kind":"project","title":"Persisting sync-ups","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"text":".","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"type":"topic","role":"project","estimatedTime":"10min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail","kind":"project","title":"Testing the sync-up detail","abstract":[{"text":"The ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature has slowly become quite complex. It now handles two forms of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"text":" ","type":"text"},{"text":"communicates with a parent feature via delegate actions. It’s about time we got some test","type":"text"},{"type":"text","text":" "},{"text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future","type":"text"},{"text":" ","type":"text"},{"text":"changes with confidence.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early","kind":"section","title":"Controlling dependencies early","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together","kind":"section","title":"Integrating the feature views together","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"kind":"section","title":"Testing persistence","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence","role":"pseudoSymbol","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"type":"text","text":" "},{"code":"@Shared","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":"."}]},"SyncUpForm-02-code-0006.swift":{"identifier":"SyncUpForm-02-code-0006.swift","syntax":"swift","fileType":"swift","fileName":"SyncUpForm.swift","type":"file","highlights":[{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","          guard","            !store.syncUp.attendees.isEmpty,","            let firstIndex = indices.first","          else { return }","          let index = min(firstIndex, store.syncUp.attendees.count - 1)","          focus = .attendee(store.syncUp.attendees[index].id)","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","          focus = .attendee(store.syncUp.attendees.last!.id)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}","","#Preview {","  SyncUpFormView(","    store: Store(","      initialState: SyncUpForm.State(","        syncUp: .mock","      )","    ) {","      SyncUpForm()","    }","  )","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"type":"section","url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up","kind":"section","title":"Deleting a sync-up","role":"pseudoSymbol","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"text":" feature, the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" feature, and the","type":"text"},{"text":" ","type":"text"},{"code":"MeetingView","type":"codeVoice"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"type":"section","kind":"section","role":"pseudoSymbol","title":"Integrating the feature domains together","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together"},"SyncUpFormBasics-01-0000.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/SyncUpFormBasics-01-0000.png"}],"identifier":"SyncUpFormBasics-01-0000.png","alt":null,"type":"image"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"kind":"section","title":"Removing attendees","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees","role":"pseudoSymbol","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"kind":"article","type":"topic","title":"New sync-up form","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","url":"\/tutorials\/buildingsyncups\/new-sync-up-form","role":"article","abstract":[]},"SyncUpForm-01-code-0002.swift":{"identifier":"SyncUpForm-01-code-0002.swift","syntax":"swift","fileType":"swift","fileName":"SyncUpForm.swift","type":"file","highlights":[{"line":8}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action {","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps","kind":"section","title":"A tour of SyncUps","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"kind":"project","title":"Sync-up detail","type":"topic","estimatedTime":"5min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","url":"\/tutorials\/composablearchitecture\/syncupdetail","role":"project","abstract":[{"text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","kind":"section","title":"More concise domain modeling"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"type":"topic","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation","estimatedTime":"20min","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","kind":"project","title":"Navigating to a sync-up detail"},"SyncUpForm-01-code-0006.swift":{"syntax":"swift","highlights":[{"line":12},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action: BindableAction {","    case addAttendeeButtonTapped","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","    ","    Reduce { state, action in","      switch action {","      case .addAttendeeButtonTapped:","        state.syncUp.attendees.append(","          Attendee(id: Attendee.ID())","        )","        return .none","","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        if state.syncUp.attendees.isEmpty {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","        }","        return .none","      }","    }","  }","}"],"fileName":"SyncUpForm.swift","identifier":"SyncUpForm-01-code-0006.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list","kind":"section","title":"Adding a new sync-up to the list","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"kind":"section","type":"section","title":"Creating the app view","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view","role":"pseudoSymbol","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"kind":"project","title":"Lists of sync-ups","type":"topic","estimatedTime":"10min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","url":"\/tutorials\/composablearchitecture\/listsofsyncups","role":"project","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"text":" ","type":"text"},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"type":"topic","url":"\/tutorials\/buildingsyncups","kind":"overview","title":"Building SyncUps","role":"overview","abstract":[{"text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,","type":"text"},{"text":" ","type":"text"},{"text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on","type":"text"},{"text":" ","type":"text"},{"text":"domain modeling, controlling dependencies, and testability.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"role":"pseudoSymbol","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach","kind":"section","title":"Form focus: a better approach","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","type":"section"},"SyncUpForm-03-code-0002.swift":{"identifier":"SyncUpForm-03-code-0002.swift","syntax":"swift","fileType":"swift","fileName":"SyncUpForm.swift","type":"file","highlights":[{"line":29},{"line":30},{"line":31}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var focus: Field? = .title","    var syncUp: SyncUp","","    enum Field: Hashable {","      case attendee(Attendee.ID)","      case title","    }","  }","","  enum Action: BindableAction {","    case addAttendeeButtonTapped","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","","    Reduce { state, action in","      switch action {","      case .addAttendeeButtonTapped:","        let attendee = Attendee(id: Attendee.ID())","        state.syncUp.attendees.append(attendee)","        state.focus = .attendee(attendee.id)","        return .none","","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        if state.syncUp.attendees.isEmpty {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","        }","        return .none","      }","    }","  }","}","","struct SyncUpFormView: View {","  \/\/ ...","}"]},"SyncUpForm-02-code-0005.swift":{"syntax":"swift","highlights":[{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47}],"fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","          guard","            !store.syncUp.attendees.isEmpty,","            let firstIndex = indices.first","          else { return }","          let index = min(firstIndex, store.syncUp.attendees.count - 1)","          focus = .attendee(store.syncUp.attendees[index].id)","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","          focus = .attendee(store.syncUp.attendees.last!.id)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"],"fileName":"SyncUpForm.swift","identifier":"SyncUpForm-02-code-0005.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","role":"pseudoSymbol","title":"Testing the edit flow","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" feature has slowly become quite complex. It now handles two forms of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"text":"communicates with a parent feature via delegate actions. It’s about time we got some test","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"kind":"section","type":"section","title":"Create the sync-up detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail","role":"pseudoSymbol","abstract":[{"text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that","type":"text"},{"type":"text","text":" "},{"text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature","kind":"section","title":"Navigating to the record meeting feature","role":"pseudoSymbol","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature"},"SyncUpForm-02-code-0004.swift":{"identifier":"SyncUpForm-02-code-0004.swift","syntax":"swift","fileType":"swift","fileName":"SyncUpForm.swift","type":"file","highlights":[{"line":46}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","          focus = .attendee(store.syncUp.attendees.last!.id)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"type":"topic","title":"Observation backport","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/observationbackport"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models","kind":"section","title":"Domain models","abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"type":"text","text":" "},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the app evolves."}]},"SyncUpForm-02-video-0007.mp4":{"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/SyncUpForm-02-video-0007.mp4"}],"identifier":"SyncUpForm-02-video-0007.mp4","alt":null,"type":"video","poster":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","role":"pseudoSymbol","title":"Editing the sync-up","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","kind":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer","title":"Testing the timer","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"type":"topic","role":"project","estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup","kind":"project","title":"Editing and deleting a sync-up","abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"kind":"section","type":"section","title":"Create the SyncUps project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project","role":"pseudoSymbol","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","type":"topic","role":"article","title":"Working with SwiftUI bindings","kind":"article","url":"\/documentation\/composablearchitecture\/bindings"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"abstract":[{"type":"text","text":"An action type that exposes a "},{"code":"binding","type":"codeVoice"},{"type":"text","text":" case that holds a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference"},{"type":"text","text":"."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindableAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindableaction","title":"BindableAction","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"role":"symbol"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"type":"topic","url":"\/tutorials\/buildingsyncups\/what-is-syncups-","kind":"article","title":"What is SyncUps?","role":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees","title":"Adding attendees","role":"pseudoSymbol"},"SyncUpForm-01-code-0003.swift":{"identifier":"SyncUpForm-01-code-0003.swift","syntax":"swift","fileType":"swift","fileName":"SyncUpForm.swift","type":"file","highlights":[{"line":11},{"line":12}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"estimatedTime":"10min","type":"topic","kind":"project","role":"project","title":"Testing the sync-up form","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/testingsyncupform"},"SyncUpForm-02-code-0002.swift":{"syntax":"swift","highlights":[{"line":22},{"line":37}],"fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"],"fileName":"SyncUpForm.swift","identifier":"SyncUpForm-02-code-0002.swift","type":"file"},"SyncUpForm-01-code-0008.swift":{"identifier":"SyncUpForm-01-code-0008.swift","syntax":"swift","fileType":"swift","fileName":"SyncUpForm.swift","type":"file","highlights":[{"line":10},{"line":11}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  ","  var body: some View {","    Form {","      ","    }","  }","}"]},"SyncUpForm-02-code-0001.swift":{"syntax":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"],"fileName":"SyncUpForm.swift","identifier":"SyncUpForm-02-code-0001.swift","type":"file"},"SyncUpForm-03-code-0001.swift":{"identifier":"SyncUpForm-03-code-0001.swift","syntax":"swift","fileType":"swift","fileName":"SyncUpForm.swift","type":"file","highlights":[{"line":8},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var focus: Field? = .title","    var syncUp: SyncUp","","    enum Field: Hashable {","      case attendee(Attendee.ID)","      case title","    }","  }","","  enum Action: BindableAction {","    case addAttendeeButtonTapped","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","","    Reduce { state, action in","      switch action {","      case .addAttendeeButtonTapped:","        state.syncUp.attendees.append(","          Attendee(id: Attendee.ID())","        )","        return .none","","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        if state.syncUp.attendees.isEmpty {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","        }","        return .none","      }","    }","  }","}","","struct SyncUpFormView: View {","  \/\/ ...","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"type":"topic","role":"project","estimatedTime":"10min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","url":"\/tutorials\/composablearchitecture\/presentingsyncupform","kind":"project","title":"Presenting the sync-up form","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"text":"add that sync-up to the root list.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"kind":"project","estimatedTime":"15min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","role":"project","title":"Sync-up form","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupform","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature to make things a little more interesting."}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"kind":"article","title":"Sync-up detail","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","url":"\/tutorials\/buildingsyncups\/sync-up-detail","role":"article","abstract":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"type":"topic","role":"project","estimatedTime":"5min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups","kind":"project","title":"Testing the list of sync-ups","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"text":" ","type":"text"},{"text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"text":" ","type":"text"},{"text":"behavior to test.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"type":"topic","role":"symbol","title":"BindingReducer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingReducer","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","kind":"symbol","navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}],"abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"kind":"section","type":"section","title":"Non-exhaustive testing","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing","role":"pseudoSymbol","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}]},"SyncUpForm-01-code-0005.swift":{"syntax":"swift","highlights":[{"line":13},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}],"fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var syncUp: SyncUp","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","    ","    Reduce { state, action in","      switch action {","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        if state.syncUp.attendees.isEmpty {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","        }","        return .none","      }","    }","  }","}"],"fileName":"SyncUpForm.swift","identifier":"SyncUpForm-01-code-0005.swift","type":"file"},"SyncUpForm-01-code-0007.swift":{"identifier":"SyncUpForm-01-code-0007.swift","syntax":"swift","fileType":"swift","fileName":"SyncUpForm.swift","type":"file","highlights":[{"line":6},{"line":7},{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  var body: some View {","    Form {","      ","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"type":"topic","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature","estimatedTime":"5min","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","kind":"project","title":"The RecordMeeting feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","role":"pseudoSymbol","title":"Persisting data to disk","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"text":".","type":"text"}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","kind":"article","url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail","title":"Navigating to sync-up detail","abstract":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"type":"topic","role":"project","estimatedTime":"10min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","url":"\/tutorials\/composablearchitecture\/testingnavigation","kind":"project","title":"Testing navigation","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"text":" ","type":"text"},{"text":"3 features into the stack: the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"text":" feature, the ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature, and the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MeetingView"},{"text":". Some of these features have quite complex logic binding them together, such as","type":"text"},{"text":" ","type":"text"},{"text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack.","type":"text"}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form","kind":"article","title":"Presenting the sync-up form","abstract":[]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk","kind":"article","title":"Persisting sync-ups to disk","abstract":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"kind":"project","type":"topic","title":"Navigating to a meeting","estimatedTime":"5min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","url":"\/tutorials\/composablearchitecture\/meetingnavigation","role":"project","abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"kind":"section","type":"section","title":"Navigate to a meeting","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting","role":"pseudoSymbol","abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}]},"SyncUpForm-03-code-0004.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: SyncUpForm.State.Field?","","  \/\/ enum Field: Hashable {","  \/\/   case attendee(Attendee.ID)","  \/\/   case title","  \/\/ }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          \/\/ .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","          \/\/ store.send(.onDeleteAttendees(indices))","          \/\/ guard","          \/\/  !store.syncUp.attendees.isEmpty,","          \/\/  let firstIndex = indices.first","          \/\/ else { return .none }","          \/\/ let index = min(firstIndex, store.syncUp.attendees.count - 1)","          \/\/ focus = .attendee(store.syncUp.attendees[index].id)","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","          \/\/ focus = .attendee(store.syncUp.attendees.last!.id)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}","","#Preview {","  SyncUpFormView(","    store: Store(","      initialState: SyncUpForm.State(","        syncUp: .mock","      )","    ) {","      SyncUpForm()","    }","  )","}"],"identifier":"SyncUpForm-03-code-0004.swift","fileName":"SyncUpForm.swift","fileType":"swift","highlights":[{"line":11},{"line":13},{"line":14},{"line":15},{"line":16},{"line":23},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":53}],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"section","title":"Navigating to the detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up","kind":"section","title":"Deleting the sync-up","abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}]},"SyncUpForm-03-code-0005.swift":{"syntax":"swift","highlights":[{"line":45}],"fileType":"swift","type":"file","identifier":"SyncUpForm-03-code-0005.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: SyncUpForm.State.Field?","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","    .bind($store.focus, to: $focus)","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}","","#Preview {","  SyncUpFormView(","    store: Store(","      initialState: SyncUpForm.State(","        syncUp: .mock","      )","    ) {","      SyncUpForm()","    }","  )","}"],"fileName":"SyncUpForm.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"text":" ","type":"text"},{"text":"to use Apple’s ","type":"text"},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"text":" ","type":"text"},{"text":"audio, and then start a speech recognition task to live transcribe the meeting while it is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"type":"section","title":"Asking for speech recognition permission","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"section","title":"SyncUpsList feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"kind":"project","title":"Adding a meeting timer","type":"topic","estimatedTime":"25min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","url":"\/tutorials\/composablearchitecture\/implementingtimer","role":"project","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}]},"SyncUpForm-01-code-0009.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  ","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"],"identifier":"SyncUpForm-01-code-0009.swift","fileName":"SyncUpForm.swift","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70}],"syntax":"swift"},"SyncUpForm-03-code-0003.swift":{"syntax":"swift","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":46},{"line":48},{"line":49}],"fileType":"swift","type":"file","identifier":"SyncUpForm-03-code-0003.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  @ObservableState","  struct State: Equatable {","    var focus: Field? = .title","    var syncUp: SyncUp","","    enum Field: Hashable {","      case attendee(Attendee.ID)","      case title","    }","  }","","  enum Action: BindableAction {","    case addAttendeeButtonTapped","    case binding(BindingAction<State>)","    case onDeleteAttendees(IndexSet)","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","","    Reduce { state, action in","      switch action {","      case .addAttendeeButtonTapped:","        let attendee = Attendee(id: Attendee.ID())","        state.syncUp.attendees.append(attendee)","        state.focus = .attendee(attendee.id)","        return .none","","      case .binding:","        return .none","","      case let .onDeleteAttendees(indices):","        state.syncUp.attendees.remove(atOffsets: indices)","        guard","          !state.syncUp.attendees.isEmpty,","          let firstIndex = indices.first","        else {","          state.syncUp.attendees.append(","            Attendee(id: Attendee.ID())","          )","          return .none","        }","        let index = min(firstIndex, state.syncUp.attendees.count - 1)","        state.focus = .attendee(state.syncUp.attendees[index].id)","        return .none","      }","    }","  }","}","","struct SyncUpFormView: View {","  \/\/ ...","}"],"fileName":"SyncUpForm.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"estimatedTime":"10min","type":"topic","role":"project","title":"Testing the add sync-up flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation","kind":"project","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}]},"SyncUpForm-02-code-0003.swift":{"type":"file","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpForm {","  \/\/ ...","}","","struct SyncUpFormView: View {","  @Bindable var store: StoreOf<SyncUpForm>","  @FocusState var focus: Field?","","  enum Field: Hashable {","    case attendee(Attendee.ID)","    case title","  }","","  var body: some View {","    Form {","      Section {","        TextField(\"Title\", text: $store.syncUp.title)","          .focused($focus, equals: .title)","          .onAppear { focus = .title }","        HStack {","          Slider(value: $store.syncUp.duration.minutes, in: 5...30, step: 1) {","            Text(\"Length\")","          }","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","        ThemePicker(selection: $store.syncUp.theme)","      } header: {","        Text(\"Sync-up Info\")","      }","      Section {","        ForEach($store.syncUp.attendees) { $attendee in","          TextField(\"Name\", text: $attendee.name)","            .focused($focus, equals: .attendee(attendee.id))","        }","        .onDelete { indices in","          store.send(.onDeleteAttendees(indices))","        }","","        Button(\"New attendee\") {","          store.send(.addAttendeeButtonTapped)","        }","      } header: {","        Text(\"Attendees\")","      }","    }","  }","}","","struct ThemePicker: View {","  @Binding var selection: Theme","","  var body: some View {","    Picker(\"Theme\", selection: $selection) {","      ForEach(Theme.allCases) { theme in","        ZStack {","          RoundedRectangle(cornerRadius: 4)","            .fill(theme.mainColor)","          Label(theme.name, systemImage: \"paintpalette\")","            .padding(4)","        }","        .foregroundColor(theme.accentColor)","        .fixedSize(horizontal: false, vertical: true)","        .tag(theme)","      }","    }","  }","}","","extension Duration {","  fileprivate var minutes: Double {","    get { Double(components.seconds \/ 60) }","    set { self = .seconds(newValue * 60) }","  }","}"],"identifier":"SyncUpForm-02-code-0003.swift","fileName":"SyncUpForm.swift","fileType":"swift","highlights":[{"line":23}],"syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","kind":"symbol","required":true,"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","text":"Body","kind":"typeIdentifier"}],"defaultImplementations":2,"abstract":[{"text":"The content and behavior of a reducer that is composed from other reducers.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","title":"body"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"role":"pseudoSymbol","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics","kind":"section","title":"Sync-up form basics","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach","title":"Form focus: an approach","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"url":"\/tutorials\/composablearchitecture\/whatissyncups","estimatedTime":"5min","title":"What is SyncUps?","type":"topic","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"kind":"project","type":"topic","title":"Adding a speech recognizer","estimatedTime":"10min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer","role":"project","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"text":" ","type":"text"},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"text":" ","type":"text"},{"text":"audio, and then start a speech recognition task to live transcribe the meeting while it is","type":"text"},{"type":"text","text":" "},{"text":"in progress.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"kind":"section","type":"section","title":"A basic timer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer","role":"pseudoSymbol","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"type":"text","text":" "},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early","kind":"section","title":"Ending the meeting early","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"kind":"section","type":"section","title":"Adding a sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up","role":"pseudoSymbol","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"kind":"section","title":"Creating the app feature","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature","role":"pseudoSymbol","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool","kind":"section","title":"A handy debugging tool","abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"text":"the app evolves.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen","kind":"section","title":"The meeting screen","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"type":"text","text":" "},{"text":"previous recorded meeting.","type":"text"}]}}}