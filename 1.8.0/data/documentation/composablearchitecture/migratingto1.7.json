{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"type":"text","text":" "},{"type":"text","text":"APIs, and this article contains some tips for doing so."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.6. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6"},{"type":"text","text":" for"},{"type":"text","text":" "},{"type":"text","text":"more information."}]}],"type":"aside","name":"Important"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The following migration guide mostly assumes you are targeting iOS 17, macOS 14, tvOS 17,"},{"type":"text","text":" "},{"type":"text","text":"watchOS 10 or higher, but the tools do work for older platforms too. See the dedicated"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"},{"type":"text","text":" article for more information on how to use the new observation tools if"},{"type":"text","text":" "},{"type":"text","text":"you are targeting older platforms."}]}],"type":"aside","name":"Note"},{"anchor":"Topics","level":3,"type":"heading","text":"Topics"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Using-ObservableState"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Replacing-IfLetStore-with-if-let"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Replacing-ForEachStore-with-ForEach"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Replacing-PresentationState-with-Presents"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Updating-alert-and-confirmationDialog"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Replacing-NavigationStackStore-with-NavigationStack"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#BindingState"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#ViewStorebinding"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Computed-view-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#View-actions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Observing-for-UIKit"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Incrementally-migrating"}]}]}]},{"anchor":"Using-ObservableState","level":2,"type":"heading","text":"Using @ObservableState"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two ways to update existing code to use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro depending on"},{"type":"text","text":" "},{"type":"text","text":"your minimum deployment target. Take, for example, the following scaffolding of a typical feature"},{"type":"text","text":" "},{"type":"text","text":"built with the Composable Architecture prior to version 1.7 and the new observation tools:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  var body: some ReducerOf<Self> {","    \/\/ ...","  }","}","","struct FeatureView: View {","  let store: StoreOf<Feature>","","  struct ViewState: Equatable {","    \/\/ ...","    init(state: Feature.State) { \/* ... *\/ }","  }","","  var body: some View {","    WithViewStore(store, observe: ViewState.init) { viewStore in","      Form {","        Text(viewStore.count.description)","        Button(\"+\") { viewStore.send(.incrementButtonTapped) }","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This feature is manually managing a "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" struct and using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" in order to"},{"type":"text","text":" "},{"type":"text","text":"minimize the state being observed in the view."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are still targeting iOS 16, macOS 13, tvOS 16, watchOS 9 or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lower"}]},{"type":"text","text":", then you can update the"},{"type":"text","text":" "},{"type":"text","text":"code in the following way:"}]},{"type":"codeListing","syntax":"diff","code":[" @Reducer"," struct Feature {","+  @ObservableState","   struct State { \/* ... *\/ }","   enum Action { \/* ... *\/ }","   var body: some ReducerOf<Self> {","     \/\/ ...","   }"," }"," "," struct FeatureView: View {","   let store: StoreOf<Feature>"," ","-  struct ViewState: Equatable {","-    \/\/ ...","-    init(state: Feature.State) { \/* ... *\/ }","-  }"," ","   var body: some View {","-    WithViewStore(store, observe: ViewState.init) { viewStore in","+    WithPerceptionTracking {","       Form {","-        Text(viewStore.count.description)","-        Button(\"+\") { viewStore.send(.incrementButtonTapped) }","+        Text(store.count.description)","+        Button(\"+\") { store.send(.incrementButtonTapped) }","       }","     }","   }"," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In particular, the following changes must be made:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Mark your "},{"type":"codeVoice","code":"State"},{"type":"text","text":" with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Delete any view state type you have defined."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the use of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" with "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":", and the trailing closure"},{"type":"text","text":" "},{"type":"text","text":"does not take an argument. The view constructed inside the trailing closure will automatically"},{"type":"text","text":" "},{"type":"text","text":"observe state accessed inside the closure."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Access state directly in the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" rather than in the "},{"type":"codeVoice","code":"viewStore"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Send actions directly to the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" rather than to the "},{"type":"codeVoice","code":"viewStore"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are able to target iOS 17, macOS 14, tvOS 17, watchOS 10 or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"higher"}]},{"type":"text","text":", then you will still"},{"type":"text","text":" "},{"type":"text","text":"apply all of the updates above, but with one additional simplification to the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view:"}]},{"type":"codeListing","syntax":"diff","code":[" var body: some View {","-  WithViewStore(store, observe: ViewState.init) { viewStore in","     Form {","-      Text(viewStore.count.description)","-      Button(\"+\") { viewStore.send(.incrementButtonTapped) }","+      Text(store.count.description)","+      Button(\"+\") { store.send(.incrementButtonTapped) }","     }","-  }"," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You no longer need the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" or "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" views at all."}]},{"anchor":"Replacing-IfLetStore-with-if-let","level":2,"type":"heading","text":"Replacing IfLetStore with ‘if let’"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" view was a helper for transforming a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" of optional state into a store of"},{"type":"text","text":" "},{"type":"text","text":"non-optional state so that it can be handed off to a child view. It is no longer needed when using"},{"type":"text","text":" "},{"type":"text","text":"the new observation tools, and so it is "},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    var child: Child.State?","  }","  enum Action {","    case child(Child.Action)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then previously you would make use of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" in the view like this:"}]},{"type":"codeListing","syntax":"swift","code":["IfLetStore(store: store.scope(state: \\.child, action: \\.child)) { childStore in","  ChildView(store: childStore)","} else: {","  Text(\"Nothing to show\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can now be updated to use plain "},{"type":"codeVoice","code":"if let"},{"type":"text","text":" syntax with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-36e72"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if let childStore = store.scope(state: \\.child, action: \\.child) {","  ChildView(store: childStore)","} else {","  Text(\"Nothing to show\")","}"]},{"anchor":"Replacing-ForEachStore-with-ForEach","level":2,"type":"heading","text":"Replacing ForEachStore with ForEach"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":" view was a helper for deriving a store for each element of a collection. It is"},{"type":"text","text":" "},{"type":"text","text":"no longer needed when using the new observation tools, and so it is "},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    var rows: IdentifiedArrayOf<Child.State> = []","  }","  enum Action {","    case rows(IdentifiedActionOf<Child>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you would have made use of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":" in the view like this:"}]},{"type":"codeListing","syntax":"swift","code":["ForEachStore(","  store.scope(state: \\.rows, action: \\.rows)",") { childStore in","  ChildView(store: childStore)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can now be updated to use the vanilla "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" view in SwiftUI, along with"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-1nelp"},{"type":"text","text":", identified by the state of each row:"}]},{"type":"codeListing","syntax":"swift","code":["ForEach(","  store.scope(state: \\.rows, action: \\.rows), id: \\.state.id",") { childStore in","  ChildView(store: childStore)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your usage of "},{"type":"codeVoice","code":"ForEachStore"},{"type":"text","text":" did not depend on the identity of the state of each row ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"type":"text","text":", the"},{"type":"text","text":" "},{"type":"text","text":"state’s "},{"type":"codeVoice","code":"id"},{"type":"text","text":" is not associated with a selection binding), you can omit the "},{"type":"codeVoice","code":"id"},{"type":"text","text":" parameter, as the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" type is identifiable by its object identity:"}]},{"type":"codeListing","syntax":"diff","code":[" ForEach(","-  store.scope(state: \\.rows, action: \\.rows),","-  id: \\.state.id,","+  store.scope(state: \\.rows, action: \\.rows)"," ) { childStore in","   ChildView(store: childStore)"," }"]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now use collection-based operators with store scoping. For example, use"},{"type":"text","text":" "},{"type":"codeVoice","code":"Array.enumerated"},{"type":"text","text":" in order to enumerate the rows so that you can provide custom styling based on"},{"type":"text","text":" "},{"type":"text","text":"the row being even or odd:"}]},{"type":"codeListing","syntax":"swift","code":["ForEach(","  Array(store.scope(state: \\.rows, action: \\.rows).enumerated()),","  id: \\.element",") { position, childStore in","  ChildView(store: childStore)","    .background {","      position.isMultiple(of: 2) ? Color.white : Color.gray","    }","}"]}],"type":"aside","name":"Tip"},{"anchor":"Replacing-SwitchStore-and-CaseLet-with-switch-and-case","level":2,"type":"heading","text":"Replacing SwitchStore and CaseLet with ‘switch’ and ‘case’"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views are helpers for driving a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" for each case of"},{"type":"text","text":" "},{"type":"text","text":"an enum. These views are no longer needed when using the new observation tools, and so they are"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer ","struct Feature {","  @ObservableState","  enum State {","    case activity(ActivityFeature.State)","    case settings(SettingsFeature.State)","  }","  enum Action {","    case activity(ActivityFeature.Action)","    case settings(SettingsFeature.Action)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you would have used "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" in the view like this:"}]},{"type":"codeListing","syntax":"swift","code":["SwitchStore(store) {","  switch $0 {","  case .activity:","    CaseLet(\/Feature.State.activity, action: Feature.Action.activity) { store in","      ActivityView(store: store)","    }","  case .settings:","    CaseLet(\/Feature.State.settings, action: Feature.Action.settings) { store in","      SettingsView(store: store)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can now be updated to use a vanilla "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" and "},{"type":"codeVoice","code":"case"},{"type":"text","text":" in the view:"}]},{"type":"codeListing","syntax":"swift","code":["switch store.state {","case .activity:","  if let store = store.scope(state: \\.activity, action: \\.activity) {","    ActivityView(store: store)","  }","case .settings:","  if let store = store.scope(state: \\.settings, action: \\.settings) {","    SettingsView(store: store)","  }","}"]},{"anchor":"Replacing-PresentationState-with-Presents","level":2,"type":"heading","text":"Replacing @PresentationState with @Presents"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is a well-known limitation of Swift macros that they cannot be used with property wrappers."},{"type":"text","text":" "},{"type":"text","text":"This means that if your feature uses "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" you will get compiler errors when"},{"type":"text","text":" "},{"type":"text","text":"applying the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro:"}]},{"type":"codeListing","syntax":"swift","code":["@ObservableState ","struct State {","  @PresentationState var child: Child.State?  \/\/ 🛑","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" property wrapper you can now use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"macro:"}]},{"type":"codeListing","syntax":"swift","code":["@ObservableState ","struct State {","  @Presents var child: Child.State?  \/\/ ✅","}"]},{"anchor":"Replacing-navigation-view-modifiers-with-SwiftUI-modifiers","level":2,"type":"heading","text":"Replacing navigation view modifiers with SwiftUI modifiers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library has shipped many navigation view modifiers that mimic what SwiftUI provides, but are"},{"type":"text","text":" "},{"type":"text","text":"tuned specifically for driving navigation from a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":". All of these view modifiers can be"},{"type":"text","text":" "},{"type":"text","text":"updated to instead use the vanilla SwiftUI version of the view modifier, and so the modifier that"},{"type":"text","text":" "},{"type":"text","text":"ship with this library are now soft-deprecated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    @Presents var child: Child.State?","  }","  enum Action {","    case child(PresentationAction<Child.Action>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then previously you would drive a sheet presentation from the view like so:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(store: store.scope(state: \\.$child, action: \\.child)) { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now replace "},{"type":"codeVoice","code":"sheet(store:)"},{"type":"text","text":" with the vanilla SwiftUI modifier, "},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":". First you"},{"type":"text","text":" "},{"type":"text","text":"must hold onto the store in your view in a bindable manner, using the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["@Bindable var store: StoreOf<Feature>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…or, if you’re targeting older platforms, using "},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@Perception.Bindable var store: StoreOf<Feature>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you can use "},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":" like so:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(item: $store.scope(state: \\.child, action: \\.child)) { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the state key path is simply "},{"type":"codeVoice","code":"state: \\.child"},{"type":"text","text":", and not "},{"type":"codeVoice","code":"state: \\.$child"},{"type":"text","text":". The projected"},{"type":"text","text":" "},{"type":"text","text":"value of the presentation state is no longer needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also applies to popovers, full screen covers, and navigation destinations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Also, if you are driving navigation from an enum of destinations, then currently your code may"},{"type":"text","text":" "},{"type":"text","text":"look something like this:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(","  store: store.scope(","    state: \\.$destination.editForm,","    action: \\.destination.editForm","  )",") { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can now be changed to this:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(","  item: $store.scope(","    state: \\.destination?.editForm,","    action: \\.destination.editForm","  )",") { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the state key path is now simply "},{"type":"codeVoice","code":"\\.destination?.editForm"},{"type":"text","text":", and not"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\.$destination.editForm"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Also note that "},{"type":"codeVoice","code":"navigationDestination(item:)"},{"type":"text","text":" is not available on older platforms, but can be made"},{"type":"text","text":" "},{"type":"text","text":"available as far back as iOS 15 using a wrapper. See"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Backwards-compatible-availability"},{"type":"text","text":" for more information."}]},{"anchor":"Updating-alert-and-confirmationDialog","level":2,"type":"heading","text":"Updating alert and confirmationDialog"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/alert(store:)"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/confirmationDialog(store:)"},{"type":"text","text":" modifiers have"},{"type":"text","text":" "},{"type":"text","text":"been used to drive alerts and dialogs from stores, but new modifiers are now available that can"},{"type":"text","text":" "},{"type":"text","text":"drive alerts and dialogs from the same store binding scope operation that can power vanilla SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"presentation, like "},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s reducer presents an alert:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    @Presents var alert: AlertState<Action.Alert>?","  }","  enum Action {","    case alert(PresentationAction<Alert>)","    enum Alert { \/* ... *\/ }","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then previously you would drive it from the feature’s view like so:"}]},{"type":"codeListing","syntax":"swift","code":[".alert(store: store.scope(state: \\.$alert, action: \\.alert))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now replace "},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" with a new modifier, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/alert(_:)"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":[".alert($store.scope(state: \\.alert, action: \\.alert))"]},{"anchor":"Replacing-NavigationStackStore-with-NavigationStack","level":2,"type":"heading","text":"Replacing NavigationStackStore with NavigationStack"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":" view was a helper for driving a navigation stack from a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":". It"},{"type":"text","text":" "},{"type":"text","text":"is no longer needed when using the new observation tools, and so it is "},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State {","    var path: StackState<Path.State> = []","  }","  enum Action {","    case path(StackAction<Path.State, Path.Action>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you would have made use of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":" in the view like this:"}]},{"type":"codeListing","syntax":"swift","code":["NavigationStackStore(store.scope(state: \\.path, action: \\.path)) {","  RootView()","} destination: {","  switch $0 {","  case .activity:","    CaseLet(\/Feature.State.activity, action: Feature.Action.activity) { store in","      ActivityView(store: store)","    }","  case .settings:","    CaseLet(\/Feature.State.settings, action: Feature.Action.settings) { store in","      SettingsView(store: store)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To update this code, first mark your feature’s state with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    \/\/ ...","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As well as the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer’s state:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Path {","  @ObservableState","  enum State {","    \/\/ ...","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in the view you must start holding onto the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" in a bindable manner, using the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" "},{"type":"text","text":"property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["@Bindable var store: StoreOf<Feature>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…or using "},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":" if targeting older platforms:"}]},{"type":"codeListing","syntax":"swift","code":["@Perception.Bindable var store: StoreOf<Feature>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And the original code can now be updated to our custom initializer"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:)"},{"type":"text","text":" on "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","  RootView()","} destination: { store in","  switch store.state {","  case .activity:","    if let store = store.scope(state: \\.activity, action: \\.activity) {","      ActivityView(store: store)","    }","  case .settings:","    if let store = store.scope(state: \\.settings, action: \\.settings) {","      SettingsView(store: store)","    }","  }","}"]},{"anchor":"BindingState","level":2,"type":"heading","text":"@BindingState"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Bindings in the Composable Architecture have historically been handled by a zoo of types, including"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"},{"type":"text","text":". For example, if your view needs to be able to derive bindings to many fields"},{"type":"text","text":" "},{"type":"text","text":"on your state, you may have the reducer built somewhat like this:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State {","    @BindingState var text = \"\"","    @BindingState var isOn = false","  }","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in the view you derive bindings using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/subscript(dynamicMember:)-3q4xh"},{"type":"text","text":" defined on"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["WithViewStore(store, observe: { $0 }) { viewStore in","  Form {","    TextField(\"Text\", text: viewStore.$text)","    Toggle(isOn: viewStore.$isOn)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But if you have view state in your view, then you have a lot more steps to take:"}]},{"type":"codeListing","syntax":"swift","code":["struct ViewState: Equatable {","  @BindingViewState var text: String","  @BindingViewState var isOn: Bool","  init(store: BindingViewStore<Feature.State>) {","    self._text = store.$text","    self._isOn = store.$isOn","  }","}","","var body: some View {","  WithViewStore(store, observe: ViewState.init) { viewStore in","    Form {","      TextField(\"Text\", text: viewStore.$text)","      Toggle(isOn: viewStore.$isOn)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most of this goes away when using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro. You can start by annotating"},{"type":"text","text":" "},{"type":"text","text":"your feature’s state with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" and removing all instances of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["+@ObservableState"," struct State {","-  @BindingState var text = \"\"","-  @BindingState var isOn = false","+  var text = \"\"","+  var isOn = false"," }"]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Do not remove the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" conformance from your feature’s "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" or the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":" from your reducer. Those are still required for bindings."}]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the view you must start holding onto the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" in a bindable manner, which means using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["@Bindable var store: StoreOf<Feature>"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If targeting older Apple platforms where "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" is not available, you can use our"},{"type":"text","text":" "},{"type":"text","text":"backport of the property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["@Perception.Bindable var store: StoreOf<Feature>"]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view you can stop using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" and instead derive bindings"},{"type":"text","text":" "},{"type":"text","text":"directly from the store:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some View {","  Form {","    TextField(\"Text\", text: $store.text)","    Toggle(isOn: $store.isOn)","  }","}"]},{"anchor":"ViewStorebinding","level":2,"type":"heading","text":"ViewStore.binding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s another way to derive bindings from a view store that involves fewer tools than"},{"type":"text","text":" "},{"type":"codeVoice","code":"@BindingState"},{"type":"text","text":" as shown above, but does involve more boilerplate. You can add an explicit action"},{"type":"text","text":" "},{"type":"text","text":"for the binding to your domain, such as an action for setting the tab in a tab-based application:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer ","struct Feature {","  struct State {","    var tab = 0","  }","  enum Action {","    case tabChanged(Int)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case let .tabChanged(tab):","        state.tab = tab","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in the view you can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes"},{"type":"text","text":" to derive a binding from"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"tab"},{"type":"text","text":" state and the "},{"type":"codeVoice","code":"tabChanged"},{"type":"text","text":" action:"}]},{"type":"codeListing","syntax":"swift","code":["TabView(","  selection: viewStore.binding(get: \\.tab, send: { .tabChanged($0) })",") {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" type is now soft-deprecated, you can update this code to do something much"},{"type":"text","text":" "},{"type":"text","text":"simpler. If you make your feature’s state observable with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState"},{"type":"text","text":" macro:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer ","struct Feature {","  @ObservableState","  struct State {","    \/\/ ...","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the view you must start holding onto the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" in a bindable manner, which means using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" (or "},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":") property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["@Bindable var store: StoreOf<Feature>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you can derive a binding directly from a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" binding like so:"}]},{"type":"codeListing","syntax":"swift","code":["TabView(selection: $store.tab.sending(\\.tabChanged)) {","  \/\/ ...","}"]},{"anchor":"Computed-view-state","level":2,"type":"heading","text":"Computed view state"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using the "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" pattern in your application, then you may be computing values"},{"type":"text","text":" "},{"type":"text","text":"inside the initializer to be used in the view like so:"}]},{"type":"codeListing","syntax":"swift","code":["struct ViewState: Equatable {","  let fullName: String","  init(state: Feature.State) {","    self.fullName = \"\\(state.firstName) \\(state.lastName)\"","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.7 of the library the "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" struct goes away, and so you can move these kinds of"},{"type":"text","text":" "},{"type":"text","text":"computations to be directly on your feature’s state:"}]},{"type":"codeListing","syntax":"swift","code":["struct State {","  \/\/ State fields","  ","  var fullName: String {","    \"\\(self.firstName) \\(self.lastName)\"","  }","}"]},{"anchor":"View-actions","level":2,"type":"heading","text":"View actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is a common pattern in the Composable Architecture community to separate actions that are"},{"type":"text","text":" "},{"type":"text","text":"sent in the view from actions that are used internally in the feature, such as emissions of effects."},{"type":"text","text":" "},{"type":"text","text":"Typically this looks like the following:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature","  struct State { \/* ... *\/ }","  enum Action {","    case loginResponse(Bool)","    case view(View)","","    enum View {","      case loginButtonTapped","    }","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in the view you would use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" with the "},{"type":"codeVoice","code":"send"},{"type":"text","text":" argument to specify which"},{"type":"text","text":" "},{"type":"text","text":"actions the view has access to:"}]},{"type":"codeListing","syntax":"swift","code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    WithViewStore(","      store, ","      observe: { $0 }, ","      send: Feature.Action.view  \/\/ 👈","    ) { viewStore in","      Button(\"Login\") {","        viewStore.send(.loginButtonTapped) ","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That makes it so that you can send "},{"type":"codeVoice","code":"view"},{"type":"text","text":" actions without wrapping the action in "},{"type":"codeVoice","code":".view(…)"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"it makes it so that you can only send "},{"type":"codeVoice","code":"view"},{"type":"text","text":" actions. For example, the view cannot send the"},{"type":"text","text":" "},{"type":"codeVoice","code":"loginResponse"},{"type":"text","text":" action:"}]},{"type":"codeListing","syntax":"swift","code":["viewStore.send(.loginResponse(false))","\/\/ 🛑 Type 'Feature.Action.View' has no member 'loginResponse'"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This pattern is still possible with version 1.7 of the library, but requires a few small changes."},{"type":"text","text":" "},{"type":"text","text":"First, you must make your "},{"type":"codeVoice","code":"View"},{"type":"text","text":" action enum conform to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"type":"text","text":" protocol:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  \/\/ ...","  enum Action: ViewAction {  \/\/ 👈","    \/\/ ...","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And second, you can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)"},{"type":"text","text":" macro on your view by specifying the reducer that"},{"type":"text","text":" "},{"type":"text","text":"powers the view. This gives you access to a "},{"type":"codeVoice","code":"send"},{"type":"text","text":" method in the view for sending view actions"},{"type":"text","text":" "},{"type":"text","text":"rather than going through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["+@ViewAction(for: Feature.self)"," struct FeatureView: View {","   let store: StoreOf<Feature>"," ","   var body: some View {","-    WithViewStore(","-      store, ","-      observe: { $0 }, ","-      send: Feature.Action.view","-    ) { viewStore in","       Button(\"Login\") { ","-        viewStore.send(.loginButtonTapped) ","+        send(.loginButtonTapped)","       }","     }","-  }"," }"]},{"anchor":"Observing-for-UIKit","level":2,"type":"heading","text":"Observing for UIKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prior to the observation tools one would typically subscribe to changes in the store via a Combine"},{"type":"text","text":" "},{"type":"text","text":"publisher in the entry point of a view, such as "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":" in a "},{"type":"codeVoice","code":"UIViewController"},{"type":"text","text":" subclass:"}]},{"type":"codeListing","syntax":"swift","code":["func viewDidLoad() {","  super.viewDidLoad()","","  store.publisher.count","    .sink { [weak self] in self?.countLabel.text = \"\\($0)\" }","    .store(in: &cancellables)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can now be done more simply using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)"},{"type":"text","text":" method defined on"},{"type":"text","text":" "},{"type":"text","text":"all "},{"type":"codeVoice","code":"NSObject"},{"type":"text","text":"s:"}]},{"type":"codeListing","syntax":"swift","code":["func viewDidLoad() {","  super.viewDidLoad()","","  observe { [weak self] in ","    guard let self ","    else { return }","","    self.countLabel.text = \"\\(self.store.count)\"","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Be sure to read the documentation for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)"},{"type":"text","text":" to learn how to best"},{"type":"text","text":" "},{"type":"text","text":"wield this tool."}]},{"anchor":"Incrementally-migrating","level":2,"type":"heading","text":"Incrementally migrating"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You are most likely going to want to incrementally migrate your application to the new observation tools,"},{"type":"text","text":" "},{"type":"text","text":"rather than doing everything all at once. That is possible, but there are some gotchas to be aware"},{"type":"text","text":" "},{"type":"text","text":"of when mixing “legacy” features ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"type":"text","text":" features using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":") with"},{"type":"text","text":" "},{"type":"text","text":"“modern” features ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"type":"text","text":" features using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most common problem one will encounter is that when legacy and modern features are mixed"},{"type":"text","text":" "},{"type":"text","text":"together, their view bodies can be re-computed more often than necessary. This is due to the"},{"type":"text","text":" "},{"type":"text","text":"mixed modes of observation. Legacy features use the "},{"type":"codeVoice","code":"objectWillChange"},{"type":"text","text":" publisher to synchronously"},{"type":"text","text":" "},{"type":"text","text":"invalidate the view, whereas modern features use"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/observation\/withobservationtracking(_:onchange:)"},{"type":"text","text":". These are two fundamentally different tools,"},{"type":"text","text":" "},{"type":"text","text":"and it can create a situation where views are invalidated multiple times separated by a thread hop,"},{"type":"text","text":" "},{"type":"text","text":"making it impossible to coalesce the validations into a single one. That is what causes the body"},{"type":"text","text":" "},{"type":"text","text":"to re-compute multiple times."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically a few extra body re-computations shouldn’t be a big deal, but they can put strain on"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s ability to figure out what state changed in a view, and can cause glitchiness and"},{"type":"text","text":" "},{"type":"text","text":"exacerbate navigation bugs. If you are noticing problems after converting one feature to use"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":", then we recommend trying to convert a few more features that it interacts"},{"type":"text","text":" "},{"type":"text","text":"with to see if the problems go away."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have also found that modern features that contain legacy features as child features tend to"},{"type":"text","text":" "},{"type":"text","text":"behave better than the opposite. For this reason we recommend updating your features to use"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" from the outside in. That is, start with the root feature, update it to"},{"type":"text","text":" "},{"type":"text","text":"use the new observation tools, and then work you way towards the leaf features."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.7"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":", and more."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Migrating to 1.7","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","title":"PresentationState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"role":"article","title":"Migrating to 1.5","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"role":"collectionGroup","title":"Migration guides","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migrationguides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"role":"symbol","title":"BindingViewState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingViewState"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of view state that can be directly"},{"type":"text","text":" "},{"type":"text","text":"bindable in SwiftUI views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingViewState"}],"url":"\/documentation\/composablearchitecture\/bindingviewstate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState":{"role":"symbol","title":"ObservableState","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObservableState"}],"url":"\/documentation\/composablearchitecture\/observablestate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-1nelp":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ElementID"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElementState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElementAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"IdentifiedArray","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ElementID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"IdentifiedAction","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ElementID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementAction"},{"kind":"text","text":">>) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"RandomAccessCollection","preciseIdentifier":"s:Sk"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ElementState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementAction"},{"kind":"text","text":">>\n"}],"abstract":[{"type":"text","text":"Scopes the store of an identified collection to a collection of stores."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-1nelp","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-1nelp"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction(for:)":{"role":"symbol","title":"ViewAction(for:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewAction"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":".Type)"}],"abstract":[{"type":"text","text":"Provides a view with access to a feature’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"type":"text","text":"s."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewaction(for:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"deprecated":true,"role":"symbol","title":"CaseLet","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CaseLet"}],"url":"\/documentation\/composablearchitecture\/caselet"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"role":"symbol","title":"Presents()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Wraps a property with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and observes it."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presents()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"deprecated":true,"role":"symbol","title":"IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Root"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(path:root:destination:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"path"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">>>, "},{"kind":"externalParam","text":"root"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Drives a navigation stack with a store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"role":"symbol","title":"BindingAction","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingAction"}],"abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"url":"\/documentation\/composablearchitecture\/bindingaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"role":"article","title":"Migrating to 1.8","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, including automatic"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.8"},"#BindingState":{"title":"@BindingState","titleInlineContent":[{"type":"text","text":"@BindingState"}],"type":"link","identifier":"#BindingState","url":"#BindingState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction":{"role":"symbol","title":"ViewAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewAction"}],"abstract":[{"type":"text","text":"Defines the actions that can be sent from a view."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewAction"}],"url":"\/documentation\/composablearchitecture\/viewaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"role":"article","title":"Observation backport","abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/observationbackport"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"role":"symbol","title":"BindingViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingViewStore"}],"abstract":[{"type":"text","text":"A property wrapper type that can derive "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState"},{"type":"text","text":" values for a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingViewStore"}],"url":"\/documentation\/composablearchitecture\/bindingviewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"role":"symbol","title":"BindingReducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingReducer"}],"abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"url":"\/documentation\/composablearchitecture\/bindingreducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"role":"symbol","title":"send(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"StoreTask","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV"}],"abstract":[{"type":"text","text":"Sends an action to the store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/send(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"role":"article","title":"Migrating to 1.4","abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4"},"#Replacing-NavigationStackStore-with-NavigationStack":{"title":"Replacing NavigationStackStore with NavigationStack","titleInlineContent":[{"type":"text","text":"Replacing NavigationStackStore with NavigationStack"}],"type":"link","identifier":"#Replacing-NavigationStackStore-with-NavigationStack","url":"#Replacing-NavigationStackStore-with-NavigationStack"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObjectiveC/NSObject/observe(_:)":{"role":"symbol","title":"observe(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"observe"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ObservationToken","preciseIdentifier":"c:@M@ComposableArchitecture@objc(cs)ObservationToken"}],"abstract":[{"type":"text","text":"Observe access to properties of a "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" or "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" object."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/objectivec\/nsobject\/observe(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/View/alert(_:)":{"role":"symbol","title":"alert(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"alert"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AlertState","preciseIdentifier":"s:21SwiftUINavigationCore10AlertStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">?>) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[{"type":"text","text":"Presents an alert when a piece of optional state held in a store becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/alert(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/view\/alert(_:)"},"https://developer.apple.com/documentation/observation/withobservationtracking(_:onchange:)":{"title":"withObservationTracking","titleInlineContent":[{"type":"codeVoice","code":"withObservationTracking"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/observation\/withobservationtracking(_:onchange:)","url":"https:\/\/developer.apple.com\/documentation\/observation\/withobservationtracking(_:onchange:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/View/confirmationDialog(store:)":{"role":"symbol","title":"confirmationDialog(store:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"confirmationDialog"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ButtonAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"store"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ConfirmationDialogState","preciseIdentifier":"s:21SwiftUINavigationCore23ConfirmationDialogStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ButtonAction"},{"kind":"text","text":">>, "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ButtonAction"},{"kind":"text","text":">>) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[{"type":"text","text":"Displays a dialog when then store’s state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", and dismisses it when it becomes"},{"type":"text","text":" "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/confirmationDialog(store:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/view\/confirmationdialog(store:)"},"#Replacing-ForEachStore-with-ForEach":{"title":"Replacing ForEachStore with ForEach","titleInlineContent":[{"type":"text","text":"Replacing ForEachStore with ForEach"}],"type":"link","identifier":"#Replacing-ForEachStore-with-ForEach","url":"#Replacing-ForEachStore-with-ForEach"},"#Observing-for-UIKit":{"title":"Observing for UIKit","titleInlineContent":[{"type":"text","text":"Observing for UIKit"}],"type":"link","identifier":"#Observing-for-UIKit","url":"#Observing-for-UIKit"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/subscript(dynamicMember:)-3q4xh":{"conformance":{"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ViewAction.State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ViewAction"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BindableAction"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"subscript(dynamicMember:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"BindingState","preciseIdentifier":"s:22ComposableArchitecture12BindingStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/subscript(dynamicMember:)-3q4xh","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/subscript(dynamicmember:)-3q4xh"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"deprecated":true,"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"deprecated":true,"role":"symbol","title":"SwitchStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"}],"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"url":"\/documentation\/composablearchitecture\/switchstore"},"#ViewStorebinding":{"title":"ViewStore.binding","titleInlineContent":[{"type":"text","text":"ViewStore.binding"}],"type":"link","identifier":"#ViewStorebinding","url":"#ViewStorebinding"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/View/alert(store:)":{"role":"symbol","title":"alert(store:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"alert"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ButtonAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"store"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AlertState","preciseIdentifier":"s:21SwiftUINavigationCore10AlertStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ButtonAction"},{"kind":"text","text":">>, "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ButtonAction"},{"kind":"text","text":">>) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[{"type":"text","text":"Displays an alert when then store’s state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", and dismisses it when it becomes"},{"type":"text","text":" "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/alert(store:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/view\/alert(store:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"role":"symbol","title":"ObservableState()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-36e72":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">?"}],"abstract":[{"type":"text","text":"Scopes the store to optional child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-36e72","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-36e72"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:file:line:)-dkei":{"role":"symbol","title":"receive(_:_:timeout:assert:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:s8DurationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Asserts an action was received matching a case path with a specific payload, and asserts"},{"type":"text","text":" "},{"type":"text","text":"how the state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:file:line:)-dkei","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:file:line:)-dkei"},"#Replacing-PresentationState-with-Presents":{"title":"Replacing @PresentationState with @Presents","titleInlineContent":[{"type":"text","text":"Replacing @PresentationState with @Presents"}],"type":"link","identifier":"#Replacing-PresentationState-with-Presents","url":"#Replacing-PresentationState-with-Presents"},"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case":{"title":"Replacing SwitchStore and CaseLet with ‘switch’ and ‘case’","titleInlineContent":[{"type":"text","text":"Replacing SwitchStore and CaseLet with ‘switch’ and ‘case’"}],"type":"link","identifier":"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case","url":"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"deprecated":true,"role":"symbol","title":"ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"role":"symbol","title":"NavigationStackStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationStackStore"}],"abstract":[{"type":"text","text":"A navigation stack that is driven by a store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Backwards-compatible-availability":{"abstract":[],"title":"Backwards compatible availability","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Backwards-compatible-availability","url":"\/documentation\/composablearchitecture\/treebasednavigation#Backwards-compatible-availability"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(get:send:)-65xes":{"role":"symbol","title":"binding(get:send:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"binding"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"get"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"send"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Derives a binding from the store that prevents direct writes to state and instead sends"},{"type":"text","text":" "},{"type":"text","text":"actions to the store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore\/binding(get:send:)-65xes"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"role":"article","title":"Migrating to 1.6","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:file:line:)-dkei"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method when you need to assert on the payload inside an action received."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.6"},"#View-actions":{"title":"View actions","titleInlineContent":[{"type":"text","text":"View actions"}],"type":"link","identifier":"#View-actions","url":"#View-actions"},"#Computed-view-state":{"title":"Computed view state","titleInlineContent":[{"type":"text","text":"Computed view state"}],"type":"link","identifier":"#Computed-view-state","url":"#Computed-view-state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"role":"symbol","title":"BindableAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"type":"text","text":" case that holds a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"url":"\/documentation\/composablearchitecture\/bindableaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"deprecated":true,"role":"symbol","title":"BindingState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingState"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"type":"text","text":"in SwiftUI views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingState"}],"url":"\/documentation\/composablearchitecture\/bindingstate"},"#Incrementally-migrating":{"title":"Incrementally migrating","titleInlineContent":[{"type":"text","text":"Incrementally migrating"}],"type":"link","identifier":"#Incrementally-migrating","url":"#Incrementally-migrating"},"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers":{"title":"Replacing navigation view modifiers with SwiftUI modifiers","titleInlineContent":[{"type":"text","text":"Replacing navigation view modifiers with SwiftUI modifiers"}],"type":"link","identifier":"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers","url":"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers"},"#Replacing-IfLetStore-with-if-let":{"title":"Replacing IfLetStore with ‘if let’","titleInlineContent":[{"type":"text","text":"Replacing IfLetStore with ‘if let’"}],"type":"link","identifier":"#Replacing-IfLetStore-with-if-let","url":"#Replacing-IfLetStore-with-if-let"},"#Using-ObservableState":{"title":"Using @ObservableState","titleInlineContent":[{"type":"text","text":"Using @ObservableState"}],"type":"link","identifier":"#Using-ObservableState","url":"#Using-ObservableState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"deprecated":true,"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"#Updating-alert-and-confirmationDialog":{"title":"Updating alert and confirmationDialog","titleInlineContent":[{"type":"text","text":"Updating alert and confirmationDialog"}],"type":"link","identifier":"#Updating-alert-and-confirmationDialog","url":"#Updating-alert-and-confirmationDialog"}}}