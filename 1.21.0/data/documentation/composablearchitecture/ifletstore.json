{"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"]}],"kind":"symbol","topicSections":[{"anchor":"Initializers","title":"Initializers","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:)-75n86","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:)-8jsjj","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:else:)-6gegl","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:else:)-8y77f"]},{"anchor":"Instance-Properties","title":"Instance Properties","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/body"]},{"anchor":"Default-Implementations","title":"Default Implementations","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/ifletstore"]}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use 'if let' with a store of observable state, instead. For more information, see the following article: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Replacing-IfLetStore-with-if-let]","type":"text"}]}],"seeAlsoSections":[{"anchor":"View-containers","title":"View containers","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"text":"Content","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the underlying state is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the "},{"type":"codeVoice","code":"then"},{"type":"text","text":" closure will be performed with a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"that holds onto non-optional state, and otherwise the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" closure will be performed."}]},{"type":"paragraph","inlineContent":[{"text":"This is useful for deciding between two views to show depending on an optional piece of state:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["IfLetStore(","  store.scope(state: \\.results, action: { .results($0) })",") {","  SearchResultsView(store: $0)","} else: {","  Text(\"Loading search results...\")","}"]}],"kind":"content"}],"metadata":{"externalID":"s:22ComposableArchitecture10IfLetStoreV","roleHeading":"Structure","symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"title":"IfLetStore","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"modules":[{"name":"ComposableArchitecture"}],"platforms":[],"role":"symbol"},"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","interfaceLanguage":"swift"},"abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:state:action:then:)":{"title":"init(_:state:action:then:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Initializes an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" view that computes content depending on if a store of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and state can further"},{"type":"text","text":" "},{"type":"text","text":"be extracted from the destination state, "},{"type":"emphasis","inlineContent":[{"text":"e.g.","type":"text"}]},{"type":"text","text":" it matches a particular case of an enum."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IfContent"},{"kind":"text","text":")"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:)","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:state:action:then:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}],"type":"topic","deprecated":true,"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","title":"WithViewStore","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:then:else:)-6gegl":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:else:)-6gegl","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:then:else:)-6gegl","deprecated":true,"role":"symbol","abstract":[{"type":"text","text":"Initializes an "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true},{"type":"text","text":" view that computes content depending on if a store of optional"},{"type":"text","text":" "},{"type":"text","text":"state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"title":"init(_:then:else:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElseContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IfContent"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"ElseContent"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:then:)-8jsjj":{"type":"topic","title":"init(_:then:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IfContent"},{"kind":"text","text":")"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:then:)-8jsjj","abstract":[{"text":"Initializes an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"text":" view that computes content depending on if a store of optional","type":"text"},{"text":" ","type":"text"},{"text":"state is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" or non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:)-8jsjj","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","title":"Store","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"url":"\/documentation\/composablearchitecture\/navigationstackstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationStackStore","kind":"identifier"}],"navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"type":"topic","title":"NavigationStackStore","abstract":[{"type":"text","text":"A navigation stack that is driven by a store."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/body":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/body","title":"body","deprecated":true,"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"}],"role":"symbol","type":"topic","abstract":[],"url":"\/documentation\/composablearchitecture\/ifletstore\/body"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:then:else:)-8y77f":{"abstract":[{"text":"Initializes an ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"text":" view that computes content depending on if a store of","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"text":" is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" or non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:else:)-8y77f","role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElseContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IfContent"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"ElseContent"},{"kind":"text","text":")"}],"title":"init(_:then:else:)","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:then:else:)-8y77f","deprecated":true,"kind":"symbol"},"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"url":"\/documentation\/composablearchitecture\/caselet","kind":"symbol","type":"topic","title":"CaseLet","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CaseLet","kind":"identifier"}],"role":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","abstract":[{"text":"A view that handles a specific case of enum state in a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true,"type":"reference"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CaseLet","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:state:action:then:else:)":{"title":"init(_:state:action:then:else:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Initializes an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" view that computes content depending on if a store of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and state can further"},{"type":"text","text":" "},{"type":"text","text":"be extracted from the destination state, "},{"type":"emphasis","inlineContent":[{"text":"e.g.","type":"text"}]},{"type":"text","text":" it matches a particular case of an enum."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElseContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IfContent"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"ElseContent"},{"kind":"text","text":")"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:else:)","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:state:action:then:else:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SwitchStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","title":"SwitchStore","kind":"symbol","abstract":[{"text":"A view that observes when enum state held in a store changes cases, and provides stores to","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","isActive":true},{"text":" views.","type":"text"}],"navigatorTitle":[{"text":"SwitchStore","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/switchstore","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:then:)-75n86":{"title":"init(_:then:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IfContent"},{"kind":"text","text":")"}],"kind":"symbol","deprecated":true,"abstract":[{"text":"Initializes an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"text":" view that computes content depending on if a store of","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" or non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:then:)-75n86","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:)-75n86","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP","title":"SwiftUICore.View","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"url":"\/documentation\/composablearchitecture\/presentationaction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","title":"PresentationAction","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","title":"IfLetStore","role":"symbol","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/View-Implementations":{"abstract":[],"url":"\/documentation\/composablearchitecture\/ifletstore\/view-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations","title":"View Implementations","type":"topic","role":"collectionGroup","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"type":"topic","url":"\/documentation\/composablearchitecture\/navigationlinkstore","abstract":[{"type":"text","text":"A view that controls a navigation presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","title":"NavigationLinkStore","navigatorTitle":[{"text":"NavigationLinkStore","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationLinkStore","kind":"identifier"}],"role":"symbol","kind":"symbol","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"kind":"article","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","title":"PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","deprecated":true,"title":"ForEachStore","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"role":"collectionGroup","type":"topic","title":"Deprecations","kind":"article","url":"\/documentation\/composablearchitecture\/swiftuideprecations","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"title":"ViewStore","role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"ViewStore","type":"codeVoice"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"url":"\/documentation\/composablearchitecture\/viewstore","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"deprecated":true,"type":"topic","kind":"symbol"}}}