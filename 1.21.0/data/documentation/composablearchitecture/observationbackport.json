{"kind":"article","seeAlsoSections":[{"generated":true,"title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"anchor":"Integrations"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs","type":"text"},{"text":" ","type":"text"},{"text":"observation tools, ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"text":" we have backported those tools to work in iOS 13 and later. Using the","type":"text"},{"text":" ","type":"text"},{"text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be","type":"text"},{"text":" ","type":"text"},{"text":"aware of.","type":"text"}],"type":"paragraph"},{"anchor":"The-Perception-framework","type":"heading","text":"The Perception framework","level":2},{"inlineContent":[{"text":"The Composable Architecture comes with a framework known as Perception, which is our backport of","type":"text"},{"text":" ","type":"text"},{"text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the","type":"text"},{"text":" ","type":"text"},{"text":"Observation framework there is a corresponding tool in Perception.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, instead of the "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" macro, there is the "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" macro:"}],"type":"paragraph"},{"type":"codeListing","code":["@Perceptible","class CounterModel {","  var count = 0","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must"},{"type":"text","text":" "},{"type":"text","text":"remember to wrap the contents of your view in the "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" view:"}],"type":"paragraph"},{"type":"codeListing","code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"This will make sure that the view subscribes to any fields accessed in the ","type":"text"},{"type":"codeVoice","code":"@Perceptible"},{"text":" model so","type":"text"},{"text":" ","type":"text"},{"text":"that changes to those fields invalidate the view and cause it to re-render.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If a field of a ","type":"text"},{"code":"@Perceptible","type":"codeVoice"},{"text":" model is accessed in a view while ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" inside","type":"text"},{"text":" ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":", then a runtime warning will be triggered:","type":"text"}],"type":"paragraph"},{"style":"note","type":"aside","name":"üü£ Runtime Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Perceptible state was accessed but is not being tracked. Track changes to"},{"type":"text","text":" "},{"type":"text","text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view."}]}]},{"inlineContent":[{"type":"text","text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack"},{"type":"text","text":" "},{"type":"text","text":"frames displayed to find the line in your view where you are accessing state without being inside"},{"type":"text","text":" "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Bindings","type":"heading","text":"Bindings","level":2},{"inlineContent":[{"type":"text","text":"If you want to derive bindings from the store (see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},{"type":"text","text":" for more information), then you"},{"type":"text","text":" "},{"type":"text","text":"would typically use the "},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" property wrapper that comes with SwiftUI:"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"text":"However, ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" is iOS 17+. So, the Perception library comes with a tool that can be used in","type":"text"},{"text":" ","type":"text"},{"text":"its place until you can target iOS 17 and later. You just have to qualify ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" with the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Perception"},{"text":" namespace:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"syntax":"swift"},{"anchor":"Gotchas","type":"heading","text":"Gotchas","level":2},{"inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Lazy-view-closures","type":"heading","text":"Lazy view closures","level":3},{"inlineContent":[{"text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and","type":"text"},{"text":" ","type":"text"},{"text":"not necessarily in the same stack frames as the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" of the view. For example, the trailing","type":"text"},{"text":" ","type":"text"},{"text":"closure of ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" is called ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"text":" the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" of the view has been computed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This means that even if you wrap the body of the view in ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"‚Ä¶the access to the row‚Äôs ","type":"text"},{"type":"codeVoice","code":"store.title"},{"text":" happens ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"outside","type":"text"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":", and hence will","type":"text"},{"text":" ","type":"text"},{"text":"not work and will trigger a runtime warning as described above.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The fix for this is to wrap the content of the trailing closure in another "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"],"syntax":"swift"},{"anchor":"Mixing-legacy-and-modern-features-together","type":"heading","text":"Mixing legacy and modern features together","level":3},{"inlineContent":[{"type":"text","text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", and features built in the ‚Äúmodern‚Äù style, using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro. The problems mostly manifest themselves as re-computing view bodies"},{"type":"text","text":" "},{"type":"text","text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what"},{"text":" ","type":"text"},{"text":"state changed, and can cause glitches or exacerbate navigation bugs.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating"},{"type":"text","text":" for more information about this."}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/observationbackport"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"sections":[],"metadata":{"roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"title":"Observation backport","role":"article"},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"kind":"article","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"abstract":[],"kind":"section","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","title":"Incrementally migrating","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","title":"Store","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"title":"ViewStore","role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"ViewStore","type":"codeVoice"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"url":"\/documentation\/composablearchitecture\/viewstore","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"deprecated":true,"type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}],"type":"topic","deprecated":true,"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","title":"WithViewStore","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"type":"topic","url":"\/documentation\/composablearchitecture\/swiftconcurrency","title":"Adopting Swift concurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}],"role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","type":"topic","url":"\/documentation\/composablearchitecture\/uikit","title":"UIKit Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"kind":"article","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/bindings","abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}],"title":"Working with SwiftUI bindings","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"title":"ObservableState()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","url":"\/documentation\/composablearchitecture\/observablestate()","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}]}}}