{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/viewactionsending\/storeaction"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending\/StoreAction"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"StoreAction","kind":"identifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","text":"ViewAction","preciseIdentifier":"s:22ComposableArchitecture10ViewActionP","kind":"typeIdentifier"}]}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending"]]},"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"symbol","title":"StoreAction","required":true,"externalID":"s:22ComposableArchitecture17ViewActionSendingP05StoreD0Qa","symbolKind":"associatedtype","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"StoreAction","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10ViewActionP","kind":"typeIdentifier","text":"ViewAction"}],"roleHeading":"Associated Type"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"url":"\/documentation\/composablearchitecture\/reducer\/action","title":"Action","abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference"},{"type":"text","text":" of the reducer to change"},{"text":" ","type":"text"},{"type":"text","text":"and\/or kick off a side "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" that can communicate with the outside world."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"Action","kind":"identifier"}],"type":"topic","required":true,"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Effect","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","url":"\/documentation\/composablearchitecture\/store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","title":"Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction":{"kind":"symbol","abstract":[{"type":"text","text":"Defines the actions that can be sent from a view."}],"title":"ViewAction","type":"topic","url":"\/documentation\/composablearchitecture\/viewaction","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ViewAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","navigatorTitle":[{"kind":"identifier","text":"ViewAction"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"url":"\/documentation\/composablearchitecture\/reducer\/state","title":"State","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"State","kind":"identifier"}],"type":"topic","required":true,"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewActionSending":{"kind":"symbol","abstract":[{"type":"text","text":"A type that represents a view with a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" that can send ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"text":"s.","type":"text"}],"title":"ViewActionSending","type":"topic","url":"\/documentation\/composablearchitecture\/viewactionsending","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ViewActionSending","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending","navigatorTitle":[{"text":"ViewActionSending","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewActionSending/StoreAction":{"title":"StoreAction","type":"topic","abstract":[],"kind":"symbol","required":true,"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending\/StoreAction","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"StoreAction","kind":"identifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction","preciseIdentifier":"s:22ComposableArchitecture10ViewActionP"}],"url":"\/documentation\/composablearchitecture\/viewactionsending\/storeaction"}}}