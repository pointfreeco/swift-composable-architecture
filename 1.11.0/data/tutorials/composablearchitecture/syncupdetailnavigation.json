{"variants":[{"paths":["\/tutorials\/composablearchitecture\/syncupdetailnavigation"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Navigating to a sync-up detail","chapter":"Navigating to sync-up detail","estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}]}]},{"kind":"tasks","tasks":[{"anchor":"Creating-the-app-feature","title":"Creating the app feature","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s create a new feature to hold the "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":"."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"SyncUpDetailNavigation-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called App.swift and paste in the basic scaffolding of a new"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture feature."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You may already have an App.swift in your project that holds the entry point of"},{"type":"text","text":" "},{"type":"text","text":"the application (i.e. "},{"type":"codeVoice","code":"@main"},{"type":"text","text":"). If so, you can name this file AppFeature.swift, or you can"},{"type":"text","text":" "},{"type":"text","text":"rename the entry point to Main.swift."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This feature’s primary responsibility will be to integrate all the features that can be"},{"type":"text","text":" "},{"type":"text","text":"presented in the navigation stack. Currently that is only the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, which"},{"type":"text","text":" "},{"type":"text","text":"is always at the root of the stack, and the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature. Soon there will be more"},{"type":"text","text":" "},{"type":"text","text":"features that can be presented in the stack, such as the record meeting feature and the past"},{"type":"text","text":" "},{"type":"text","text":"meeting feature."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sync-ups list feature is a little different from all of those other features, though."},{"type":"text","text":" "},{"type":"text","text":"It is at the root of the stack, and it can not be dismissed. For that reason it is composed"},{"type":"text","text":" "},{"type":"text","text":"into the "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" by simply holding onto its state and actions, and using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" reducer to compose it into "},{"type":"codeVoice","code":"App"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"body"},{"type":"text","text":"."}]},{"code":"SyncUpDetailNavigation-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"AppReducer"},{"type":"text","text":" by holding onto its state and"},{"type":"text","text":" "},{"type":"text","text":"actions, and using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" reducer to compose the two"},{"type":"text","text":" "},{"type":"text","text":"reducers together."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to integrate the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"AppReducer"},{"type":"text","text":". The library comes"},{"type":"text","text":" "},{"type":"text","text":"with specific tools to do this for navigation stacks. It starts by using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":", which is a collection type provided by the library"},{"type":"text","text":" "},{"type":"text","text":"specifically tuned for dealing with navigation stacks."}]},{"code":"SyncUpDetailNavigation-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the state of "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" in "},{"type":"codeVoice","code":"App"},{"type":"text","text":" by holding onto"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":". We like to call this variable "},{"type":"codeVoice","code":"path"},{"type":"text","text":" since it mimics"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"NavigationStack(path:)"},{"type":"text","text":" API in SwiftUI."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this is not quite right. We don’t want to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"only"}]},{"type":"text","text":" show the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" in the"},{"type":"text","text":" "},{"type":"text","text":"navigation stack. Soon we will have a "},{"type":"codeVoice","code":"RecordMeeting"},{"type":"text","text":" feature, and a "},{"type":"codeVoice","code":"Meeting"},{"type":"text","text":" feature,"},{"type":"text","text":" "},{"type":"text","text":"and in the future there may be more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this reason it is best to do some upfront work to model a feature that can handle any"},{"type":"text","text":" "},{"type":"text","text":"number of features on the stack. This works much like the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer we created"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp"},{"type":"text","text":"."}]},{"code":"SyncUpDetailNavigation-01-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer inside "},{"type":"codeVoice","code":"App"},{"type":"text","text":". Like the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer we defined for the"},{"type":"text","text":" "},{"type":"text","text":"sync-up detail screen, "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" type will be an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enum"}]},{"type":"text","text":" so that it can compose all of the"},{"type":"text","text":" "},{"type":"text","text":"screens you can navigate to into a single reducer."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"SyncUpDetailNavigation-01-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case to the path for the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature. In the future more cases will be"},{"type":"text","text":" "},{"type":"text","text":"added to this enum for each kind of feature that can be pushed onto the stack."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to create a single reducer that encapsulates all of the logic and behavior"},{"type":"text","text":" "},{"type":"text","text":"of each screen in the navigation stack. In the future as we add more screens to the stack"},{"type":"text","text":" "},{"type":"text","text":"we will just add more cases to this reducer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we will integrate the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"App"},{"type":"text","text":" reducer."}]},{"code":"SyncUpDetailNavigation-01-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the "},{"type":"codeVoice","code":"path"},{"type":"text","text":" variable to hold onto "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" of"},{"type":"text","text":" "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"SyncUpDetailNavigation-01-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":"’s actions into "},{"type":"codeVoice","code":"App"},{"type":"text","text":" by adding a case to its "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum, and using"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":". We can use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf"},{"type":"text","text":" type alias to specify a single generic of the path"},{"type":"text","text":" "},{"type":"text","text":"reducer."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Right now we don’t need to perform any logic in the "},{"type":"codeVoice","code":".path"},{"type":"text","text":" action so we can return"},{"type":"text","text":" "},{"type":"codeVoice","code":".none"},{"type":"text","text":" in it."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" is a type that represents the most"},{"type":"text","text":" "},{"type":"text","text":"fundamental things that can happen in a stack: an element in the stack can send an action"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)"},{"type":"text","text":"), or it can push an element"},{"type":"text","text":" "},{"type":"text","text":"onto the stack ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)"},{"type":"text","text":"), or it can"},{"type":"text","text":" "},{"type":"text","text":"pop an element from the stack ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"type":"text","text":")."}]},{"code":"SyncUpDetailNavigation-01-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"App"},{"type":"text","text":" reducer by using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)"},{"type":"text","text":" operator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"operator takes care of processing an incoming "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":", routing"},{"type":"text","text":" "},{"type":"text","text":"it to the current reducer in the stack, and automatically cancelling effects when a feature"},{"type":"text","text":" "},{"type":"text","text":"is popped from the stack."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to create the "},{"type":"codeVoice","code":"App"},{"type":"text","text":" reducer and integrate the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" into the"},{"type":"text","text":" "},{"type":"text","text":"stack. Next We will create the view layer."}]}]},{"anchor":"Creating-the-app-view","title":"Creating the app view","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s create the view that holds onto the "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":"."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"SyncUpDetailNavigation-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" struct to conform to the "},{"type":"codeVoice","code":"View"},{"type":"text","text":" protocol in SwiftUI."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"SyncUpDetailNavigation-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"type":"codeVoice","code":"store"},{"type":"text","text":" property to the view. We are going to be proactive and make the property"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" because we will need to derive a binding to it for the "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"SyncUpDetailNavigation-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view by constructing a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":", but we will be using"},{"type":"text","text":" "},{"type":"text","text":"special initializer that comes with the library:"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:line:)"},{"type":"text","text":". This initializer takes"},{"type":"text","text":" "},{"type":"text","text":"a binding to a store focused on the stack domain, as well as two trailing closures. The"},{"type":"text","text":" "},{"type":"text","text":"first for the root view that is always present, and the second for the destinations that"},{"type":"text","text":" "},{"type":"text","text":"can be  pushed onto the stack."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"SyncUpDetailNavigation-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For the root view we can construct the "},{"type":"codeVoice","code":"SyncUpsListView"},{"type":"text","text":" by using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" on the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" to isolate"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" domain."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"SyncUpDetailNavigation-02-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" trailing closure is handed a "},{"type":"codeVoice","code":"store"},{"type":"text","text":" focused on the path’s state, which"},{"type":"text","text":" "},{"type":"text","text":"is an enum. Because we are using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro on a "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" enum we get access"},{"type":"text","text":" "},{"type":"text","text":"to a special super power of enum reducers. We can switch on "},{"type":"codeVoice","code":"store.case"},{"type":"text","text":" to destructure"},{"type":"text","text":" "},{"type":"text","text":"a child store for each case of the enum."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers#Destination-and-path-reducers"},{"type":"text","text":" for more information on this tool."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"SyncUpDetailNavigation-02-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For each case in the enum we will destructure the store and construct the corresponding"},{"type":"text","text":" "},{"type":"text","text":"destination view by handing the store to the view."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"SyncUpDetailNavigation-02-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a preview to the bottom of the file."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to build the root "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" that holds onto a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":". But"},{"type":"text","text":" "},{"type":"text","text":"currently we do not have any buttons to actually navigate to the detail screen from the list"},{"type":"text","text":" "},{"type":"text","text":"screen."}]}]},{"anchor":"Navigating-to-the-detail","title":"Navigating to the detail","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To navigate to the detail screen from the list screen we need to append some"},{"type":"text","text":" "},{"type":"codeVoice","code":"SyncUpDetail.State"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"path"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"App"},{"type":"text","text":" feature. The easiest way to do this is with"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", which will automatically append some state to the path when tapped."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"SyncUpDetailNavigation-03-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to the SyncUpsList.swift file where the "},{"type":"codeVoice","code":"SyncUpListView"},{"type":"text","text":" is defined. In that view we"},{"type":"text","text":" "},{"type":"text","text":"currently have a "},{"type":"codeVoice","code":"Button"},{"type":"text","text":" in the list. Let’s now replace it with a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", but"},{"type":"text","text":" "},{"type":"text","text":"using the special initializer that comes with this library:"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:line:)"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This special initializer takes a piece of state that matches the type that is held in the"},{"type":"text","text":" "},{"type":"text","text":"root feature’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":". In our case, that is "},{"type":"codeVoice","code":"App.Path.State"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is an enum of all the possible destinations that can be navigated to."}]},{"code":"SyncUpDetailNavigation-03-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide "},{"type":"codeVoice","code":"Path.State.detail"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" to indicate that we want to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the detail feature."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, to construct "},{"type":"codeVoice","code":"SyncUpDetail.State"},{"type":"text","text":" we need to provide a "},{"type":"codeVoice","code":"Shared<SyncUp>"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"This needs to be derived from the shared sync-ups held in "},{"type":"codeVoice","code":"SyncUpsList.State"},{"type":"text","text":" so that the"},{"type":"text","text":" "},{"type":"text","text":"detail feature can be allowed to make edits to the state have those edits be automatically"},{"type":"text","text":" "},{"type":"text","text":"made to "},{"type":"codeVoice","code":"SyncUpsList.State"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can use the projected value of "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" along with the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements"},{"type":"text","text":" property defined on shared collections in order to"},{"type":"text","text":" "},{"type":"text","text":"derive a "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" value for each element in the collection."}]},{"code":"SyncUpDetailNavigation-03-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements"},{"type":"text","text":" property in the "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" to derive a"},{"type":"text","text":" "},{"type":"codeVoice","code":"Shared<SyncUp>"},{"type":"text","text":" for each element in the "},{"type":"codeVoice","code":"Shared<IdentifiedArrayOf<SyncUp>>"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"SyncUpDetailNavigation-03-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pass the projected value "},{"type":"codeVoice","code":"$syncUp"},{"type":"text","text":" to "},{"type":"codeVoice","code":"SyncUpDetail.State"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to perform a navigation from the list feature to the detail feature."},{"type":"text","text":" "},{"type":"text","text":"When the navigation link is tapped, SwiftUI will search up the view hierarchy to find the"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" powering the view, find its "},{"type":"codeVoice","code":"path"},{"type":"text","text":" binding, and append the new "},{"type":"codeVoice","code":".detail"},{"type":"text","text":" "},{"type":"text","text":"state to the path, thus triggering a drill-down animation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the easiest way to navigate to one screen to another, but it does have some drawbacks."},{"type":"text","text":" "},{"type":"text","text":"Because we need to reference all of "},{"type":"codeVoice","code":"App.State.Path"},{"type":"text","text":" to construct a navigation link, it can"},{"type":"text","text":" "},{"type":"text","text":"make modularization difficult. Every navigation link will need access to every feature’s"},{"type":"text","text":" "},{"type":"text","text":"state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An alternative is to use a plain "},{"type":"codeVoice","code":"Button"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", and send an action"},{"type":"text","text":" "},{"type":"text","text":"from that button. Then the parent "},{"type":"codeVoice","code":"App"},{"type":"text","text":" feature can intercept that action and manually append"},{"type":"text","text":" "},{"type":"text","text":"state to its "},{"type":"codeVoice","code":"path"},{"type":"text","text":". This fully decouples the features from one another, and only the "},{"type":"codeVoice","code":"App"},{"type":"text","text":" "},{"type":"text","text":"feature needs to have knowledge about all of the child features."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We will not do that refactor now, but it would be instructive for the reader to try it"},{"type":"text","text":" "},{"type":"text","text":"themselves."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before moving on let’s make sure that the deletion and editing logic that we implemented in"},{"type":"text","text":" "},{"type":"text","text":"the detail screens properly works now that we can navigate to the detail screen from the"},{"type":"text","text":" "},{"type":"text","text":"sync-ups list screen."}]},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to the detail screen of a sync-up and delete it to confirm that it works as"},{"type":"text","text":" "},{"type":"text","text":"expected."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"SyncUpDetailNavigation-03-video-0005.mov"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to the detail screen of a sync-up, edit it, and then navigate back to the list"},{"type":"text","text":" "},{"type":"text","text":"screen to verify that changes were made. Also relaunch the app to confirm that the data"},{"type":"text","text":" "},{"type":"text","text":"was persisted to disk."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"SyncUpDetailNavigation-03-video-0006.mov"}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Navigating to a meeting","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Navigating to a sync-up detail","categoryPathComponent":"BuildingSyncUps","role":"project","category":"Building SyncUps"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail"]]},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"role":"project","title":"Testing the sync-up detail","estimatedTime":"10min","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail"},"SyncUpDetailNavigation-01-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  @ObservableState","  struct State: Equatable {","  }","  enum Action {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-01-code-0001.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"role":"project","title":"Presenting the sync-up form","estimatedTime":"10min","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/presentingsyncupform"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"role":"project","title":"Lists of sync-ups","estimatedTime":"10min","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/listsofsyncups"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/fileStorage(_:)":{"role":"symbol","title":"fileStorage(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fileStorage"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"URL","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Creates a persistence key that can read and write to a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value to the file system."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/filestorage(_:)"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"role":"article","title":"What is SyncUps?","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/what-is-syncups-"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"role":"project","title":"Adding a meeting timer","estimatedTime":"25min","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/implementingtimer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"role":"pseudoSymbol","title":"Integrating the feature views together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"SyncUpDetailNavigation-03-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.$syncUps.elements) { $syncUp in","        NavigationLink(","          state: App.Path.State.detail(SyncUpDetail.State(syncUp: <#Shared<SyncUp>#>))","        ) {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","                store.send(.discardButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","                store.send(.confirmAddButtonTapped)","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"fileName":"SyncUpsList.swift","identifier":"SyncUpDetailNavigation-03-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":14}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"role":"pseudoSymbol","title":"Navigating to the record meeting feature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"role":"article","title":"Lists of sync-ups","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"role":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/composablearchitecture\/scope"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/elements":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"MutableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value.Index"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Value.Index"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"elements","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"elements"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"RandomAccessCollection","preciseIdentifier":"s:Sk"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Shared","preciseIdentifier":"s:22ComposableArchitecture6SharedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">>"}],"abstract":[{"type":"text","text":"Allows a "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" view to transform a shared collection into shared elements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/elements"},"SyncUpDetailNavigation-01-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  @Reducer","  enum Path {","    case detail(SyncUpDetail)","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<Path.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-01-code-0006.swift","type":"file","fileType":"swift","highlights":[]},"SyncUpDetailNavigation-03-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.$syncUps.elements) { $syncUp in","        NavigationLink(","          state: App.Path.State.detail(SyncUpDetail.State(syncUp: $syncUp))","        ) {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","                store.send(.discardButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","                store.send(.confirmAddButtonTapped)","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"fileName":"SyncUpsList.swift","identifier":"SyncUpDetailNavigation-03-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":16}]},"SyncUpDetailNavigation-02-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<App>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      SyncUpsListView(","        store: store.scope(state: \\.syncUpsList, action: \\.syncUpsList)","      )","    } destination: { store in","      switch store.case {","      case let .detail(detailStore):","        SyncUpDetailView(store: detailStore)","      }","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-02-code-0006.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:)":{"role":"symbol","title":"forEach(_:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">\n"}],"abstract":[{"type":"text","text":"A special overload of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)-yz3v"},{"type":"text","text":" for enum"},{"type":"text","text":" "},{"type":"text","text":"reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"role":"pseudoSymbol","title":"Ending the meeting early","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"role":"pseudoSymbol","title":"Deleting the sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"role":"project","title":"Navigating to a sync-up detail","estimatedTime":"20min","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"role":"pseudoSymbol","title":"Testing the timer","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"role":"project","title":"Persisting sync-ups","estimatedTime":"5min","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/persistingsyncups"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/popFrom(id:)":{"role":"symbol","title":"StackAction.popFrom(id:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"popFrom"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An action sent to dismiss the associated stack element at a given identifier."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackaction\/popfrom(id:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"role":"pseudoSymbol","title":"Creating the app feature","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"role":"pseudoSymbol","title":"Sync-up form basics","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationLink/init(state:label:fileID:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Label"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(state:label:fileID:line:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"L"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"label"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"L"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a navigation link that presents the view corresponding to an element of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/navigationlink\/init(state:label:fileid:line:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"role":"project","title":"Navigating to a meeting","estimatedTime":"5min","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/meetingnavigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:line:)-yz3v":{"role":"symbol","title":"forEach(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_StackReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in"},{"type":"text","text":" "},{"type":"text","text":"parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)-yz3v","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:line:)-yz3v"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"role":"pseudoSymbol","title":"SyncUpsList feature","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"role":"pseudoSymbol","title":"Create the SyncUps project","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"role":"pseudoSymbol","title":"Deleting a sync-up","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Root"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(path:root:destination:fileID:line:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"path"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">>>, "},{"kind":"externalParam","text":"root"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Drives a navigation stack with a store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:line:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"role":"project","title":"What is SyncUps?","estimatedTime":"5min","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/whatissyncups"},"SyncUpDetailNavigation-02-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<App>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      SyncUpsListView(","        store: store.scope(state: \\.syncUpsList, action: \\.syncUpsList)","      )","    } destination: { store in","      switch store.case {","      case let .detail(detailStore):","        ","      }","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-02-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"role":"project","title":"Testing the add sync-up flow","estimatedTime":"10min","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"role":"pseudoSymbol","title":"Create the sync-up detail","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"role":"project","title":"Editing and deleting a sync-up","estimatedTime":"30min","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"role":"project","title":"Adding a speech recognizer","estimatedTime":"10min","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"role":"symbol","title":"Shared","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Shared"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"url":"\/documentation\/composablearchitecture\/shared"},"SyncUpDetailNavigation-02-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  \/\/ ...","}","","struct AppView: View {","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-02-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"role":"pseudoSymbol","title":"Editing the sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up"},"SyncUpDetailNavigation-01-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  @Reducer","  enum Path {","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<SyncUpDetail.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-01-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"role":"article","title":"New sync-up form","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/new-sync-up-form"},"SyncUpDetailNavigation-03-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.syncUps) { syncUp in","        NavigationLink(","          state: ","        ) {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","                store.send(.discardButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","                store.send(.confirmAddButtonTapped)","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"fileName":"SyncUpsList.swift","identifier":"SyncUpDetailNavigation-03-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":17}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"role":"article","title":"Navigating to sync-up detail","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail"},"SyncUpDetailNavigation-01-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  @Reducer","  enum Path {","    case detail(SyncUpDetail)","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<SyncUpDetail.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-01-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":8}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"role":"project","title":"The RecordMeeting feature","estimatedTime":"5min","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature"},"SyncUpDetailNavigation-01-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  @ObservableState","  struct State: Equatable {","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-01-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":11},{"line":14},{"line":15},{"line":16},{"line":19},{"line":20}]},"SyncUpDetailNavigation-02-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<App>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      SyncUpsListView(","        store: store.scope(state: \\.syncUpsList, action: \\.syncUpsList)","      )","    } destination: { store in","      ","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-02-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"role":"pseudoSymbol","title":"Asking for speech recognition permission","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"role":"pseudoSymbol","title":"Navigating to the detail","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"role":"article","title":"Record meeting","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/record-meeting"},"SyncUpDetailNavigation-01-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  @ObservableState","  struct State: Equatable {","    var path = StackState<SyncUpDetail.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-01-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":8}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducers#Destination-and-path-reducers":{"abstract":[],"title":"Destination and path reducers","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers#Destination-and-path-reducers","url":"\/documentation\/composablearchitecture\/reducers#Destination-and-path-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackActionOf":{"role":"symbol","title":"StackActionOf","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackActionOf"}],"abstract":[{"type":"text","text":"A convenience type alias for referring to a stack action of a given reducer’s domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackActionOf"}],"url":"\/documentation\/composablearchitecture\/stackactionof"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"role":"pseudoSymbol","title":"Navigate to a meeting","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"role":"pseudoSymbol","title":"Adding a new sync-up to the list","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/push(id:state:)":{"role":"symbol","title":"StackAction.push(id:state:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An action sent to present the given state at a given identifier in a navigation stack. This"},{"type":"text","text":" "},{"type":"text","text":"action is typically sent from the view via the "},{"type":"codeVoice","code":"NavigationLink(value:)"},{"type":"text","text":" initializer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackaction\/push(id:state:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"role":"pseudoSymbol","title":"Creating the app view","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view"},"SyncUpDetailNavigation-01-code-0008.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  @Reducer","  enum Path {","    case detail(SyncUpDetail)","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<Path.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case path(StackActionOf<Path>)","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .path:","        return .none","      case .syncUpsList:","        return .none","      }","    }","    .forEach(\\.path, action: \\.path)","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-01-code-0008.swift","type":"file","fileType":"swift","highlights":[{"line":31}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"role":"pseudoSymbol","title":"The meeting screen","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"role":"pseudoSymbol","title":"Integrating the feature domains together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"role":"pseudoSymbol","title":"Testing the edit flow","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"role":"project","title":"Testing navigation","estimatedTime":"10min","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingnavigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"role":"pseudoSymbol","title":"Writing your first test","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"role":"pseudoSymbol","title":"Adding attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"role":"pseudoSymbol","title":"Domain models","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"role":"project","title":"Sync-up form","estimatedTime":"15min","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupform"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"role":"project","title":"Testing the sync-up form","estimatedTime":"10min","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupform"},"SyncUpDetailNavigation-03-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.syncUps) { syncUp in","        NavigationLink(","          state: App.Path.State.detail(SyncUpDetail.State(syncUp: <#Shared<SyncUp>#>))","        ) {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","                store.send(.discardButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","                store.send(.confirmAddButtonTapped)","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"fileName":"SyncUpsList.swift","identifier":"SyncUpDetailNavigation-03-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":16}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"role":"pseudoSymbol","title":"Controlling dependencies early","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"role":"article","title":"Persisting sync-ups to disk","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"role":"pseudoSymbol","title":"Form focus: an approach","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"role":"pseudoSymbol","title":"Adding a sync-up","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"role":"article","title":"Sync-up detail","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/sync-up-detail"},"SyncUpDetailNavigation-02-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<App>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","","    } destination: { store in","      ","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-02-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}]},"SyncUpDetailNavigation-01-code-0007.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  @Reducer","  enum Path {","    case detail(SyncUpDetail)","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<Path.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case path(StackActionOf<Path>)","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .path:","        return .none","      case .syncUpsList:","        return .none","      }","    }","  }","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-01-code-0007.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":25},{"line":26}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"role":"pseudoSymbol","title":"A handy debugging tool","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"role":"pseudoSymbol","title":"Form focus: a better approach","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"role":"project","title":"Sync-up detail","estimatedTime":"5min","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupdetail"},"SyncUpDetailNavigation-03-video-0005.mov":{"poster":null,"alt":null,"type":"video","identifier":"SyncUpDetailNavigation-03-video-0005.mov","variants":[{"url":"\/videos\/SyncUpDetailNavigation-03-video-0005.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"role":"project","title":"Testing the list of sync-ups","estimatedTime":"5min","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"role":"symbol","title":"StackAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"url":"\/documentation\/composablearchitecture\/stackaction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"role":"pseudoSymbol","title":"Testing persistence","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"role":"pseudoSymbol","title":"Removing attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"role":"pseudoSymbol","title":"Create a new feature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"role":"article","title":"Presenting the sync-up form","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/element(id:action:)":{"role":"symbol","title":"StackAction.element(id:action:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"element"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An action sent to the associated stack element at a given identifier."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/stackaction\/element(id:action:)"},"SyncUpDetailNavigation-02-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct App {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<App>","}"],"fileName":"App.swift","identifier":"SyncUpDetailNavigation-02-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":10}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"role":"pseudoSymbol","title":"A tour of SyncUps","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"role":"overview","title":"Building SyncUps","abstract":[{"type":"text","text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,"},{"type":"text","text":" "},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"type":"text","text":"domain modeling, controlling dependencies, and testability."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","kind":"overview","type":"topic","url":"\/tutorials\/buildingsyncups"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"role":"symbol","title":"StackState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackState"}],"abstract":[{"type":"text","text":"A list of data representing the content of a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackState"}],"url":"\/documentation\/composablearchitecture\/stackstate"},"SyncUpDetailNavigation-03-video-0006.mov":{"poster":null,"alt":null,"type":"video","identifier":"SyncUpDetailNavigation-03-video-0006.mov","variants":[{"url":"\/videos\/SyncUpDetailNavigation-03-video-0006.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"role":"pseudoSymbol","title":"More concise domain modeling","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"role":"pseudoSymbol","title":"A basic timer","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"role":"pseudoSymbol","title":"Persisting data to disk","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk"}}}