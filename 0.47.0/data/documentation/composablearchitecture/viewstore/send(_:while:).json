{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"action","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An action."}]}]},{"name":"predicate","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate on "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" that determines for how long this method should"},{"type":"text","text":" "},{"type":"text","text":"suspend."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method can be used to interact with async\/await code, allowing you to suspend while work"},{"type":"text","text":" "},{"type":"text","text":"is being performed in an effect. One common example of this is using SwiftUI’s "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" "},{"type":"text","text":"method, which shows a loading indicator on the screen while work is being performed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose we wanted to load some data from the network when a pull-to-refresh"},{"type":"text","text":" "},{"type":"text","text":"gesture is performed on a list. The domain and logic for this feature can be modeled like so:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State: Equatable {","    var isLoading = false","    var response: String?","  }","  enum Action {","    case pulledToRefresh","    case receivedResponse(TaskResult<String>)","  }","  @Dependency(\\.fetch) var fetch","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .pulledToRefresh:","      state.isLoading = true","      return .task {","        await .receivedResponse(TaskResult { try await self.fetch() })","      }","","    case let .receivedResponse(result):","      state.isLoading = false","      state.response = try? result.value","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we keep track of an "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" boolean in our state so that we know exactly when"},{"type":"text","text":" "},{"type":"text","text":"the network response is being performed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The view can show the fact in a "},{"type":"codeVoice","code":"List"},{"type":"text","text":", if it’s present, and we can use the "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" "},{"type":"text","text":"view modifier to enhance the list with pull-to-refresh capabilities:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  let store: Store<State, Action>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      List {","        if let response = viewStore.response {","          Text(response)","        }","      }","      .refreshable {","        await viewStore.send(.pulledToRefresh, while: \\.isLoading)","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we’ve used the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)"},{"type":"text","text":" method to suspend while the "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" state is"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":". Once that piece of state flips back to "},{"type":"codeVoice","code":"false"},{"type":"text","text":" the method will resume, signaling to"},{"type":"text","text":" "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" that the work has finished which will cause the loading indicator to disappear."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"title":"send(_:while:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:22ComposableArchitecture9ViewStoreC4send_5whileyq__SbxctYaF","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"seeAlsoSections":[{"title":"Sending actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStoreTask"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStoreTask":{"role":"symbol","title":"ViewStoreTask","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStoreTask"}],"abstract":[{"type":"text","text":"The type returned from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)"},{"type":"text","text":" that represents the lifecycle of the effect"},{"type":"text","text":" "},{"type":"text","text":"started from sending an action."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStoreTask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStoreTask"}],"url":"\/documentation\/composablearchitecture\/viewstoretask"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:while:)":{"role":"symbol","title":"send(_:while:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:)":{"role":"symbol","title":"send(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewStoreTask","preciseIdentifier":"s:22ComposableArchitecture13ViewStoreTaskV"}],"abstract":[{"type":"text","text":"Sends an action to the store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/send(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/yield(while:)":{"role":"symbol","title":"yield(while:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Suspends the current task while a predicate on state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/yield(while:)"}}}