{"seeAlsoSections":[{"title":"View Containers","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"title":"IfLetStore","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:22ComposableArchitecture10IfLetStoreV","modules":[{"name":"ComposableArchitecture"}],"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}]},"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/7SwiftUI4ViewP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:else:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/body"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations"],"generated":true}],"variants":[{"paths":["\/documentation\/composablearchitecture\/ifletstore"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Content"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the underlying state is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the "},{"type":"codeVoice","code":"then"},{"type":"text","text":" closure will be performed with a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"type":"text","text":"that holds onto non-optional state, and otherwise the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" closure will be performed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is useful for deciding between two views to show depending on an optional piece of state:"}]},{"type":"codeListing","syntax":"swift","code":["IfLetStore(","  store.scope(state: \\SearchState.results, action: SearchAction.results),",") {","  SearchResultsView(store: $0)","} else: {","  Text(\"Loading search results...\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And for showing a sheet when a piece of state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(","  isPresented: viewStore.binding(","    get: \\.isGameActive,","    send: { $0 ? .startButtonTapped : .detailDismissed }","  )",") {","  IfLetStore(","    self.store.scope(state: \\.detail, action: AppAction.detail)","  ) {","    DetailView(store: $0)","  }","}"]}]}],"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"role":"symbol","title":"SwitchStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"}],"abstract":[{"type":"text","text":"A view that can switch over a store of enum state and handle each case."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"url":"\/documentation\/composablearchitecture\/switchstore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:then:else:)":{"role":"symbol","title":"init(_:then:else:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElseContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV5Statexmfp"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV6Actionq_mfp"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV5Statexmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV6Actionq_mfp"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IfContent","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV_4then4elseACyxq_7SwiftUI19_ConditionalContentVyqd__qd_0_GGAA0E0CyxSgq_G_qd__ALyxq_Gcqd_0_yctcAIRs0_AF4ViewRd__AfPRd_0_r0_lufc0cK0L_qd__mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"else"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"ElseContent","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV_4then4elseACyxq_7SwiftUI19_ConditionalContentVyqd__qd_0_GGAA0E0CyxSgq_G_qd__ALyxq_Gcqd_0_yctcAIRs0_AF4ViewRd__AfPRd_0_r0_lufc04ElseK0L_qd_0_mfp"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" view that computes content depending on if a store of optional"},{"type":"text","text":" "},{"type":"text","text":"state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:else:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:then:else:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","title":"IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI":{"role":"collectionGroup","title":"SwiftUI Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/body":{"role":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/body","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/body"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/View-Implementations":{"role":"collectionGroup","title":"View Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/view-implementations"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:then:)":{"role":"symbol","title":"init(_:then:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV5Statexmfp"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV6Actionq_mfp"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV5Statexmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV6Actionq_mfp"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"IfContent","preciseIdentifier":"s:22ComposableArchitecture10IfLetStoreV_4thenACyxq_qd__SgGAA0E0CyxSgq_G_qd__AHyxq_GctcAERs0_7SwiftUI4ViewRd__lufc0C7ContentL_qd__mfp"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" view that computes content depending on if a store of optional"},{"type":"text","text":" "},{"type":"text","text":"state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:then:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:then:)"},"doc://co.pointfree.ComposableArchitecture/7SwiftUI4ViewP":{"type":"unresolvable","title":"SwiftUI.View","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/7SwiftUI4ViewP"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"role":"symbol","title":"ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore"}}}