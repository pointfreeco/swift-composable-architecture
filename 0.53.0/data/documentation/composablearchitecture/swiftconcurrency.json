{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"type":"text","text":" "},{"type":"text","text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored"},{"type":"text","text":" "},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"type":"text","text":" "},{"type":"text","text":"you will need to know how to prove to the compiler that your types are safe to use concurrently."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There primary way to create an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":" in the library is via"},{"type":"text","text":" "},{"type":"codeVoice","code":"EffectPublisher\/run(priority:operation:catch:file:fileID:line:)"},{"type":"text","text":". It takes a "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"asynchronous closure, which restricts the types of closures you can use for your effects. In"},{"type":"text","text":" "},{"type":"text","text":"particular, the closure can only capture "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" variables that are bound with "},{"type":"codeVoice","code":"let"},{"type":"text","text":". Mutable"},{"type":"text","text":" "},{"type":"text","text":"variables and non-"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" types are simply not allowed to be passed to "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two primary ways you will run into this restriction when building a feature in the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from"},{"type":"text","text":" "},{"type":"text","text":"within an effect."}]},{"anchor":"Accessing-state-in-an-effect","level":3,"type":"heading","text":"Accessing state in an effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reducers are executed with a mutable, "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" state variable, and such variables cannot be accessed"},{"type":"text","text":" "},{"type":"text","text":"from within "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .buttonTapped:","      return .run { send in","        try await Task.sleep(for: .seconds(1))","        await send(.delayed(state.count))","        \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","        \/\/    not allowed in concurrently-executing code","      }","","      \/\/ ...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To work around this you must explicitly capture the state as an immutable value for the scope of the"},{"type":"text","text":" "},{"type":"text","text":"closure:"}]},{"type":"codeListing","syntax":"swift","code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also capture just the minimal parts of the state you need for the effect by binding a new"},{"type":"text","text":" "},{"type":"text","text":"variable name for the capture:"}]},{"type":"codeListing","syntax":"swift","code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  return .delayed(count) \/\/ ✅","}"]},{"anchor":"Accessing-dependencies-in-an-effect","level":3,"type":"heading","text":"Accessing dependencies in an effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"type":"text","text":" "},{"type":"text","text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous and concurrent contexts, and so must be "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your dependency is not sendable, you will be notified at the time of registering it with the"},{"type":"text","text":" "},{"type":"text","text":"library. In particular, when extending "},{"type":"codeVoice","code":"DependencyValues"},{"type":"text","text":" to provide the computed property:"}]},{"type":"codeListing","syntax":"swift","code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", for whatever reason, you will get a warning in the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" lines:"}]},{"type":"codeListing","syntax":null,"code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix this you need to make each dependency "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":". This usually just means making sure"},{"type":"text","text":" "},{"type":"text","text":"that the interface type only holds onto "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" data, and in particular, any closure-based"},{"type":"text","text":" "},{"type":"text","text":"endpoints should be annotated as "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will restrict the kinds of closures that can be used when constructing "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" values, thus"},{"type":"text","text":" "},{"type":"text","text":"making the entire "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" sendable itself."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Adopting Swift concurrency","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"seeAlsoSections":[{"title":"Upgrade guides","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingToTheReducerProtocol":{"role":"article","title":"Migrating to the reducer protocol","abstract":[{"type":"text","text":"Learn how to migrate existing applications to use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":", in both Swift 5.7 and"},{"type":"text","text":" "},{"type":"text","text":"Swift 5.6."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingtothereducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"role":"symbol","title":"EffectTask","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectTask"}],"abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectTask"}],"url":"\/documentation\/composablearchitecture\/effecttask"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"role":"symbol","title":"ReducerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerProtocol"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerProtocol"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"}}}