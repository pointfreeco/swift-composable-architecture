{"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb"],"generated":true,"anchor":"Stack-based-navigation","title":"Stack-based navigation"}],"metadata":{"role":"article","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article","title":"Stack-based navigation"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/stackbasednavigation"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"Stack-based navigation is the process of modeling navigation using collections of state. This style","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of navigation allows you to deep-link into any state of your application by simply constructing a"},{"type":"text","text":" "},{"type":"text","text":"flat collection of data, handing it off to SwiftUI, and letting it take care of the rest."},{"text":" ","type":"text"},{"text":"It also allows for complex and recursive navigation paths in your application.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"#Basics","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Pushing-features-onto-the-stack"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Integration","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#Dismissal","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Testing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#StackState-vs-NavigationPath","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#UIKit","type":"reference"}]}]}]},{"level":2,"text":"Basics","anchor":"Basics","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The tools for this style of navigation include ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"text":" and the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb"},{"type":"text","text":" operator, as well as a new"},{"type":"text","text":" "},{"type":"text","text":"initializer "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","type":"reference"},{"text":" on","type":"text"},{"type":"text","text":" "},{"code":"NavigationStack","type":"codeVoice"},{"text":" that behaves like the normal initializer, but is tuned specifically for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the Composable Architecture."}]},{"type":"paragraph","inlineContent":[{"text":"The process of integrating features into a navigation stack largely consists of 2 steps:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"integrating the features’ domains together, and constructing a "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"store describing all the views in the stack. One typically starts by integrating the features’"},{"type":"text","text":" "},{"type":"text","text":"domains together. This consists of defining a new reducer, typically called "},{"code":"Path","type":"codeVoice"},{"type":"text","text":", that holds the"},{"text":" ","type":"text"},{"type":"text","text":"domains of all the features that can be pushed onto the stack:"}]},{"type":"codeListing","code":["@Reducer","struct RootFeature {","  \/\/ ...","","  @Reducer","  enum Path {","    case addItem(AddFeature)","    case detailItem(DetailFeature)","    case editItem(EditFeature)","  }","}"],"syntax":"swift"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Path","type":"codeVoice"},{"text":" reducer is identical to the ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer that one creates for"},{"type":"text","text":" "},{"type":"text","text":"tree-based navigation when using enums. See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state"},{"type":"text","text":" for more"},{"type":"text","text":" "},{"type":"text","text":"information."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"text":"Once the ","type":"text"},{"code":"Path","type":"codeVoice"},{"text":" reducer is defined we can then hold onto ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference","isActive":true},{"text":" in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature that manages the navigation stack:"}]},{"code":["@Reducer","struct RootFeature {","  @ObservableState","  struct State {","    var path = StackState<Path.State>()","    \/\/ ...","  }","  enum Action {","    case path(StackActionOf<Path>)","    \/\/ ...","  }","}"],"type":"codeListing","syntax":"swift"},{"content":[{"inlineContent":[{"type":"text","text":""},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true,"type":"reference"},{"text":" is generic over both state and action of the ","type":"text"},{"type":"codeVoice","code":"Path"},{"type":"text","text":" domain, and so you can"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf"},{"type":"text","text":" typealias to simplify the syntax a bit. This is different from"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"type":"text","text":", which only has a single generic of "},{"type":"codeVoice","code":"Action"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","name":"Tip","style":"tip"},{"inlineContent":[{"text":"And then we must make use of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","isActive":true},{"text":" method to integrate the domains of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all the features that can be navigated to with the domain of the parent feature:"}],"type":"paragraph"},{"code":["@Reducer","struct RootFeature {","  \/\/ ...","","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      \/\/ Core logic for root feature","    }","    .forEach(\\.path, action: \\.path)","  }","}"],"type":"codeListing","syntax":"swift"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You do not need to specify "},{"code":"Path()","type":"codeVoice"},{"type":"text","text":" in a trailing closure of "},{"code":"forEach","type":"codeVoice"},{"text":" because it can be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"automatically inferred from "},{"type":"codeVoice","code":"@Reducer enum Path"},{"type":"text","text":"."}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"text":"That completes the steps to integrate the child and parent features together for a navigation stack.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Next we must integrate the child and parent views together. This is done by a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" using a special initializer that comes with this library, called"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","isActive":true,"type":"reference"},{"text":". This initializer takes 3","type":"text"},{"type":"text","text":" "},{"type":"text","text":"arguments: a binding of a store focused in on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true,"type":"reference"},{"type":"text","text":" in your domain, a"},{"type":"text","text":" "},{"type":"text","text":"trailing view builder for the root view of the stack, and another trailing view builder for all of"},{"type":"text","text":" "},{"type":"text","text":"the views that can be pushed onto the stack:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["NavigationStack(","  path: \/\/ Store focused on StackState and StackAction",") {","  \/\/ Root view of the navigation stack","} destination: { store in","  \/\/ A view for each case of the Path.State enum","}"]},{"type":"paragraph","inlineContent":[{"text":"To fill in the first argument you only need to scope a binding of your store to the ","type":"text"},{"code":"path","type":"codeVoice"},{"type":"text","text":" state and"},{"type":"text","text":" "},{"type":"codeVoice","code":"path"},{"type":"text","text":" action you already hold in the root feature:"}]},{"type":"codeListing","code":["struct RootView: View {","  @Bindable var store: StoreOf<RootFeature>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      \/\/ Root view of the navigation stack","    } destination: { store in","      \/\/ A view for each case of the Path.State enum","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"The root view can be anything you want, and would typically have some ","type":"text"},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":"s or other"},{"type":"text","text":" "},{"type":"text","text":"buttons that push new data onto the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" held in your domain."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And the last trailing closure is provided a store of "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" domain, and you can use the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case"},{"text":" computed property to destructure each case of the ","type":"text"},{"type":"codeVoice","code":"Path"},{"type":"text","text":" to obtain a store focused"},{"text":" ","type":"text"},{"text":"on just that case:","type":"text"}],"type":"paragraph"},{"code":["} destination: { store in","  switch store.case {","  case .addItem(let store):","  case .detailItem(let store):","  case .editItem(let store):","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This will give you compile-time guarantees that you have handled each case of the "},{"code":"Path.State","type":"codeVoice"},{"text":" enum,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which can be nice for when you add new types of destinations to the stack."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In each of these cases you can return any kind of view that you want, but ultimately you want to"},{"text":" ","type":"text"},{"text":"scope the store down to a specific case of the ","type":"text"},{"code":"Path.State","type":"codeVoice"},{"type":"text","text":" enum:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["} destination: { store in","  switch store.case {","  case .addItem(let store):","    AddView(store: store)","  case .detailItem(let store):","    DetailView(store: store)","  case .editItem(let store):","    EditView(store: store)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that is all it takes to integrate multiple child features together into a navigation stack,"},{"text":" ","type":"text"},{"type":"text","text":"and done so with concisely modeled domains. Once those steps are taken you can easily add"},{"text":" ","type":"text"},{"type":"text","text":"additional features to the stack by adding a new case to the "},{"code":"Path","type":"codeVoice"},{"text":" reducer state and action enums,","type":"text"},{"type":"text","text":" "},{"text":"and you get complete introspection into what is happening in each child feature from the parent.","type":"text"},{"text":" ","type":"text"},{"text":"Continue reading into ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration"},{"text":" for more information on that.","type":"text"}]},{"level":2,"type":"heading","anchor":"Pushing-features-onto-the-stack","text":"Pushing features onto the stack"},{"type":"paragraph","inlineContent":[{"text":"There are two primary ways to push features onto the stack once you have their domains integrated","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" in the view, as described above. The simplest way is to use the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","isActive":true,"type":"reference"},{"type":"text","text":" initializer on"},{"type":"text","text":" "},{"code":"NavigationLink","type":"codeVoice"},{"type":"text","text":", which requires you to specify the state of the feature you want to push onto the"},{"type":"text","text":" "},{"text":"stack. You must specify the full state, going all the way back to the ","type":"text"},{"code":"Path","type":"codeVoice"},{"type":"text","text":" reducer’s state:"}]},{"type":"codeListing","code":["Form {","  NavigationLink(","    state: RootFeature.Path.State.detail(DetailFeature.State())","  ) {","    Text(\"Detail\")","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the link is tapped a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)","type":"reference","isActive":true},{"text":" action will be sent, causing the ","type":"text"},{"type":"codeVoice","code":"path"},{"text":" ","type":"text"},{"type":"text","text":"collection to be mutated and appending the "},{"type":"codeVoice","code":".detail"},{"text":" state to the stack.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This is by far the simplest way to navigate to a screen, but it also has its drawbacks. In"},{"type":"text","text":" "},{"text":"particular, it makes modularity difficult since the view that holds onto the ","type":"text"},{"code":"NavigationLink","type":"codeVoice"},{"type":"text","text":" must"},{"text":" ","type":"text"},{"type":"text","text":"have access to the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" type, which means it needs to build all of the "},{"code":"Path","type":"codeVoice"},{"type":"text","text":" reducer,"},{"text":" ","type":"text"},{"text":"including ","type":"text"},{"inlineContent":[{"text":"every","type":"text"}],"type":"emphasis"},{"text":" feature that can be navigated to.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This hurts modularity because it is no longer possible to build each feature that can be presented"},{"type":"text","text":" "},{"type":"text","text":"in the stack individually, in full isolation. You must build them all together. Technically you can"},{"type":"text","text":" "},{"type":"text","text":"move all features’ "},{"code":"State","type":"codeVoice"},{"type":"text","text":" types (and only the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" types) to a separate module, and then"},{"type":"text","text":" "},{"type":"text","text":"features can depend on only that module without needing to build every feature’s reducer."}]},{"inlineContent":[{"type":"text","text":"Another alternative is to forgo "},{"code":"NavigationLink","type":"codeVoice"},{"type":"text","text":" entirely and just use "},{"type":"codeVoice","code":"Button"},{"text":" that sends an action","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the child feature’s domain:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Form {","  Button(\"Detail\") {","    store.send(.detailButtonTapped)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then the root feature can listen for that action and append to the "},{"code":"path","type":"codeVoice"},{"text":" with new state in order","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to drive navigation:"}]},{"syntax":"swift","code":["case .path(.element(id: _, action: .list(.detailButtonTapped))):","  state.path.append(.detail(DetailFeature.State()))","  return .none"],"type":"codeListing"},{"type":"heading","level":2,"text":"Integration","anchor":"Integration"},{"inlineContent":[{"text":"Once your features are integrated together using the steps above, your parent feature gets instant","type":"text"},{"text":" ","type":"text"},{"text":"access to everything happening inside the navigation stack. You can use this as a means to integrate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the logic of the stack element features with the parent feature. For example, if you want to detect"},{"type":"text","text":" "},{"text":"when the “Save” button inside the edit feature is tapped, you can simply destructure on that action.","type":"text"},{"text":" ","type":"text"},{"text":"This consists of pattern matching on the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference"},{"type":"text","text":", then the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)"},{"type":"text","text":" action, then the feature you are interested in, and finally the"},{"type":"text","text":" "},{"type":"text","text":"action you are interested in:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  \/\/ ..."]},{"type":"paragraph","inlineContent":[{"text":"Once inside that case you can then try extracting out the feature state so that you can perform","type":"text"},{"type":"text","text":" "},{"type":"text","text":"additional logic, such as popping the “edit” feature and saving the edited item to the database:"}]},{"type":"codeListing","code":["case let .path(.element(id: id, action: .editItem(.saveButtonTapped))):","  guard let editItemState = state.path[id: id]?.editItem","  else { return .none }","","  state.path.pop(from: id)","  return .run { _ in","    await self.database.save(editItemState.item)","  }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that when destructuring the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","isActive":true},{"text":" action we get access to not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only the action that happened in the child domain, but also the ID of the element in the stack."},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"type":"text","text":" automatically manages IDs for every feature added to the stack, which can be used"},{"text":" ","type":"text"},{"text":"to look up specific elements in the stack using","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:fileID:filePath:line:column:)","type":"reference"},{"text":" and pop elements from the stack using","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"text":"Dismissal","type":"heading","level":2,"anchor":"Dismissal"},{"inlineContent":[{"text":"Dismissing a feature in a stack is as simple as mutating the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference"},{"type":"text","text":" using one of its"},{"text":" ","type":"text"},{"text":"methods, such as ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()"},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","type":"reference","isActive":true},{"type":"text","text":" and more:"}],"type":"paragraph"},{"type":"codeListing","code":["case .closeButtonTapped:","  state.popLast()","  return .none"],"syntax":"swift"},{"inlineContent":[{"text":"However, in order to do this you must have access to that stack state, and usually only the parent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"has access. But often we would like to encapsulate the logic of dismissing a feature to be inside"},{"text":" ","type":"text"},{"type":"text","text":"the child feature without needing explicit communication with the parent."}],"type":"paragraph"},{"inlineContent":[{"text":"SwiftUI provides a wonderful tool for allowing child ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"views"}]},{"type":"text","text":" to dismiss themselves from the parent,"},{"text":" ","type":"text"},{"text":"all without any explicit communication with the parent. It’s an environment value called ","type":"text"},{"code":"dismiss","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and it can be used like so:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked, SwiftUI finds the closest parent view that is presented in the"},{"text":" ","type":"text"},{"type":"text","text":"navigation stack, and removes that state from the collection powering the stack. This can be"},{"type":"text","text":" "},{"type":"text","text":"incredibly useful, but it is also relegated to the view layer. It is not possible to use"},{"type":"text","text":" "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" elsewhere, like in an observable object, which would allow you to have nuanced logic"},{"type":"text","text":" "},{"text":"for dismissal such as validation or async work.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,"},{"type":"text","text":" "},{"text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dependency management system (see "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"reference","isActive":true},{"type":"text","text":") using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .closeButtonTapped:","        return .run { _ in await self.dismiss() }","      \/\/ ...","      }","    }","  }","}"]},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"text":" function is async which means it cannot be invoked directly inside a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"reducer. Instead it must be called from"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked it will remove the corresponding value from the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"powering the navigation stack. It does this by sending a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"type":"text","text":" action back"},{"type":"text","text":" "},{"text":"into the system, causing the feature state to be removed. This allows you to encapsulate the logic","type":"text"},{"type":"text","text":" "},{"text":"for dismissing a child feature entirely inside the child domain without explicitly communicating","type":"text"},{"type":"text","text":" "},{"text":"with the parent.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because dismissal is handled by sending an action, it is not valid to ever send an action"},{"type":"text","text":" "},{"type":"text","text":"after invoking "},{"type":"codeVoice","code":"dismiss()"},{"text":":","type":"text"}]},{"code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To do so would be to send an action for a feature while its state is not present in the stack,"},{"type":"text","text":" "},{"text":"and that will cause a runtime warning in Xcode and a test failure when running tests.","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"text":"SwiftUI’s environment value ","type":"text"},{"type":"codeVoice","code":"@Environment(\\.dismiss)"},{"text":" and the Composable Architecture’s","type":"text"},{"type":"text","text":" "},{"text":"dependency value ","type":"text"},{"type":"codeVoice","code":"@Dependency(\\.dismiss)"},{"text":" serve similar purposes, but are completely different","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s"},{"type":"text","text":" "},{"type":"text","text":"dependency value can only be used inside reducers."}]}],"type":"aside"},{"level":2,"type":"heading","text":"Testing","anchor":"Testing"},{"type":"paragraph","inlineContent":[{"text":"A huge benefit of using the tools of this library to model navigation stacks is that testing becomes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"quite easy. Further, using “non-exhaustive testing” (see "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing","type":"reference"},{"text":") can","type":"text"},{"type":"text","text":" "},{"text":"be very useful for testing navigation since you often only want to assert on a few high level","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"details and not all state mutations and effects."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, consider the following simple counter feature that wants to dismiss itself if its"},{"type":"text","text":" "},{"type":"text","text":"count is greater than or equal to 5:"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct CounterFeature {","  @ObservableState","  struct State: Equatable {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return state.count >= 5","          ? .run { _ in await self.dismiss() }","          : .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"And then let’s embed that feature into a parent feature:","type":"text"}]},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State: Equatable {","    var path = StackState<Path.State>()","  }","  enum Action {","    case path(StackActionOf<Path>)","  }","","  @Reducer  ","  struct Path {","    enum State: Equatable { case counter(Counter.State) }","    enum Action { case counter(Counter.Action) }","    var body: some ReducerOf<Self> {","      Scope(state: \\.counter, action: \\.counter) { Counter() }","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .forEach(\\.path, action: \\.path) { Path() }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s try to write a test on the "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer that proves that when the child counter"},{"text":" ","type":"text"},{"type":"text","text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" for "},{"type":"codeVoice","code":"Feature"},{"text":" that starts in a state with a single counter already on the stack:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Then we can send the ","type":"text"},{"code":".incrementButtonTapped","type":"codeVoice"},{"text":" action in the counter child feature inside the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"stack in order to confirm that the count goes up by one, but in order to do so we need to provide"},{"text":" ","type":"text"},{"type":"text","text":"an ID:"}]},{"syntax":"swift","code":["await store.send(\\.path[id: ???].counter.incrementButtonTapped) {","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" automatically manages IDs"},{"type":"text","text":" "},{"type":"text","text":"for each feature and those IDs are mostly opaque to the outside. However, specifically in tests"},{"text":" ","type":"text"},{"type":"text","text":"those IDs are integers and generational, which means the ID starts at 0 and then for each feature"},{"type":"text","text":" "},{"text":"pushed onto the stack the global ID increments by one.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This means that when the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"type":"text","text":" were constructed with a single element already in the stack"},{"text":" ","type":"text"},{"type":"text","text":"that it was given an ID of 0, and so that is the ID we can use when sending an action:"}],"type":"paragraph"},{"code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Next we want to assert how the counter feature in the stack changes when the action is sent. To","type":"text"},{"type":"text","text":" "},{"text":"do this we must go through multiple layers: first subscript through the ID, then unwrap the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"optional value returned from that subscript, then pattern match on the case of the "},{"type":"codeVoice","code":"Path.State"},{"text":" ","type":"text"},{"text":"enum, and then perform the mutation.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The library provides two different tools to perform all of these steps in a single step. You can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"XCTModify"},{"text":" helper:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  XCTModify(&$0.path[id: 0], case: \\.counter) {","    $0.count = 4","  }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"XCTModify","type":"codeVoice"},{"type":"text","text":" function takes an "},{"type":"codeVoice","code":"inout"},{"text":" piece of enum state as its first argument and a case","type":"text"},{"type":"text","text":" "},{"type":"text","text":"path for its second argument, and then uses the case path to extract the payload in that case,"},{"text":" ","type":"text"},{"type":"text","text":"allow you to perform a mutation to it, and embed the data back into the enum. So, in the code"},{"type":"text","text":" "},{"text":"above we are subscripting into ID 0, isolating the ","type":"text"},{"type":"codeVoice","code":".counter"},{"text":" case of the ","type":"text"},{"code":"Path.State","type":"codeVoice"},{"type":"text","text":" enum,"},{"text":" ","type":"text"},{"text":"and mutating the ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" to be 4 since it incremented by one. Further, if the case of ","type":"text"},{"type":"codeVoice","code":"$0.path[id: 0]"},{"text":" ","type":"text"},{"type":"text","text":"didn’t match the case path, then a test failure would be emitted."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Another option is to use "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","isActive":true,"type":"reference"},{"text":" to simultaneously subscript into an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ID on the stack "},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"type":"text","text":" a case of the path enum:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  $0.path[id: 0, case: \\.counter]?.count = 4","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"XCTModify","type":"codeVoice"},{"type":"text","text":" style is best when you have many things you need to modify on the state, and the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","isActive":true},{"type":"text","text":" style is best when you have simple mutations."}]},{"inlineContent":[{"type":"text","text":"Continuing with the test, we can send it one more time to see that the count goes up to 5:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await store.send(\\.path[id: 0].counter.incrementButtonTapped) {","  XCTModify(&$0.path[id: 0], case: \\.counter) {","    $0.count = 5","  }","}"]},{"inlineContent":[{"text":"And then we finally expect that the child dismisses itself, which manifests itself as the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","isActive":true,"type":"reference"},{"text":" action being sent to pop the counter feature off the stack, which we","type":"text"},{"text":" ","type":"text"},{"text":"can assert using the ","type":"text"},{"code":"TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["await store.receive(\\.path.popFrom) {","  $0.path[id: 0] = nil","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you need to assert that a specific child action is received, you can construct a case key path"},{"type":"text","text":" "},{"type":"text","text":"for a specific child element action by subscripting on the "},{"type":"codeVoice","code":"\\.path"},{"type":"text","text":" case with the element ID."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, if the child feature performed an effect that sent an "},{"type":"codeVoice","code":".response"},{"type":"text","text":" action, you"},{"type":"text","text":" "},{"text":"can test that it is received:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["await store.receive(\\.path[id: 0].counter.response) {","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"This shows how we can write very nuanced tests on how parent and child features interact with each"},{"text":" ","type":"text"},{"type":"text","text":"other in a navigation stack."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, the more complex the features become, the more cumbersome testing their integration can be."},{"type":"text","text":" "},{"type":"text","text":"By default, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" requires us to be exhaustive in our assertions. We must assert on how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"text":" ","type":"text"},{"text":"sure that all effects finish by the end of the test (see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA"},{"text":" for more info).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"But ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":" also supports a form of testing known as “non-exhaustive testing” that allows you","type":"text"},{"type":"text","text":" "},{"text":"to assert on only the parts of the features that you actually care about (see","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing","isActive":true},{"type":"text","text":" for more info)."}]},{"inlineContent":[{"type":"text","text":"For example, if we turn off exhaustivity on the test store (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"text":") then we","type":"text"},{"text":" ","type":"text"},{"text":"can assert at a high level that when the increment button is tapped twice that eventually we receive","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)"},{"text":" action:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      path: StackState([","        CounterFeature.State(count: 3)","      ])","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(\\.path[id: 0].counter.incrementButtonTapped)","  await store.send(\\.path[id: 0].counter.incrementButtonTapped)","  await store.receive(\\.path.popFrom)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer"},{"text":" ","type":"text"},{"text":"lines and is more resilient to future changes in the features that we don’t necessarily care about.","type":"text"}]},{"anchor":"StackState-vs-NavigationPath","type":"heading","level":2,"text":"StackState vs NavigationPath"},{"inlineContent":[{"type":"text","text":"SwiftUI comes with a powerful type for modeling data in navigation stacks called"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath"},{"text":", and so you might wonder why we created our own data type,","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":", instead of leveraging "},{"type":"codeVoice","code":"NavigationPath"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"NavigationPath","type":"codeVoice"},{"text":" data type is a type-erased list of data that is tuned specifically for","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationStack"},{"text":"s. It allows you to maximally decouple features in the stack since you can add any","type":"text"},{"type":"text","text":" "},{"type":"text","text":"kind of data to a path, as long as it is "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","code":["var path = NavigationPath()","path.append(1)","path.append(\"Hello\")","path.append(false)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And SwiftUI interprets that data by describing what view should be pushed onto the stack"},{"type":"text","text":" "},{"type":"text","text":"corresponding to a type of data:"}]},{"syntax":"swift","type":"codeListing","code":["struct RootView: View {","  @State var path = NavigationPath()","","  var body: some View {","    NavigationStack(path: self.$path) {","      Form {","        \/\/ ...","      }","      .navigationDestination(for: Int.self) { integer in ","        \/\/ ...","      }","      .navigationDestination(for: String.self) { string in ","        \/\/ ...","      }","      .navigationDestination(for: Bool.self) { bool in ","        \/\/ ...","      }","    }","  }","}"]},{"inlineContent":[{"text":"This can be powerful, but it does come with some downsides. Because the underlying data is","type":"text"},{"text":" ","type":"text"},{"text":"type-erased, SwiftUI has decided to not expose much API on the data type. For example, the only","type":"text"},{"text":" ","type":"text"},{"text":"things you can do with a path are append data to the end of it, as seen above, or remove data","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the end of it:"}],"type":"paragraph"},{"code":["path.removeLast()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or count the elements in the path:"}]},{"type":"codeListing","syntax":"swift","code":["path.count"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that is all. You can’t insert or remove elements from anywhere but the end, and you can’t even"},{"text":" ","type":"text"},{"text":"iterate over the path:","type":"text"}]},{"code":["let path: NavigationPath = …","for element in path {  \/\/ 🛑","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can make it very difficult to analyze what is on the stack and aggregate data across the"},{"text":" ","type":"text"},{"text":"entire stack.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture’s ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" serves a similar purpose as "},{"type":"codeVoice","code":"NavigationPath"},{"type":"text","text":", but"},{"text":" ","type":"text"},{"type":"text","text":"with different trade offs:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" is fully statically typed, and so you cannot add just "},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"text":" kind of data to it.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"But, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" conforms to the "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" protocol (as well as "},{"type":"codeVoice","code":"RandomAccessCollection"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":"), which gives you access to a lot of methods for manipulating the","type":"text"},{"type":"text","text":" "},{"text":"collection and introspecting what is inside the stack.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Your feature’s data does not need to be ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" to put it in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":". The data type","type":"text"},{"text":" ","type":"text"},{"text":"manages stable identifiers for your features under the hood, and automatically derives a hash","type":"text"},{"type":"text","text":" "},{"text":"value from those identifiers.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We feel that "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"type":"text","text":" offers a nice balance between full runtime flexibility and static,"},{"type":"text","text":" "},{"type":"text","text":"compile-time guarantees, and that it is the perfect tool for modeling navigation stacks in the"},{"text":" ","type":"text"},{"type":"text","text":"Composable Architecture."}]},{"text":"UIKit","anchor":"UIKit","type":"heading","level":2},{"inlineContent":[{"text":"The library also comes with a tool that allows you to use UIKit’s ","type":"text"},{"code":"UINavigationController","type":"codeVoice"},{"text":" in a","type":"text"},{"type":"text","text":" "},{"text":"state-driven manner. If you model your domains using ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true,"type":"reference"},{"text":" as described above, then you","type":"text"},{"type":"text","text":" "},{"text":"can use the special ","type":"text"},{"type":"codeVoice","code":"NavigationStackController"},{"type":"text","text":" type to implement a view controller for your stack:"}],"type":"paragraph"},{"code":["class AppController: NavigationStackController {","  private var store: StoreOf<AppFeature>!","","  convenience init(store: StoreOf<AppFeature>) {","    @UIBindable var store = store","","    self.init(path: $store.scope(state: \\.path, action: \\.path)) {","      RootViewController(store: store)","    } destination: { store in ","      switch store.case {","      case .addItem(let store):","        AddViewController(store: store)","      case .detailItem(let store):","        DetailViewController(store: store)","      case .editItem(let store):","        EditViewController(store: store)","      }","    }","","    self.store = store","  }","}"],"type":"codeListing","syntax":"swift"}]}],"abstract":[{"text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"model your domains, how to integrate features, how to test your features, and more."}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"title":"TestStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/popLast()":{"url":"\/documentation\/composablearchitecture\/stackstate\/poplast()","kind":"symbol","type":"topic","title":"popLast()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"popLast"},{"kind":"text","text":"() -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/popLast()","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BidirectionalCollection"},{"text":".","type":"text"}]},"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/pop(from:)":{"title":"pop(from:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/pop(from:)","role":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/pop(from:)","abstract":[{"text":"Pops the element corresponding to ","type":"text"},{"type":"codeVoice","code":"id"},{"type":"text","text":" from the stack, and all elements after it."}],"type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"pop"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StackElementID","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"role":"symbol","navigatorTitle":[{"text":"StackState","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","abstract":[{"type":"text","text":"A list of data representing the content of a navigation stack."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackState"}],"url":"\/documentation\/composablearchitecture\/stackstate","title":"StackState","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/element(id:action:)":{"url":"\/documentation\/composablearchitecture\/stackaction\/element(id:action:)","type":"topic","title":"StackAction.element(id:action:)","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"element"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":", "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"An action sent to the associated stack element at a given identifier."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/dependencymanagement","abstract":[{"text":"Learn how to register dependencies with the library so that they can be immediately accessible from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}],"title":"Dependencies"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:)":{"title":"forEach(_:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","role":"symbol","abstract":[{"text":"A special overload of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb"},{"type":"text","text":" for enum"},{"text":" ","type":"text"},{"type":"text","text":"reducers."}],"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture10StackStateV","kind":"typeIdentifier","text":"StackState"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>) -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier","text":"Reducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"kind":"text","text":">\n"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackActionOf":{"title":"StackActionOf","kind":"symbol","abstract":[{"type":"text","text":"A convenience type alias for referring to a stack action of a given reducer’s domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","url":"\/documentation\/composablearchitecture\/stackactionof","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StackActionOf"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"StackActionOf","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","kind":"typeIdentifier","text":"Exhaustivity"}],"url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"title":"exhaustivity"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/popFrom(id:)":{"role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"popFrom","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"text":"StackElementID","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","abstract":[{"type":"text","text":"An action sent to dismiss the associated stack element at a given identifier."}],"url":"\/documentation\/composablearchitecture\/stackaction\/popfrom(id:)","type":"topic","title":"StackAction.popFrom(id:)","kind":"symbol"},"#StackState-vs-NavigationPath":{"titleInlineContent":[{"type":"text","text":"StackState vs NavigationPath"}],"title":"StackState vs NavigationPath","identifier":"#StackState-vs-NavigationPath","url":"#StackState-vs-NavigationPath","type":"link"},"#Basics":{"titleInlineContent":[{"type":"text","text":"Basics"}],"title":"Basics","identifier":"#Basics","url":"#Basics","type":"link"},"#UIKit":{"titleInlineContent":[{"type":"text","text":"UIKit"}],"title":"UIKit","identifier":"#UIKit","url":"#UIKit","type":"link"},"#Integration":{"titleInlineContent":[{"type":"text","text":"Integration"}],"title":"Integration","identifier":"#Integration","url":"#Integration","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:case:)":{"title":"subscript(id:case:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:case:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:case:)","role":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"text":"<","kind":"text"},{"text":"Case","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"id"},{"kind":"text","text":" _: "},{"text":"StackElementID","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"case"},{"kind":"text","text":" _: "},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Case"},{"text":">) -> ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"text":"Accesses the value associated with the given id and case for reading and writing.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/push(id:state:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"push"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StackElementID","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)","abstract":[{"type":"text","text":"An action sent to present the given state at a given identifier in a navigation stack. This"},{"type":"text","text":" "},{"text":"action is typically sent from the view via the ","type":"text"},{"code":"NavigationLink(value:)","type":"codeVoice"},{"type":"text","text":" initializer."}],"url":"\/documentation\/composablearchitecture\/stackaction\/push(id:state:)","type":"topic","title":"StackAction.push(id:state:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"abstract":[],"title":"Enum state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state","kind":"section","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/case":{"title":"case","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","role":"symbol","abstract":[{"text":"A destructurable view of a store on a collection of cases.","type":"text"}],"url":"\/documentation\/composablearchitecture\/store\/case","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"`case`","kind":"identifier"},{"kind":"text","text":": "},{"text":"State","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"StateReducer","preciseIdentifier":"s:22ComposableArchitecture16CaseReducerStateP0eD0Qa","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"CaseScope","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11CaseReducerP0C5ScopeQa"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"CaseReducerState","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"State.StateReducer.Action"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA":{"title":"Testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"text":"Architecture.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","url":"\/documentation\/composablearchitecture\/testingtca","role":"article","kind":"article"},"https://developer.apple.com/documentation/swiftui/navigationpath":{"titleInlineContent":[{"type":"codeVoice","code":"NavigationPath"}],"title":"NavigationPath","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/navigationpath","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb":{"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:filepath:line:column:)-9svqb","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","type":"topic","kind":"symbol","title":"forEach(_:action:destination:fileID:filePath:line:column:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"text":", ","kind":"text"},{"text":"Destination","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parent state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"title":"init(path:root:destination:fileID:filePath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","role":"symbol","abstract":[{"text":"Drives a navigation stack with a store.","type":"text"}],"url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","type":"topic","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"text":"State","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Action","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Destination","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"path"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7SwiftUI7BindingV","text":"Binding","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">>>, "},{"text":"root","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Root","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","url":"\/documentation\/composablearchitecture\/presentationaction","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"kind":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"title":"PresentationAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationLink/init(state:label:fileID:filePath:line:column:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"L"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"?, "},{"text":"label","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"L","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol","title":"init(state:label:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/swiftui\/navigationlink\/init(state:label:fileid:filepath:line:column:)","abstract":[{"type":"text","text":"Creates a navigation link that presents the view corresponding to an element of"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference"},{"type":"text","text":"."}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Label"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Destination","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Never","type":"codeVoice"},{"type":"text","text":"."}]}},"#Dismissal":{"url":"#Dismissal","identifier":"#Dismissal","type":"link","title":"Dismissal","titleInlineContent":[{"type":"text","text":"Dismissal"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackElementID":{"role":"symbol","title":"StackElementID","url":"\/documentation\/composablearchitecture\/stackelementid","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackElementID","kind":"symbol","abstract":[{"type":"text","text":"An opaque type that identifies an element of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":".","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackElementID"}],"navigatorTitle":[{"text":"StackElementID","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"topic","abstract":[],"title":"Effect","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"role":"collectionGroup","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"url":"\/documentation\/composablearchitecture\/navigation","title":"Navigation","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","title":"ComposableArchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","abstract":[{"text":"A wrapper type for actions that can be presented in a navigation stack.","type":"text"}],"url":"\/documentation\/composablearchitecture\/stackaction","title":"StackAction","role":"symbol","kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"title":"DismissEffect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DismissEffect"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","url":"\/documentation\/composablearchitecture\/dismisseffect","role":"symbol","abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"kind":"symbol","navigatorTitle":[{"text":"DismissEffect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState/subscript(id:fileID:filePath:line:column:)":{"title":"subscript(id:fileID:filePath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState\/subscript(id:fileID:filePath:line:column:)","role":"symbol","url":"\/documentation\/composablearchitecture\/stackstate\/subscript(id:fileid:filepath:line:column:)","abstract":[{"text":"Accesses the value associated with the given id for reading and writing.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"kind":"text","text":" _: "},{"preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","text":"_HashableStaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","text":"_HashableStaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":" _: ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":" _: ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA#Non-exhaustive-testing":{"url":"\/documentation\/composablearchitecture\/testingtca#Non-exhaustive-testing","type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing","title":"Non-exhaustive testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation#Integration":{"abstract":[],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation#Integration","type":"topic","title":"Integration","url":"\/documentation\/composablearchitecture\/stackbasednavigation#Integration"},"#Pushing-features-onto-the-stack":{"url":"#Pushing-features-onto-the-stack","identifier":"#Pushing-features-onto-the-stack","type":"link","title":"Pushing features onto the stack","titleInlineContent":[{"type":"text","text":"Pushing features onto the stack"}]},"#Testing":{"url":"#Testing","identifier":"#Testing","type":"link","title":"Testing","titleInlineContent":[{"type":"text","text":"Testing"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"operation"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"catch"},{"text":": ((any ","kind":"text"},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier","text":"Effect"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}],"title":"run(priority:operation:catch:fileID:filePath:line:column:)","kind":"symbol","role":"symbol"}}}