{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The testability of features built in the Composable Architecture is the #1 priority of the library."},{"type":"text","text":" "},{"type":"text","text":"It should be possible to test not only how state changes when actions are sent into the store,"},{"type":"text","text":" "},{"type":"text","text":"but also how effects are executed and feed data back into the system."}]},{"anchor":"Testing-state-changes","level":2,"type":"heading","text":"Testing state changes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"State changes are by far the simplest thing to test in features built with the library. A"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":"’s first responsibility is to mutate the current state based on the action received into"},{"type":"text","text":" "},{"type":"text","text":"the system. To test this we can technically run a piece of mutable state through the reducer and"},{"type":"text","text":" "},{"type":"text","text":"then assert on how it changed after, like this:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State: Equatable { var count = 0 }","  enum Action { case incrementButtonTapped, decrementButtonTapped }","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .incrementButtonTapped:","      state.count += 1","      return .none","    case .decrementButtonTapped:","      state.count -= 1","      return .none","    }","  }","}","","func testBasics() {","  let feature = Feature()","  var currentState = Feature.State(count: 0)","  _ = feature.reduce(into: &currentState, action: .incrementButtonTapped)","  XCTAssertEqual(","    currentState,","    State(count: 1)","  )","","  _ = feature.reduce(into: &currentState, action: .decrementButtonTapped)","  XCTAssertEqual(","    currentState,","    State(count: 0)","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will technically work, but it’s a lot boilerplate for something that should be quite simple."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library comes with a tool specifically designed to make testing like this much simpler and more"},{"type":"text","text":" "},{"type":"text","text":"concise. It’s called "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":", and it is constructed similarly to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" by providing the"},{"type":"text","text":" "},{"type":"text","text":"initial state of the feature and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" that run’s the feature’s logic:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class CounterTests: XCTestCase {","  func testBasics() async {","    let store = TestStore(","      initialState: Feature.State(count: 0),","      reducer: Feature()","    )","  }","}"]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Test cases that use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" should be annotated as "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" and test methods should"},{"type":"text","text":" "},{"type":"text","text":"be marked as "},{"type":"codeVoice","code":"async"},{"type":"text","text":" since most assertion helpers on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" can suspend."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Test stores have a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-6s1gq"},{"type":"text","text":" method, but it behaves differently from"},{"type":"text","text":" "},{"type":"text","text":"stores and view stores. You provide an action to send into the system, but then you must also"},{"type":"text","text":" "},{"type":"text","text":"provide a trailing closure to describe how the state of the feature changed after sending the"},{"type":"text","text":" "},{"type":"text","text":"action:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  …","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This closure is handed a mutable variable that represents the state of the feature "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" sending"},{"type":"text","text":" "},{"type":"text","text":"the action, and it is your job to make the appropriate mutations to it to get it into the shape"},{"type":"text","text":" "},{"type":"text","text":"it should be after sending the action:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count = 1","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-6s1gq"},{"type":"text","text":" method is "},{"type":"codeVoice","code":"async"},{"type":"text","text":" for technical reasons that we do"},{"type":"text","text":" "},{"type":"text","text":"not have to worry about right now."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your mutation is incorrect, meaning you perform a mutation that is different from what happened"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":", then you will get a test failure with a nicely formatted message showing exactly"},{"type":"text","text":" "},{"type":"text","text":"what part of the state does not match:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count = 999","}"]},{"type":"codeListing","syntax":null,"code":["🛑 testSomething(): A state change does not match expectation: …","","  − TestStoreTests.State(count: 999)","  + TestStoreTests.State(count: 1)","","(Expected: −, Actual: +)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also send multiple actions to emulate a script of user actions and assert each step of the"},{"type":"text","text":" "},{"type":"text","text":"way how the state evolved:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count = 1","}","await store.send(.incrementButtonTapped) {","  $0.count = 2","}","await store.send(.decrementButtonTapped) {","  $0.count = 1","}"]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically we could have written the mutation block in the following manner:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count += 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and the test would have still passed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this does not produce as strong of an assertion. It shows that the count did increment"},{"type":"text","text":" "},{"type":"text","text":"by one, but we haven’t proven we know the precise value of "},{"type":"codeVoice","code":"count"},{"type":"text","text":" at each step of the way."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In general, the less logic you have in the trailing closure of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-6s1gq"},{"type":"text","text":", the stronger your assertion will be. It is best to use"},{"type":"text","text":" "},{"type":"text","text":"simple, hard coded data for the mutation."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Test stores do expose a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state"},{"type":"text","text":" property, which can be useful for performing assertions"},{"type":"text","text":" "},{"type":"text","text":"on computed properties you might have defined on your state. For example, if "},{"type":"codeVoice","code":"State"},{"type":"text","text":" had a"},{"type":"text","text":" "},{"type":"text","text":"computed property for checking if "},{"type":"codeVoice","code":"count"},{"type":"text","text":" was prime, we could test it like so:"}]},{"type":"codeListing","syntax":"swift","code":["store.send(.incrementButtonTapped) {","  $0.count = 3","}","XCTAssertTrue(store.state.isPrime)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, when inside the trailing closure of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-6s1gq"},{"type":"text","text":", the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state"},{"type":"text","text":" property is equal to the state "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" sending the action, not after. That"},{"type":"text","text":" "},{"type":"text","text":"prevents you from being able to use an escape hatch to get around needing to actually describe the"},{"type":"text","text":" "},{"type":"text","text":"state mutation, like so:"}]},{"type":"codeListing","syntax":"swift","code":["store.send(.incrementButtonTapped) {","  $0 = store.state \/\/ 🛑 store.state is the previous state, not new state.","}"]},{"anchor":"Testing-effects","level":2,"type":"heading","text":"Testing effects"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Testing state mutations as shown in the previous section is powerful, but is only half the story"},{"type":"text","text":" "},{"type":"text","text":"when it comes to testing features built in the Composable Architecture. The second responsibility of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":"s, after mutating state from an action, is to return an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":" that encapsulates"},{"type":"text","text":" "},{"type":"text","text":"a unit of work that runs in the outside world and feeds data back into the system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Effects form a major part of a feature’s logic. They can perform network requests to external"},{"type":"text","text":" "},{"type":"text","text":"services, load and save data to disk, start and stop timers, interact with Apple frameworks (Core"},{"type":"text","text":" "},{"type":"text","text":"Location, Core Motion, Speech Recognition, etc.), and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a simple example, suppose we have a feature with a button such that when you tap it, it starts"},{"type":"text","text":" "},{"type":"text","text":"a timer that counts up until you reach 5, and then stops. This can be accomplished using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/run(priority:operation:catch:file:fileID:line:)"},{"type":"text","text":" helper, which provides you with"},{"type":"text","text":" "},{"type":"text","text":"an asynchronous context to operate in and can send multiple actions back into the system:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State: Equatable { var count = 0 }","  enum Action { case startTimerButtonTapped, timerTick }","  enum TimerID {}","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .startTimerButtonTapped:","      state.count = 0","      return .run { send in","        for _ in 1...5 {","          try await Task.sleep(for: .seconds(1))","          await send(.timerTick)","        }","      }","","    case .timerTick:","      state.count += 1","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To test this we can start off similar to how we did in the "},{"type":"reference","isActive":true,"identifier":"#Testing-state-changes"},{"type":"text","text":" "},{"type":"text","text":"when testing state mutations:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class TimerTests: XCTestCase {","  func testBasics() async {","    let store = TestStore(","      initialState: Feature.State(count: 0),","      reducer: Feature()","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the basics set up, we can send an action into the system to assert on what happens, such as the"},{"type":"text","text":" "},{"type":"codeVoice","code":".startTimerButtonTapped"},{"type":"text","text":" action. This time we don’t actually expect state to change at first"},{"type":"text","text":" "},{"type":"text","text":"because when starting the timer we don’t change state, and so in this case we can leave off the"},{"type":"text","text":" "},{"type":"text","text":"trailer closure:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.startTimerButtonTapped)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if we run the test as-is with no further interactions with the test store, we get a"},{"type":"text","text":" "},{"type":"text","text":"failure:"}]},{"type":"codeListing","syntax":null,"code":["🛑 testSomething(): An effect returned for this action is still running.","   It must complete before the end of the test. …"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is happening because "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" requires you to exhaustively prove how the entire system"},{"type":"text","text":" "},{"type":"text","text":"of your feature evolves over time. If an effect is still running when the test finishes and the"},{"type":"text","text":" "},{"type":"text","text":"test store does "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" fail then it could be hiding potential bugs. Perhaps the effect is not"},{"type":"text","text":" "},{"type":"text","text":"supposed to be running, or perhaps the data it feeds into the system later is wrong. The test store"},{"type":"text","text":" "},{"type":"text","text":"requires all effects to finish."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get this test passing we need to assert on the actions that are sent back into the system"},{"type":"text","text":" "},{"type":"text","text":"by the effect. We do this by using the "},{"type":"codeVoice","code":"TestStore\/receive(_:timeout:_:file:line:)-8yd62"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which allows you to assert which action you expect to receive from an effect, as well as how the"},{"type":"text","text":" "},{"type":"text","text":"state changes after receiving that effect:"}]},{"type":"codeListing","syntax":"swift","code":["await store.receive(.timerTick) {","  $0.count = 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if we run this test we still get a failure because we asserted a "},{"type":"codeVoice","code":"timerTick"},{"type":"text","text":" action was"},{"type":"text","text":" "},{"type":"text","text":"going to be received, but after waiting around for a small amount of time no action was received:"}]},{"type":"codeListing","syntax":null,"code":["🛑 testSomething(): Expected to receive an action, but received none after 0.1 seconds."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is because our timer is on a 1 second interval, and by default"},{"type":"text","text":" "},{"type":"codeVoice","code":"TestStore\/receive(_:timeout:_:file:line:)-8yd62"},{"type":"text","text":" only waits for a fraction of a second. This is"},{"type":"text","text":" "},{"type":"text","text":"because typically you should not be performing real time-based asynchrony in effects, and instead"},{"type":"text","text":" "},{"type":"text","text":"using a controlled entity, such as a clock, that can be sped up in tests. We will demonstrate this"},{"type":"text","text":" "},{"type":"text","text":"in a moment, so for now let’s increase the timeout:"}]},{"type":"codeListing","syntax":"swift","code":["await store.receive(.timerTick, timeout: .seconds(2)) {","  $0.count = 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This assertion now passes, but the overall test is still failing because there are still more"},{"type":"text","text":" "},{"type":"text","text":"actions to receive. The timer should tick 5 times in total, so we need five "},{"type":"codeVoice","code":"receive"},{"type":"text","text":" assertions:"}]},{"type":"codeListing","syntax":"swift","code":["await store.receive(.timerTick, timeout: .seconds(2)) {","  $0.count = 1","}","await store.receive(.timerTick, timeout: .seconds(2)) {","  $0.count = 2","}","await store.receive(.timerTick, timeout: .seconds(2)) {","  $0.count = 3","}","await store.receive(.timerTick, timeout: .seconds(2)) {","  $0.count = 4","}","await store.receive(.timerTick, timeout: .seconds(2)) {","  $0.count = 5","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the full test suite passes, and we have exhaustively proven how effects are executed in this"},{"type":"text","text":" "},{"type":"text","text":"feature. If in the future we tweak the logic of the effect, like say have it emit 10 times instead"},{"type":"text","text":" "},{"type":"text","text":"of 5, then we will immediately get a test failure letting us know that we have not properly"},{"type":"text","text":" "},{"type":"text","text":"asserted on how the features evolve over time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there is something not ideal about how this feature is structured, and that is the fact"},{"type":"text","text":" "},{"type":"text","text":"that we are doing actual, uncontrolled time-based asynchrony in the effect:"}]},{"type":"codeListing","syntax":"swift","code":["return .run { send in","  for _ in 1...5 {","    try await Task.sleep(for: .seconds(1)) \/\/ ⬅️","    await send(.timerTick)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means for our test to run we must actually wait for 5 real world seconds to pass so that we"},{"type":"text","text":" "},{"type":"text","text":"can receive all of the actions from the timer. This makes our test suite far too slow. What if in"},{"type":"text","text":" "},{"type":"text","text":"the future we need to test a feature that has a timer that emits hundreds or thousands of times?"},{"type":"text","text":" "},{"type":"text","text":"We cannot hold up our test suite for minutes or hours just to test that one feature."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix this we need to add a dependency to the reducer that aids in performing time-based"},{"type":"text","text":" "},{"type":"text","text":"asynchrony, but in a way that is controllable. One way to do this is to add a clock as a"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" to the reducer:"}]},{"type":"codeListing","syntax":"swift","code":["import Clocks","","struct Feature: ReducerProtocol {","  struct State { … }","  enum Action { … }","  @Dependency(\\.continuousClock) var clock","}"]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To make use of controllable clocks you must use the "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-clocks"},{"type":"text","text":" library, which is"},{"type":"text","text":" "},{"type":"text","text":"automatically included with the Composable Architecture."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then the timer effect in the reducer can make use of the clock to sleep rather than reaching"},{"type":"text","text":" "},{"type":"text","text":"out to the uncontrollable "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["return .run { send in","  for _ in 1...5 {","    try await self.clock.sleep(for: .seconds(1))","    await send(.timerTick)","  }","}"]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"sleep(for:)"},{"type":"text","text":" method on "},{"type":"codeVoice","code":"Clock"},{"type":"text","text":" is provided by the"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"Swift Clocks"}],"isActive":true,"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-clocks","overridingTitle":"Swift Clocks"},{"type":"text","text":" library."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By having a clock as a dependency in the feature we can supply a controlled version in tests, such"},{"type":"text","text":" "},{"type":"text","text":"as an immediate clock that does not suspend at all when you ask it to sleep:"}]},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(","  initialState: Feature.State(count: 0),","  reducer: Feature()",")","","store.dependencies.continuousClock = ImmediateClock()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that small change we can drop the "},{"type":"codeVoice","code":"timeout"},{"type":"text","text":" arguments from the"},{"type":"text","text":" "},{"type":"codeVoice","code":"TestStore\/receive(_:timeout:_:file:line:)-8yd62"},{"type":"text","text":" invocations:"}]},{"type":"codeListing","syntax":"swift","code":["await store.receive(.timerTick) {","  $0.count = 1","}","await store.receive(.timerTick) {","  $0.count = 1","}","await store.receive(.timerTick) {","  $0.count = 2","}","await store.receive(.timerTick) {","  $0.count = 3","}","await store.receive(.timerTick) {","  $0.count = 4","}","await store.receive(.timerTick) {","  $0.count = 5","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and the test still passes, but now does so immediately."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The more time you take to control the dependencies your features use, the easier it will be to"},{"type":"text","text":" "},{"type":"text","text":"write tests for your features. To learn more about designing dependencies and how to best leverage"},{"type":"text","text":" "},{"type":"text","text":"dependencies, read the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"type":"text","text":" article."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/testing"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Testing","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher":{"role":"symbol","title":"EffectPublisher","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectPublisher"}],"abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectPublisher"}],"url":"\/documentation\/composablearchitecture\/effectpublisher"},"http://github.com/pointfreeco/swift-clocks":{"title":"Clocks","titleInlineContent":[{"type":"text","text":"Clocks"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-clocks","url":"http:\/\/github.com\/pointfreeco\/swift-clocks"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"This API has been deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Read "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"},{"type":"text","text":" for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"role":"article","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/state":{"role":"symbol","title":"state","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"}],"abstract":[{"type":"text","text":"The current state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:_:file:line:)-6s1gq":{"conformance":{"constraints":[{"type":"codeVoice","code":"ScopedState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"send(_:_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ScopedAction"},{"kind":"text","text":", (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ScopedState"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-6s1gq","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/send(_:_:file:line:)-6s1gq"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"role":"symbol","title":"ReducerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerProtocol"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerProtocol"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/GettingStarted":{"role":"article","title":"Getting started","abstract":[{"type":"text","text":"Learn how to integrate the Composable Architecture into your project and write your first"},{"type":"text","text":" "},{"type":"text","text":"application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/gettingstarted"},"#Testing-state-changes":{"title":"previous section","titleInlineContent":[{"type":"text","text":"previous section"}],"type":"link","identifier":"#Testing-state-changes","url":"#Testing-state-changes"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/run(priority:operation:catch:file:fileID:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"run(priority:operation:catch:file:fileID:line:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/run(priority:operation:catch:file:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effectpublisher\/run(priority:operation:catch:file:fileid:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingToTheReducerProtocol":{"role":"article","title":"Migrating to the reducer protocol","abstract":[{"type":"text","text":"Learn how to migrate existing applications to use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":", in both Swift 5.7 and"},{"type":"text","text":" "},{"type":"text","text":"Swift 5.6."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingtothereducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"role":"symbol","title":"EffectTask","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectTask"}],"abstract":[{"type":"text","text":"A convenience type alias for referring to an effect that can never fail, like the kind of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"},{"type":"text","text":" returned by a reducer after processing an action."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectTask"}],"url":"\/documentation\/composablearchitecture\/effecttask"}}}