{"variants":[{"paths":["\/tutorials\/composablearchitecture\/02-03-testingpresentation"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Testing presentation","chapter":"Navigation","estimatedTimeInMinutes":40,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]}]},{"kind":"tasks","tasks":[{"anchor":"Testing-the-add-contact-flow","title":"Testing the add contact flow","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first functionality we will test is adding a new contact. This entails emulating the"},{"type":"text","text":" "},{"type":"text","text":"entire use flow of the user tapping the “+” button, typing into the name text field,"},{"type":"text","text":" "},{"type":"text","text":"tapping the “Save” button, and confirming that the sheet is dismissed and the new contact"},{"type":"text","text":" "},{"type":"text","text":"is added to the list."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-03-01-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new file, ContactsFeatureTests.swift, to your test target and paste in some basic"},{"type":"text","text":" "},{"type":"text","text":"scaffolding for a test."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Construct a test store by supplying the initial state the feature should start in, as well"},{"type":"text","text":" "},{"type":"text","text":"as the reducer that is being tested."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"type":"text","text":" for a tutorial on testing, as well as the article"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},{"type":"text","text":" for more detailed information."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping on the “+” button by sending the "},{"type":"codeVoice","code":"addButtonTapped"},{"type":"text","text":" action. The"},{"type":"text","text":" "},{"type":"text","text":"trailing closure provided is where we will assert on how state changes after sending"},{"type":"text","text":" "},{"type":"text","text":"the action."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The only mutation we expect to happen is that the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" field becomes populated"},{"type":"text","text":" "},{"type":"text","text":"with some data, in particular the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case of the destination enum."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case will hold onto some data, which is "},{"type":"codeVoice","code":"AddContactFeature.State"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To construct that state we need to construct a "},{"type":"codeVoice","code":"Contact"},{"type":"text","text":" value, and now we run into"},{"type":"text","text":" "},{"type":"text","text":"trouble. What can we provide for the ID?"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" currently makes use of an uncontrolled dependency, making it very hard"},{"type":"text","text":" "},{"type":"text","text":"to test this feature. It constructs a random UUID when presenting this feature, and we can’t"},{"type":"text","text":" "},{"type":"text","text":"predict that ID to get a passing test. So, just as we did in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"we will add a dependency on a UUID generator to our "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"."}]},{"code":"02-03-01-code-0006","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift, and add a dependency on the UUID generator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0007","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the newly added UUID dependency for creating UUIDs rather than reaching out to the"},{"type":"text","text":" "},{"type":"text","text":"global, uncontrollable initializer."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0008","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeatureTests.swift and override the dependencies on the test store so"},{"type":"text","text":" "},{"type":"text","text":"that it uses a controlled UUID generator. In particular, we will use the “incrementing”"},{"type":"text","text":" "},{"type":"text","text":"generator, which generates sequential, increasing IDs starting at 0."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0009","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we can predict the UUID generated when the contact is created."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The initializer on UUID that allows providing an integer is provided by our"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies"},{"type":"text","text":" library, which the Composable Architecture"},{"type":"text","text":" "},{"type":"text","text":"depends on."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test passes! So this proves that when the “+” button is tapped, that a sheet will fly"},{"type":"text","text":" "},{"type":"text","text":"up for the “Add Contact” feature. Let’s keep asserting on more of the user flow."}]},{"code":"02-03-01-code-0010","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user typing into the name text field of the contact. The trailing closure is"},{"type":"text","text":" "},{"type":"text","text":"where we can assert on how state changed after sending the action."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0011","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert on how state changed by mutating the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" through the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case of"},{"type":"text","text":" "},{"type":"text","text":"the destination enum."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To do this we use a special subscript defined on"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" that allows you to modify the data in the case"},{"type":"text","text":" "},{"type":"text","text":"of any enum."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState\/subscript(case:)"},{"type":"text","text":" for documentation"},{"type":"text","text":" "},{"type":"text","text":"on this subscript."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0012","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping the “Save” button in the “Add Contact” feature. We do not"},{"type":"text","text":" "},{"type":"text","text":"expect the state to change immediately when sending this action, and so we do not need"},{"type":"text","text":" "},{"type":"text","text":"to provide a trailing closure."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0013","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the delegate action "},{"type":"codeVoice","code":"saveContact"},{"type":"text","text":" being received by the test store. This action is"},{"type":"text","text":" "},{"type":"text","text":"sent from the "},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" when the “Save” button is tapped."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0014","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that when the "},{"type":"codeVoice","code":"saveContact"},{"type":"text","text":" delegate action is received that state mutates by adding"},{"type":"text","text":" "},{"type":"text","text":"a contact to the array."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-01-code-0015","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally assert that the test store receives a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"type":"text","text":" action, which causes the “Add Contact”"},{"type":"text","text":" "},{"type":"text","text":"feature to be dismissed."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a fully passing test, and proves the end-to-end lifecycle of presenting a child"},{"type":"text","text":" "},{"type":"text","text":"feature, interacting with it, and how the child communicates information back to the parent."},{"type":"text","text":" "},{"type":"text","text":"However, this test is quite verbose, and is asserting on behavior that is local to just the"},{"type":"text","text":" "},{"type":"text","text":"“Add Contact” feature. If we are only wanting to test at a high level that we can present"},{"type":"text","text":" "},{"type":"text","text":"and dismiss a child feature, there is a better tool available called “non-exhaustive”"},{"type":"text","text":" "},{"type":"text","text":"testing."}]}]},{"anchor":"Non-exhaustive-testing","title":"Non-exhaustive testing","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The previously written test is powerful and impressive, but also verbose. We had to assert"},{"type":"text","text":" "},{"type":"text","text":"on how everything evolves in the child feature, and had to assert how every effect action"},{"type":"text","text":" "},{"type":"text","text":"is received by the store. Sometimes it can be useful to write tests in a less exhaustive"},{"type":"text","text":" "},{"type":"text","text":"manner, especially when testing the integration of many features, such as is the case with"},{"type":"text","text":" "},{"type":"text","text":"features performing navigation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":" for more information on non-exhaustive testing"},{"type":"text","text":" "},{"type":"text","text":"techniques."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-03-02-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start a new test case to test the same “Add Contact” user flow as above, but this time"},{"type":"text","text":" "},{"type":"text","text":"we will do it in the non-exhaustive style."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-02-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set the test store’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"type":"text","text":" to "},{"type":"codeVoice","code":".off"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-02-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping on the “+” button, but this time do not provide a trailing"},{"type":"text","text":" "},{"type":"text","text":"closure. In non-exhaustive test stores there is no need to assert on state changes if you"},{"type":"text","text":" "},{"type":"text","text":"do not want to."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-02-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user typing into the name text field of the contact, but again do not assert"},{"type":"text","text":" "},{"type":"text","text":"on any state changes in the child feature."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-02-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping the “Save” button in the child feature."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-02-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to assert that sometime after the user taps the “Save” button that the"},{"type":"text","text":" "},{"type":"text","text":"contact is added to the array and the child feature is dismissed. However, we cannot assert"},{"type":"text","text":" "},{"type":"text","text":"on that until all the actions have been received, and so we can do that by using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:file:line:)-a4ri"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-02-code-0006","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that the final state of the feature has a new contact added to the array and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"’d out."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to write a very high level test covering the full user flow of adding"},{"type":"text","text":" "},{"type":"text","text":"a new contact to the list. We don’t need to assert on all of the nitty gritty details in"},{"type":"text","text":" "},{"type":"text","text":"the child feature, and instead can just assert that the contact was indeed added after the"},{"type":"text","text":" "},{"type":"text","text":"user completed their steps."}]}]},{"anchor":"Testing-the-delete-contact-flow","title":"Testing the delete contact flow","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The last important piece of functionality to test is deleting a contact. This involves tapping"},{"type":"text","text":" "},{"type":"text","text":"a button, asserting that an alert is shown, confirming the deletion through the alert, and"},{"type":"text","text":" "},{"type":"text","text":"then asserting that indeed the contact was removed."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-03-03-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start a new test method to test the delete flow."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-03-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" for testing the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" reducer."},{"type":"text","text":" "},{"type":"text","text":"This time we do not need to override any dependencies because we do not expect any to be"},{"type":"text","text":" "},{"type":"text","text":"used"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-03-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start the initial state of the feature with some contacts already added to the array. This"},{"type":"text","text":" "},{"type":"text","text":"will make it easier to test the deletion behavior."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-03-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping on the delete button by sending the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" action."},{"type":"text","text":" "},{"type":"text","text":"We will test deleting the second contact, which has an ID of "},{"type":"codeVoice","code":"UUID(1)"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-03-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We expect that the state’s "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" field will be populated with the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" case"},{"type":"text","text":" "},{"type":"text","text":"since an alert should appear."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-03-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically we can simply repeat exactly what we did in the reducer for constructing the"},{"type":"text","text":" "},{"type":"text","text":"alert. It’s verbose, but it does get the test passing."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, that is a bit of a pain to repeat all of that work. There is a better way."}]},{"code":"02-03-03-code-0006","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift where the reducer is implemented. Extend "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"with its "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" generic constrained to "},{"type":"codeVoice","code":"ContactsFeature.Action"},{"type":"text","text":". Add a static function"},{"type":"text","text":" "},{"type":"text","text":"that constructs the alert, which allows us to reuse this logic in multiple places."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-03-code-0007","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make use of the new "},{"type":"codeVoice","code":"deleteConfirmation"},{"type":"text","text":" static alert function in the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"reducer, rather than building "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" from scratch."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-03-code-0008","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeatureTests.swift and use the new "},{"type":"codeVoice","code":"deleteConfirmation"},{"type":"text","text":" static function"},{"type":"text","text":" "},{"type":"text","text":"to assert against the alert, rather than building "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" from scratch."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see this passes. This proves that when the delete button is tapped, an"},{"type":"text","text":" "},{"type":"text","text":"alert is shown to the user."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-03-code-0009","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user confirming to delete contact by sending the "},{"type":"codeVoice","code":"confirmDeletion"},{"type":"text","text":" action"},{"type":"text","text":" "},{"type":"text","text":"in the alert."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-03-03-code-0010","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that the alert was dismissed and that the contact corresponding to the ID of"},{"type":"text","text":" "},{"type":"codeVoice","code":"UUID(1)"},{"type":"text","text":" was removed."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to test the deletion flow. Run the test suite to see everything passes,"},{"type":"text","text":" "},{"type":"text","text":"proving that when the user taps the confirmation button in the alert that indeed the contact"},{"type":"text","text":" "},{"type":"text","text":"will be removed."}]}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Navigation stacks","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Testing presentation","categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"references":{"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","title":"Essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"http://github.com/pointfreeco/swift-dependencies":{"title":"swift-dependencies","titleInlineContent":[{"type":"text","text":"swift-dependencies"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies","url":"http:\/\/github.com\/pointfreeco\/swift-dependencies"},"02-03-03-code-0000":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0000","type":"file","fileType":"swift","highlights":[]},"02-03-01-code-0009":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0009","type":"file","fileType":"swift","highlights":[{"line":18}]},"02-03-03-code-0004":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0004","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"abstract":[],"title":"Non-exhaustive testing","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing"},"02-03-02-code-0005":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\")))))","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.skipReceivedActions()","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0005","type":"file","fileType":"swift","highlights":[{"line":19}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"role":"symbol","title":"PresentationAction.dismiss","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}],"abstract":[{"type":"text","text":"An action sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss"},"02-03-02-code-0004":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\")))))","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0004","type":"file","fileType":"swift","highlights":[{"line":18}]},"02-03-03-code-0008":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      state.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0008","type":"file","fileType":"swift","highlights":[{"line":21}]},"02-03-01-code-0004":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","        )","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0004","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"role":"pseudoSymbol","title":"Managing a timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"02-03-02-code-0006":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\")))))","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.skipReceivedActions()","    store.assert {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","      $0.destination = nil","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0006","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"role":"article","title":"Navigation","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"02-03-01-code-0012":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0012","type":"file","fileType":"swift","highlights":[{"line":25}]},"02-03-01-code-0001":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0001","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"role":"pseudoSymbol","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"role":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture"},"02-03-01-code-0007":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-03-01-code-0007","type":"file","fileType":"swift","highlights":[{"line":21}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"role":"symbol","title":"exhaustivity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity"},"02-03-01-code-0006":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-03-01-code-0006","type":"file","fileType":"swift","highlights":[{"line":14}]},"02-03-01-code-0011":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0011","type":"file","fileType":"swift","highlights":[{"line":23}]},"02-03-03-code-0009":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      state.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(.destination(.presented(.alert(.confirmDeletion(id: UUID(1)))))) {","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0009","type":"file","fileType":"swift","highlights":[{"line":23},{"line":24}]},"02-03-01-code-0015":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.receive(","      .destination(","        .presented(.addContact(.delegate(.saveContact(Contact(id: UUID(0), name: \"Blob Jr.\")))))","      )","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","    await store.receive(.destination(.dismiss)) {","      $0.destination = nil","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0015","type":"file","fileType":"swift","highlights":[{"line":35},{"line":36},{"line":37}]},"02-03-02-code-0001":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0001","type":"file","fileType":"swift","highlights":[{"line":14}]},"02-03-03-code-0001":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0001","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11}]},"02-03-02-code-0002":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0002","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16}]},"02-03-01-code-0010":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0010","type":"file","fileType":"swift","highlights":[{"line":22},{"line":23}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"role":"pseudoSymbol","title":"What is a side effect?","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"role":"pseudoSymbol","title":"Testing state changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","title":"PresentationState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"role":"project","title":"Testing presentation","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation"},"02-03-03-code-0005":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","        AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0005","type":"file","fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"02-03-03-code-0006":{"syntax":"swift","content":["import ComposableArchitecture","","extension AlertState where Action == ContactsFeature.Action.Alert {","  static func deleteConfirmation(id: UUID) -> Self {","    Self {","      TextState(\"Are you sure?\")","    } actions: {","      ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","        TextState(\"Delete\")","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-03-03-code-0006","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","estimatedTime":"20min","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"02-03-02-code-0003":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addButtonTapped)","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\")))))","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0003","type":"file","fileType":"swift","highlights":[{"line":17}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipReceivedActions(strict:file:line:)-a4ri":{"role":"symbol","title":"skipReceivedActions(strict:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"skipReceivedActions"},{"kind":"text","text":"("},{"kind":"externalParam","text":"strict"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Clears the queue of received actions from effects."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:file:line:)-a4ri","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/skipreceivedactions(strict:file:line:)-a4ri"},"02-03-02-code-0000":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow_NonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-02-code-0000","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","title":"Testing the add contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"02-03-01-code-0008":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0008","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"02-03-03-code-0002":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0002","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}]},"02-03-01-code-0014":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.receive(","      .destination(","        .presented(.addContact(.delegate(.saveContact(Contact(id: UUID(0), name: \"Blob Jr.\")))))","      )","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0014","type":"file","fileType":"swift","highlights":[{"line":31},{"line":32},{"line":33}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"role":"pseudoSymbol","title":"Create a reducer","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"02-03-01-code-0003":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0003","type":"file","fileType":"swift","highlights":[{"line":14},{"line":15}]},"02-03-01-code-0013":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(.destination(.presented(.addContact(.setName(\"Blob Jr.\"))))) {","      $0.$destination[case: \/ContactsFeature.Destination.State.addContact]?.contact.name = \"Blob Jr.\"","    }","    await store.send(.destination(.presented(.addContact(.saveButtonTapped))))","    await store.receive(","      .destination(","        .presented(.addContact(.delegate(.saveContact(Contact(id: UUID(0), name: \"Blob Jr.\")))))","      )","    ) {","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0013","type":"file","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"role":"project","title":"Your first presentation","estimatedTime":"30min","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"02-03-01-code-0002":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","","    await store.send(.addButtonTapped) {","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0002","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","title":"Testing your feature","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","title":"Contact detail feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"role":"pseudoSymbol","title":"Testing effects","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"role":"article","title":"Testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/testing"},"02-03-03-code-0003":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0003","type":"file","fileType":"swift","highlights":[{"line":19},{"line":20},{"line":21}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"role":"pseudoSymbol","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState/subscript(case:)":{"role":"symbol","title":"subscript(case:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Case"},{"kind":"text","text":">("},{"kind":"externalParam","text":"case"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Accesses the value associated with the given case for reading and writing."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState\/subscript(case:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presentationstate\/subscript(case:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"role":"pseudoSymbol","title":"Child-to-parent communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","title":"Improve domain modeling","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"role":"project","title":"Adding side effects","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"02-03-01-code-0005":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0005","type":"file","fileType":"swift","highlights":[{"line":16}]},"02-03-03-code-0010":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testDeleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(.destination(.presented(.alert(.confirmDeletion(id: UUID(1)))))) {","      $0.contacts.remove(id: UUID(1))","      $0.destination = nil","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0010","type":"file","fileType":"swift","highlights":[{"line":21},{"line":24},{"line":25}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"02-03-03-code-0007":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-03-03-code-0007","type":"file","fileType":"swift","highlights":[{"line":35}]},"02-03-01-code-0000":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import ContactsApp","","@MainActor","final class ContactsFeatureTests: XCTestCase {","  func testAddFlow() async {","  }","}"],"fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0000","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"role":"pseudoSymbol","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"role":"project","title":"Multiple presentation destinations","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"}}}