{"sections":[],"metadata":{"roleHeading":"Article","title":"Migrating to 1.4","role":"article","modules":[{"name":"ComposableArchitecture"}]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro, and learn how to better leverage case key","type":"text"},{"text":" ","type":"text"},{"text":"paths in your features.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"],"generated":true}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"type":"text","text":" "},{"type":"text","text":"APIs, and this article contains some tips for doing so."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"#Using-the-Reducer-macro","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Using-case-key-paths","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Receiving-test-store-actions"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Moving-off-of-TaskResult","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Identified-actions","isActive":true,"type":"reference"}]}]}]},{"anchor":"Using-the-Reducer-macro","text":"Using the @Reducer macro","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":". It is called "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":", and to migrate existing code one only needs to annotate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"their type with "},{"code":"@Reducer","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"],"syntax":"diff"},{"inlineContent":[{"type":"text","text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of"},{"type":"text","text":" "},{"type":"text","text":"reducer composition, such as case key paths (see guides below). See the documentation of"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" to see everything that macro adds to your feature’s reducer."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also technically drop the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" conformance:"}]},{"type":"codeListing","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"],"syntax":"diff"},{"type":"paragraph","inlineContent":[{"text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break.","type":"text"},{"text":" ","type":"text"},{"text":"See the documentation of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","isActive":true,"type":"reference"},{"text":" for more gotchas on using the ","type":"text"},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro."}]},{"text":"Using case key paths","anchor":"Using-case-key-paths","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 we soft-deprecated many APIs that take the "},{"code":"CasePath","type":"codeVoice"},{"type":"text","text":" type in favor of APIs that take"},{"type":"text","text":" "},{"type":"text","text":"what is known as a "},{"type":"codeVoice","code":"CaseKeyPath"},{"text":". Both of these types come from our ","type":"text"},{"isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"reference"},{"type":"text","text":" "},{"text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so with structs."}]},{"inlineContent":[{"type":"text","text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths"},{"text":" ","type":"text"},{"type":"text","text":"that massively improved the ergonomics of using case paths. We introduced the "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro"},{"type":"text","text":" "},{"type":"text","text":"for automatically deriving case paths so that we could stop using runtime reflection, and we"},{"text":" ","type":"text"},{"text":"introduced a way of using key paths to describe case paths. And so the old ","type":"text"},{"code":"CasePath","type":"codeVoice"},{"text":" type has been","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deprecated, and the new "},{"type":"codeVoice","code":"CaseKeyPath"},{"type":"text","text":" type has taken its place."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means that previously when you would use APIs involving case paths you would have to use the"},{"text":" ","type":"text"},{"code":"\/","type":"codeVoice"},{"text":" prefix operator to derive the case path. For example:","type":"text"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You now get to shorten that into a far simpler, more familiar key path syntax:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" conformances with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"Which automatically applies the "},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro to the feature’s ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum among other","type":"text"},{"type":"text","text":" "},{"text":"things:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"],"syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the feature’s "},{"type":"codeVoice","code":"State"},{"type":"text","text":" is an enum, "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" will also be applied, along with"},{"text":" ","type":"text"},{"code":"@dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"],"syntax":"diff"},{"inlineContent":[{"text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be","type":"text"},{"type":"text","text":" "},{"text":"useful when scoping a store’s state to a specific case:","type":"text"}],"type":"paragraph"},{"code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"],"type":"codeListing","syntax":"diff"},{"inlineContent":[{"type":"text","text":"To form a case key path for any other enum, you must apply the "},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro explicitly:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And to access its associated values, you must also apply the "},{"code":"@dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":" attributes:"}]},{"code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"code":"\/","type":"codeVoice"},{"text":" prefix operator for case paths you should now be able to use","type":"text"},{"text":" ","type":"text"},{"text":"key path syntax, so long as all of the enums involved are ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"If you encounter any problems, create a "},{"isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"reference"},{"text":" on the Composable Architecture","type":"text"},{"type":"text","text":" "},{"type":"text","text":"repo."}],"type":"paragraph"},{"text":"Receiving test store actions","level":3,"type":"heading","anchor":"Receiving-test-store-actions"},{"type":"paragraph","inlineContent":[{"text":"The power of case key paths and the ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro has made it possible to massively simplify","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"how one asserts on actions received in a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":". Instead of constructing the concrete action"},{"text":" ","type":"text"},{"type":"text","text":"received from an effect like this:"}]},{"syntax":"swift","code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"],"type":"codeListing"},{"inlineContent":[{"text":"…you can use key path syntax to describe the nesting of action cases that is received:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.presented.response.success)"]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Case key path syntax requires that every nested action is ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":". Reducer actions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are typically "},{"code":"@CasePathable","type":"codeVoice"},{"text":" automatically via the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro, but other enums must be"},{"type":"text","text":" "},{"text":"explicitly annotated:","type":"text"}]},{"syntax":"swift","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"type":"codeListing"}],"name":"Note"},{"inlineContent":[{"type":"text","text":"And in the case of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"text":" you can even omit the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},{"type":"text","text":" "},{"type":"text","text":"path component:"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(\\.child.response.success)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This does not assert on the "},{"inlineContent":[{"text":"data","type":"text"}],"type":"emphasis"},{"text":" received in the action, but typically that is already covered","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by the state assertion made inside the trailing closure of "},{"type":"codeVoice","code":"receive"},{"type":"text","text":". And if you use this style of"},{"type":"text","text":" "},{"type":"text","text":"action receiving exclusively, you can even stop conforming your action types to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"There are a few advanced situations to be aware of. When receiving an action that involves an","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"reference"},{"text":" (more information below in ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","isActive":true},{"type":"text","text":"), then"},{"type":"text","text":" "},{"text":"you can use the subscript ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","isActive":true,"type":"reference"},{"type":"text","text":" to"},{"text":" ","type":"text"},{"text":"receive a particular action for an element:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.rows[id: 0].response.success)"]},{"type":"paragraph","inlineContent":[{"text":"And the same goes for ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"text":" too:","type":"text"}]},{"syntax":"swift","code":["store.receive(\\.path[id: 0].response.success)"],"type":"codeListing"},{"anchor":"Moving-off-of-TaskResult","text":"Moving off of TaskResult","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"In version 1.4 of the library, the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"text":" was soft-deprecated and eventually will be fully","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deprecated and then removed. The original rationale for the introduction of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"text":" was to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"make an equatable-friendly version of "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" for when the error produced was "},{"code":"any Error","type":"codeVoice"},{"text":", which is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not equatable. And the reason to want an equatable-friendly result is so that the "},{"type":"codeVoice","code":"Action"},{"text":" type in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"reducers can be equatable, and the reason for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"type":"text","text":" is to make it possible to test actions"},{"type":"text","text":" "},{"text":"emitted by effects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically in tests, when one wants to assert that the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" received an action you must"},{"type":"text","text":" "},{"text":"specify a concrete action:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":" uses the equatable conformance of ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" to confirm that you are asserting that"},{"type":"text","text":" "},{"text":"the store received the correct action.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"However, this becomes verbose when testing deeply nested features, which is common in integration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"tests:"}],"type":"paragraph"},{"code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, with the introduction of "},{"isActive":true,"overridingTitle":"case key paths","overridingTitleInlineContent":[{"type":"text","text":"case key paths"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"reference"},{"type":"text","text":" we greatly improved the"},{"type":"text","text":" "},{"text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the","type":"text"},{"type":"text","text":" "},{"text":"case of the enum you expect to receive, and you can even omit the associated data from the action","type":"text"},{"text":" ","type":"text"},{"text":"since typically that is covered in the state assertion:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"And this syntax does not require the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum to be equatable since we are only asserting that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the case of the action was received. We are not testing the data in the action."}]},{"inlineContent":[{"type":"text","text":"We feel that with this better syntax there is less of a reason to have "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" and so we"},{"type":"text","text":" "},{"text":"do plan on removing it eventually. If you have an important use case for ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" that you"},{"type":"text","text":" "},{"type":"text","text":"think merits it being in the library, please "},{"isActive":true,"overridingTitle":"open a discussion","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"open a discussion"}]},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"text":"Identified actions","type":"heading","anchor":"Identified-actions"},{"inlineContent":[{"type":"text","text":"In version 1.4 of the library we introduced the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"text":" type which makes it more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would"},{"type":"text","text":" "},{"type":"text","text":"have a case in your "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum for a particular row that holds the ID of the state being acted"},{"text":" ","type":"text"},{"type":"text","text":"upon as well as the action:"}],"type":"paragraph"},{"code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This can be updated to hold onto ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"type":"text","text":" instead of those piece of data directly in the"},{"text":" ","type":"text"},{"type":"text","text":"case:"}]},{"type":"codeListing","syntax":"swift","code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"]},{"inlineContent":[{"text":"And in the reducer, instead of invoking","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","type":"reference","isActive":true},{"type":"text","text":" with a case path using the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"]},{"inlineContent":[{"type":"text","text":"…you will instead use key path syntax to determine which case of the "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum holds the"},{"type":"text","text":" "},{"type":"text","text":"identified action:"}],"type":"paragraph"},{"syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"text":" ","type":"text"},{"text":"type-inference.","type":"text"}]},{"inlineContent":[{"type":"text","text":"One last change you will need to make is anywhere you are destructuring the old-style action you"},{"type":"text","text":" "},{"type":"text","text":"will need to insert a "},{"code":".element","type":"codeVoice"},{"text":" layer:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"],"syntax":"diff"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.4"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.7","title":"Migrating to 1.7","kind":"article","abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"text":" ","type":"text"},{"type":"text","text":"APIs such as "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"text":", and more.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"role":"article","abstract":[{"text":"Update your code to use the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.11","type":"topic","title":"Migrating to 1.11","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"symbol","title":"ComposableArchitecture","type":"topic","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.13","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","title":"Migrating to 1.13"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","type":"topic","kind":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"kind":"text","text":"("},{"text":"id","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":") -> ","kind":"text"},{"text":"AnyCasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths03AnyA4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","title":"subscript(id:)","role":"symbol","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","title":"WithViewStore","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore","role":"symbol","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","type":"topic","title":"Identified actions","abstract":[],"kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ForEachStore"}],"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"text":" ","type":"text"},{"type":"text","text":"collections of state."}],"kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"title":"ForEachStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"kind":"symbol","title":"Effect","type":"topic","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","title":"TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"#Using-case-key-paths":{"titleInlineContent":[{"text":"Using case key paths","type":"text"}],"url":"#Using-case-key-paths","identifier":"#Using-case-key-paths","type":"link","title":"Using case key paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"role":"symbol","abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}],"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"ChildState","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","title":"scope(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol"},"http://github.com/pointfreeco/swift-case-paths":{"url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"link","titleInlineContent":[{"text":"CasePaths","type":"text"}],"title":"CasePaths","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","abstract":[{"text":"Update your code to make use of the new","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},{"type":"text","text":" method when you need to"},{"text":" ","type":"text"},{"text":"assert on the payload inside an action received.","type":"text"}],"role":"article","kind":"article","type":"topic","title":"Migrating to 1.6","url":"\/documentation\/composablearchitecture\/migratingto1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"navigatorTitle":[{"text":"StackAction","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"title":"StackAction","url":"\/documentation\/composablearchitecture\/stackaction","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","title":"dependency(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"type":"text","text":" "},{"text":"library so that they can be used in non-Composable Architecture applications. This a","type":"text"},{"text":" ","type":"text"},{"text":"backwards compatible change, but some new deprecations have been introduced.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.17","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","title":"Migrating to 1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"role":"article","abstract":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"type":"text","text":" type is now officially "},{"type":"codeVoice","code":"@MainActor"},{"text":" isolated.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.14","type":"topic","title":"Migrating to 1.14","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"kind":"symbol","title":"IfLetStore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"url":"\/documentation\/composablearchitecture\/reducer#Gotchas","abstract":[],"type":"topic","title":"Gotchas","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" "},{"type":"text","text":"property wrapper, and the "},{"type":"codeVoice","code":"appStorage"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":" persistence strategies."}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.10","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","title":"Migrating to 1.10"},"#Using-the-Reducer-macro":{"url":"#Using-the-Reducer-macro","type":"link","titleInlineContent":[{"text":"Using the @Reducer macro","type":"text"}],"title":"Using the @Reducer macro","identifier":"#Using-the-Reducer-macro"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"navigatorTitle":[{"text":"IdentifiedAction","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"title":"IdentifiedAction","url":"\/documentation\/composablearchitecture\/identifiedaction","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdentifiedAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"role":"symbol","title":"PresentationAction.presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","abstract":[{"type":"text","text":"An action sent to the associated, non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" presentation state."}],"type":"topic","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"presented"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.19":{"abstract":[{"text":"Store internals have been rewritten for performance and future features, and are now compatible with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s "},{"type":"codeVoice","code":"@StateObject"},{"text":" property wrapper.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.19","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","title":"Migrating to 1.19"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"type":"codeVoice","code":"Result"},{"text":" ","type":"text"},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskResult"}],"deprecated":true,"type":"topic","url":"\/documentation\/composablearchitecture\/taskresult","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","title":"TaskResult","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"abstract":[{"text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict","type":"text"},{"type":"text","text":" "},{"type":"text","text":"concurrency with no warnings or errors."}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.15","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","title":"Migrating to 1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" protocol for a type."}],"role":"symbol","title":"Reducer()","type":"topic","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"link","titleInlineContent":[{"text":"discussion","type":"text"}],"title":"discussion","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","url":"\/documentation\/composablearchitecture\/migratingto1.8","role":"article","type":"topic","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" macro, including automatic"},{"type":"text","text":" "},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"title":"Migrating to 1.8","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"kind":"symbol","title":"PresentationAction","abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:filePath:line:column:)-6zye8":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","kind":"symbol","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ElementState"},{"kind":"text","text":", "},{"text":"ElementAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"kind":"text","text":", "},{"preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","kind":"typeIdentifier","text":"IdentifiedArray"},{"kind":"text","text":"<"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ElementState"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ElementAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">\n"}],"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:filepath:line:column:)-6zye8","title":"forEach(_:action:element:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"abstract":[{"text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.17.1","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","title":"Migrating to 1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"role":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"type":"text","text":""},{"type":"text","text":" "},{"text":"method on ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" which gives a succinct syntax for sending actions with case key paths, and","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},{"text":" method for overriding dependencies.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.9","type":"topic","title":"Migrating to 1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.18":{"role":"article","abstract":[{"text":"Stores now automatically cancel their in-flight effects when they deallocate. And another UIKit","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigation helper has been introduced."}],"url":"\/documentation\/composablearchitecture\/migratingto1.18","type":"topic","title":"Migrating to 1.18","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy used with "},{"type":"codeVoice","code":"@Shared"},{"text":" now uses key-value observing instead of","type":"text"},{"text":" ","type":"text"},{"code":"NotificationCenter","type":"codeVoice"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.16","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","title":"Migrating to 1.16"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.12","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","title":"Migrating to 1.12"},"#Moving-off-of-TaskResult":{"url":"#Moving-off-of-TaskResult","type":"link","titleInlineContent":[{"text":"Moving off of ","type":"text"},{"type":"codeVoice","code":"TaskResult"}],"title":"Moving off of TaskResult","identifier":"#Moving-off-of-TaskResult"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","kind":"symbol","title":"Reducer"},"#Receiving-test-store-actions":{"url":"#Receiving-test-store-actions","type":"link","titleInlineContent":[{"text":"Receiving test store actions","type":"text"}],"title":"Receiving test store actions","identifier":"#Receiving-test-store-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","url":"\/documentation\/composablearchitecture\/migratingto1.5","role":"article","type":"topic","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference","isActive":true},{"type":"text","text":" operation on "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" ","type":"text"},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"title":"Migrating to 1.5","kind":"article"},"#Identified-actions":{"titleInlineContent":[{"type":"text","text":"Identified actions"}],"url":"#Identified-actions","identifier":"#Identified-actions","type":"link","title":"Identified actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"abstract":[{"text":"Learn how to upgrade your application to the newest version of the Composable Architecture.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/migrationguides","kind":"article","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","title":"Migration guides"}}}