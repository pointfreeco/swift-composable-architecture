{"kind":"symbol","abstract":[{"type":"text","text":"Adds a reducer to run when this reducer changes the given value in state."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer\/Reducer-Implementations"]]},"metadata":{"externalID":"s:22ComposableArchitecture7ReducerPAAE8onChange2of_AA03_OneC0Vyxqd__qd_0_Gqd__5StateQzc_qd_0_qd___qd__tctSQRd__AaBRd_0_6ActionQyd_0_AKRtzAIQyd_0_AJRSr0_lF::SYNTHESIZED::s:22ComposableArchitecture12EmptyReducerV","extendedModule":"ComposableArchitecture","role":"symbol","title":"onChange(of:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"onChange","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":", (","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_OnChangeReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", "},{"text":"R","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Instance Method","symbolKind":"method","modules":[{"name":"ComposableArchitecture"}]},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onChange"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"toValue"},{"kind":"text","text":": "},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" ("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":") -> "},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"@","kind":"attribute"},{"kind":"attribute","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","preciseIdentifier":"s:22ComposableArchitecture14ReducerBuilderO","text":"ReducerBuilder"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","kind":"typeIdentifier"},{"kind":"text","text":">"},{"text":" ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"reducer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" ("},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_OnChangeReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"V"},{"text":" : ","kind":"text"},{"text":"Equatable","preciseIdentifier":"s:SQ","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"R","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"text":" == ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"."},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"R"},{"text":".","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that returns a value from the given state.","type":"text"}]}],"name":"toValue"},{"name":"reducer","content":[{"type":"paragraph","inlineContent":[{"text":"A reducer builder closure to run when the value changes.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"oldValue"},{"text":": The old value that failed the comparison check.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"newValue"},{"type":"text","text":": The new value that failed the comparison check."}],"type":"paragraph"}]}]}]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"text":"A reducer that performs the logic when the state changes.","type":"text"}],"type":"paragraph"}]},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"onChange","type":"codeVoice"},{"type":"text","text":" operator is only capable of detecting changes made by the reducer"},{"type":"text","text":" "},{"type":"text","text":"it is directly attached to. It does not observe changes that are made from other actions,"},{"type":"text","text":" "},{"text":"such as parent actions.","type":"text"}]}],"type":"aside"},{"inlineContent":[{"type":"text","text":"Use this operator to trigger additional logic when a value changes, like when a"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":" makes a deeper change to a struct held in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Settings {","  struct State {","    @BindingState var userSettings: UserSettings","    \/\/ ...","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","    \/\/ ...","  }","","  var body: some Reducer<State, Action> {","    BindingReducer()","      .onChange(of: \\.userSettings.isHapticFeedbackEnabled) { oldValue, newValue in","        Reduce { state, action in","          .run { send in","            \/\/ Persist new value...","          }","        }","      }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"When the value changes, the new version of the closure will be called, so any captured values","type":"text"},{"text":" ","type":"text"},{"text":"will have their values from the time that the observed value has its new value. The system","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passes the old and new observed values into the closure."}],"type":"paragraph"},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Take care when applying "},{"type":"codeVoice","code":"onChange(of:)"},{"type":"text","text":" to a reducer, as it adds an equatable check"},{"type":"text","text":" "},{"type":"text","text":"for every action fed into it. Prefer applying it to leaf nodes, like "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"against values that are quick to equate."}]}],"type":"aside"}],"kind":"content"}],"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/emptyreducer\/onchange(of:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer\/onChange(of:_:)","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/state","abstract":[{"type":"text","text":"A type that holds the current state of the reducer."}],"required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"State"}],"title":"State"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EmptyReducer/onChange(of:_:)":{"title":"onChange(of:_:)","kind":"symbol","abstract":[{"type":"text","text":"Adds a reducer to run when this reducer changes the given value in state."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/emptyreducer\/onchange(of:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onChange"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"R"},{"text":">","kind":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer\/onChange(of:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EmptyReducer":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmptyReducer"}],"navigatorTitle":[{"text":"EmptyReducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/emptyreducer","abstract":[{"text":"A reducer that does nothing.","type":"text"}],"title":"EmptyReducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","title":"ComposableArchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EmptyReducer/Reducer-Implementations":{"title":"Reducer Implementations","kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/emptyreducer\/reducer-implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer\/Reducer-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","abstract":[{"text":"A result builder for combining reducers into a single reducer by running each, one after the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"other, and merging their effects."}],"type":"topic","title":"ReducerBuilder","url":"\/documentation\/composablearchitecture\/reducerbuilder","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"ReducerBuilder","kind":"identifier"}],"navigatorTitle":[{"text":"ReducerBuilder","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"role":"symbol","kind":"symbol","abstract":[{"text":"A type that holds all possible actions that cause the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"text":" of the reducer to change","type":"text"},{"text":" ","type":"text"},{"text":"and\/or kick off a side ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" that can communicate with the outside world."}],"url":"\/documentation\/composablearchitecture\/reducer\/action","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"text":"Action","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","required":true,"title":"Action"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"topic","abstract":[],"title":"Effect","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"title":"BindingReducer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingReducer","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","role":"symbol","abstract":[{"text":"A reducer that updates bindable state when it receives binding actions.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"title":"BindingState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingState","kind":"identifier"}],"deprecated":true,"role":"symbol","url":"\/documentation\/composablearchitecture\/bindingstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","type":"topic","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"text":"in SwiftUI views.","type":"text"}],"kind":"symbol"}}}