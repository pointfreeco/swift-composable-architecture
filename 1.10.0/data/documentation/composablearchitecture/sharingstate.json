{"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sharing state is the process of letting many features have access to the same data so that when any"},{"type":"text","text":" "},{"type":"text","text":"feature makes a change to this data it is instantly visible to every other feature. Such sharing can"},{"type":"text","text":" "},{"type":"text","text":"be really handy, but also does not play nicely with value types, which are copied rather than"},{"type":"text","text":" "},{"type":"text","text":"shared. Because the Composable Architecture highly prefers modeling domains with value types rather"},{"type":"text","text":" "},{"type":"text","text":"than reference types, sharing state can be tricky."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is why the library comes with a few tools for sharing state with many parts of your"},{"type":"text","text":" "},{"type":"text","text":"application. There are two main kinds of shared state in the library: explicitly passed state and"},{"type":"text","text":" "},{"type":"text","text":"persisted state. And there are 3 persistence strategies shipped with the library:"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"in-memory"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/inMemory(_:)","overridingTitle":"in-memory"},{"type":"text","text":","},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"user defaults"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b","overridingTitle":"user defaults"},{"type":"text","text":", and"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"file storage"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)","overridingTitle":"file storage"},{"type":"text","text":". You can also implement your own"},{"type":"text","text":" "},{"type":"text","text":"persistence strategy if you want to use something other than user defaults or the file system, such"},{"type":"text","text":" "},{"type":"text","text":"as SQLite."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Source-of-truth"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Explicit-shared-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Persisted-shared-state"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#In-memory"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#User-defaults"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#File-storage"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Custom-persistence"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Observing-changes-to-shared-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Initialization-rules"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Deriving-shared-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing-when-using-persistence"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing-when-using-custom-persistence-strategies"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Overriding-shared-state-in-tests"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#UI-Testing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing-tips"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Read-only-shared-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Type-safe-keys"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Shared-state-in-pre-observation-apps"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Gotchas-of-Shared"}]}]}]},{"anchor":"Source-of-truth","level":2,"type":"heading","text":"“Source of truth”"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First a quick discussion on defining exactly what “shared state” is. A common concept thrown around"},{"type":"text","text":" "},{"type":"text","text":"in architectural discussions is “single source of truth.” This is the idea that the complete state"},{"type":"text","text":" "},{"type":"text","text":"of an application, even its navigation, can be driven off a single piece of data. It’s a great idea,"},{"type":"text","text":" "},{"type":"text","text":"in theory, but in practice it can be quite difficult to completely embrace."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First of all, a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"single"}]},{"type":"text","text":" piece of data to drive "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" of application state is just not feasible."},{"type":"text","text":" "},{"type":"text","text":"There is a lot of state in an application that is fine to be local to a view and does not need"},{"type":"text","text":" "},{"type":"text","text":"global representation. For example, the state of whether a button is being pressed is probably fine"},{"type":"text","text":" "},{"type":"text","text":"to reside privately inside the button."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And second, applications typically do not have a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"single"}]},{"type":"text","text":" source of truth. That is far too"},{"type":"text","text":" "},{"type":"text","text":"simplistic. If your application loads data from an API, or from disk, or from user defaults, then"},{"type":"text","text":" "},{"type":"text","text":"the “truth” for that data does not lie in your application. It lies externally."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In reality, there are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"two"}]},{"type":"text","text":" sources of “truth” in any application. There is the state the"},{"type":"text","text":" "},{"type":"text","text":"application needs to execute its logic and behavior. This is the kind of state that determines if a"},{"type":"text","text":" "},{"type":"text","text":"button is enabled or disabled, drives navigation such as sheets and drill-downs, and handles"},{"type":"text","text":" "},{"type":"text","text":"validation of forms. Such state only makes sense for the application."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then there is a second source of “truth” in an application, which is the data that lies in some"},{"type":"text","text":" "},{"type":"text","text":"external system and needs to be loaded into the application. Such state is best modeled as a"},{"type":"text","text":" "},{"type":"text","text":"dependency or using the shared state tools discussed in this article."}]},{"anchor":"Explicit-shared-state","level":2,"type":"heading","text":"Explicit shared state"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the simplest kind of shared state to get start with. It allows you to share state amongst"},{"type":"text","text":" "},{"type":"text","text":"many features without any persistence. The data is only held in memory, and will be cleared out the"},{"type":"text","text":" "},{"type":"text","text":"next time the application is run."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To share data in this style, use the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" property wrapper with no arguments."},{"type":"text","text":" "},{"type":"text","text":"For example, suppose you have a feature that holds a count and you want to be able to hand a shared"},{"type":"text","text":" "},{"type":"text","text":"reference to that count to other features. You can do so by holding onto a "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property in"},{"type":"text","text":" "},{"type":"text","text":"the feature’s state:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct ParentFeature {","  @ObservableState","  struct State {","    @Shared var count: Int","    \/\/ Other properties","  }","  \/\/ ...","}"]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is not possible to provide a default to a "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" value. It must be passed to the"},{"type":"text","text":" "},{"type":"text","text":"feature’s state from the outside. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Initialization-rules"},{"type":"text","text":" for more"},{"type":"text","text":" "},{"type":"text","text":"information about how to initialize types that use "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":"."}]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then suppose that this feature can present a child feature that wants access to this shared "},{"type":"codeVoice","code":"count"},{"type":"text","text":" "},{"type":"text","text":"value. It too would hold onto an "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property to a count:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct ChildFeature {","  @ObservableState","  struct State {","    @Shared var count: Int","    \/\/ Other properties","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the parent features creates the child feature’s state, it can pass a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference"}]},{"type":"text","text":" to the shared"},{"type":"text","text":" "},{"type":"text","text":"count rather than the actual count value by using the "},{"type":"codeVoice","code":"$count"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/projectedValue"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["case .presentButtonTapped:","  state.child = ChildFeature.State(count: state.$count)","  \/\/ ..."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any mutation the "},{"type":"codeVoice","code":"ChildFeature"},{"type":"text","text":" makes to its "},{"type":"codeVoice","code":"count"},{"type":"text","text":" will be instantly made to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ParentFeature"},{"type":"text","text":"’s count too."}]},{"anchor":"Persisted-shared-state","level":2,"type":"heading","text":"Persisted shared state"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Explicitly shared state discussed above is a nice, lightweight way to share a piece of data with"},{"type":"text","text":" "},{"type":"text","text":"many parts of your application. However, sometimes you want to share state with the entire"},{"type":"text","text":" "},{"type":"text","text":"application without having to pass it around explicitly. One can do this by passing a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper, and the library comes with three persistence"},{"type":"text","text":" "},{"type":"text","text":"strategies, as well as the ability to create custom persistence strategies."}]},{"anchor":"In-memory","level":4,"type":"heading","text":"In-memory"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the simplest persistence strategy in that it doesn’t actually persist at all. It keeps"},{"type":"text","text":" "},{"type":"text","text":"the data in memory and makes it available to every part of the application, but when the app is"},{"type":"text","text":" "},{"type":"text","text":"relaunched the data will be reset back to its default."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be used by passing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/inMemory(_:)"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper."},{"type":"text","text":" "},{"type":"text","text":"For example, suppose you want to share an integer count value with the entire application so that"},{"type":"text","text":" "},{"type":"text","text":"any feature can read from and write to the integer. This can be done like so:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct ChildFeature {","  @ObservableState","  struct State {","    @Shared(.inMemory(\"count\")) var count = 0","    \/\/ Other properties","  }","  \/\/ ...","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When using a persistence strategy with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" you must provide a default value, which is"},{"type":"text","text":" "},{"type":"text","text":"used for the first access of the shared state."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any part of the application can read from and write to this state, and features will never"},{"type":"text","text":" "},{"type":"text","text":"get out of sync."}]},{"anchor":"User-defaults","level":4,"type":"heading","text":"User defaults"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you would like to persist your shared value across application launches, then you can use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b"},{"type":"text","text":" strategy with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" in order to automatically"},{"type":"text","text":" "},{"type":"text","text":"persist any changes to the value to user defaults. It works similarly to in-memory sharing discussed"},{"type":"text","text":" "},{"type":"text","text":"above. It requires a key to store the value in user defaults, as well as a default value that will"},{"type":"text","text":" "},{"type":"text","text":"be used when there is no value in the user defaults:"}]},{"type":"codeListing","syntax":"swift","code":["@Shared(.appStorage(\"count\")) var count = 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That small change will guarantee that all changes to "},{"type":"codeVoice","code":"count"},{"type":"text","text":" are persisted and will be"},{"type":"text","text":" "},{"type":"text","text":"automatically loaded the next time the application launches."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This form of persistence only works for simple data types because that is what works best with"},{"type":"text","text":" "},{"type":"codeVoice","code":"UserDefaults"},{"type":"text","text":". This includes strings, booleans, integers, doubles, URLs, data, and more. If you"},{"type":"text","text":" "},{"type":"text","text":"need to store more complex data, such as custom data types serialized to JSON, then you will want"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":".fileStorage"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#File-storage","overridingTitle":".fileStorage"},{"type":"text","text":" strategy or a"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"custom persistence"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Custom-persistence","overridingTitle":"custom persistence"},{"type":"text","text":" strategy."}]},{"anchor":"File-storage","level":4,"type":"heading","text":"File storage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you would like to persist your shared value across application launches, and your value is"},{"type":"text","text":" "},{"type":"text","text":"complex (such as a custom data type), then you can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":" "},{"type":"text","text":"strategy with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":". It automatically persists any changes to the file system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It works similarly to the in-memory sharing discussed above, but it requires a URL to store the data"},{"type":"text","text":" "},{"type":"text","text":"on disk, as well as a default value that will be used when there is no data in the file system:"}]},{"type":"codeListing","syntax":"swift","code":["@Shared(.fileStorage(URL(\/* ... *\/)) var users: [User] = []"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy works by serializing your value to JSON to save to disk, and then deserializing JSON"},{"type":"text","text":" "},{"type":"text","text":"when loading from disk. For this reason the value held in "},{"type":"codeVoice","code":"@Shared(.fileStorage(…))"},{"type":"text","text":" must conform to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}]},{"anchor":"Custom-persistence","level":4,"type":"heading","text":"Custom persistence"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to define all new persistence strategies for the times that user defaults or JSON"},{"type":"text","text":" "},{"type":"text","text":"files are not sufficient. To do so, define a type that conforms to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"},{"type":"text","text":" protocol:"}]},{"type":"codeListing","syntax":"swift","code":["public final class CustomPersistenceKey: PersistenceKey {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then define a static function on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"},{"type":"text","text":" protocol for creating your new"},{"type":"text","text":" "},{"type":"text","text":"persistence strategy:"}]},{"type":"codeListing","syntax":"swift","code":["extension PersistenceReaderKey {","  public static func custom<Value>(\/*...*\/) -> Self","  where Self == CustomPersistence<Value> {","    CustomPersistence(\/* ... *\/)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With those steps done you can make use of the strategy in the same way one does for"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@Shared(.custom(\/* ... *\/)) var myValue: Value"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"},{"type":"text","text":" protocol represents loading from "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" saving to some external storage,"},{"type":"text","text":" "},{"type":"text","text":"such as the file system or user defaults. Sometimes saving is not a valid operation for the external"},{"type":"text","text":" "},{"type":"text","text":"system, such as if your server holds onto a remote configuration file that your app uses to"},{"type":"text","text":" "},{"type":"text","text":"customize its appearance or behavior. In those situations you can conform to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey"},{"type":"text","text":" protocol. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Read-only-shared-state"},{"type":"text","text":" for more"},{"type":"text","text":" "},{"type":"text","text":"information."}]},{"anchor":"Observing-changes-to-shared-state","level":2,"type":"heading","text":"Observing changes to shared state"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" property wrapper exposes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/publisher"},{"type":"text","text":" property so that you can observe"},{"type":"text","text":" "},{"type":"text","text":"changes to the reference from any part of your application. For example, if some feature in your"},{"type":"text","text":" "},{"type":"text","text":"app wants to listen for changes to some shared "},{"type":"codeVoice","code":"count"},{"type":"text","text":" value, then it can introduce an "},{"type":"codeVoice","code":"onAppear"},{"type":"text","text":" "},{"type":"text","text":"action that kicks off a long-living effect that subscribes to changes of "},{"type":"codeVoice","code":"count"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["case .onAppear:","  return .publisher {","    state.$count.publisher","      .map(Action.countUpdated)","  }","","case .countUpdated(let count):","  \/\/ Do something with count","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you will have to be careful for features that both hold onto shared state and subscribe"},{"type":"text","text":" "},{"type":"text","text":"to changes to that state. It is possible to introduce an infinite loop if you do something like"},{"type":"text","text":" "},{"type":"text","text":"this:"}]},{"type":"codeListing","syntax":"swift","code":["case .onAppear:","  return .publisher {","    state.$count.publisher","      .map(Action.countUpdated)","  }","","case .countUpdated(let count):","  state.count = count + 1","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"count"},{"type":"text","text":" changes, then "},{"type":"codeVoice","code":"$count.publisher"},{"type":"text","text":" emits, causing the "},{"type":"codeVoice","code":"countUpdated"},{"type":"text","text":" action to be sent,"},{"type":"text","text":" "},{"type":"text","text":"causing the shared "},{"type":"codeVoice","code":"count"},{"type":"text","text":" to be mutated, causing "},{"type":"codeVoice","code":"$count.publisher"},{"type":"text","text":" to emit, and so on."}]},{"anchor":"Initialization-rules","level":2,"type":"heading","text":"Initialization rules"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the state sharing tools use property wrappers there are special rules that must be followed"},{"type":"text","text":" "},{"type":"text","text":"when writing custom initializers for your types. These rules apply to "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" kind of property"},{"type":"text","text":" "},{"type":"text","text":"wrapper, including those that ship with vanilla SwiftUI (e.g. "},{"type":"codeVoice","code":"@State"},{"type":"text","text":", "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":", etc.),"},{"type":"text","text":" "},{"type":"text","text":"but the rules can be quite confusing and so below we describe the various ways to initialize"},{"type":"text","text":" "},{"type":"text","text":"shared state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is common to need to provide a custom initializer to your feature’s"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" type, especially when modularizing. When using"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" in your "},{"type":"codeVoice","code":"State"},{"type":"text","text":" that can become complicated."},{"type":"text","text":" "},{"type":"text","text":"Depending on your exact situation you can do one of the following:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You are using non-persisted shared state (i.e. no argument is passed to "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":"), and the"},{"type":"text","text":" "},{"type":"text","text":"“source of truth” of the state lives with the parent feature. Then the initializer should take a"},{"type":"text","text":" "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" value and you can assign through the underscored property:"}]},{"type":"codeListing","syntax":"swift","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: Shared<Int>, \/* other fields *\/) {","    self._count = count","    \/\/ other assignments","  }","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You are using non-persisted shared state ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"type":"text","text":" no argument is passed to "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":"), and the"},{"type":"text","text":" "},{"type":"text","text":"“source of truth” of the state lives within the feature you are initializing. Then the initializer"},{"type":"text","text":" "},{"type":"text","text":"should take a plain, non-"},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" value and you construct the "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" value in the initializer:"}]},{"type":"codeListing","syntax":"swift","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: Int, \/* other fields *\/) {","    self._count = Shared(count)","    \/\/ other assignments","  }","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You are using a persistence strategy with shared state ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"type":"text","text":""},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"etc."}]},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"then the initializer should take a plain, non-"},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" value and you construct the "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" value in"},{"type":"text","text":" "},{"type":"text","text":"the initializer using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(wrappedValue:_:fileID:line:)-80rtq"},{"type":"text","text":" which takes a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"},{"type":"text","text":" as the second argument:"}]},{"type":"codeListing","syntax":"swift","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: Int, \/* other fields *\/) {","    self._count = Shared(wrappedValue: count, .appStorage(\"count\"))","    \/\/ other assignments","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration of "},{"type":"codeVoice","code":"count"},{"type":"text","text":" can use "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" without an argument because the persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy is specified in the initializer."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value passed to this initializer is only used if the external storage does not"},{"type":"text","text":" "},{"type":"text","text":"already have a value. If a value exists in the storage then it is not used. In fact, the"},{"type":"text","text":" "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" argument of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(wrappedValue:_:fileID:line:)-80rtq"},{"type":"text","text":" is an"},{"type":"text","text":" "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" so that it is not even evaluated if not used. For that reason you"},{"type":"text","text":" "},{"type":"text","text":"may prefer to make the argument to the initializer an "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" so that it too is evaluated"},{"type":"text","text":" "},{"type":"text","text":"only if actually used:"}]},{"type":"codeListing","syntax":"swift","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: @autoclosure () -> Int, \/* other fields *\/) {","    self._count = Shared(wrappedValue: count(), .appStorage(\"count\"))","    \/\/ other assignments","  }","}"]}],"type":"aside","name":"Important"}]}]},{"anchor":"Deriving-shared-state","level":2,"type":"heading","text":"Deriving shared state"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to derive shared state for sub-parts of an existing piece of shared state. For"},{"type":"text","text":" "},{"type":"text","text":"example, suppose you have a multi-step signup flow that uses "},{"type":"codeVoice","code":"Shared<SignUpData>"},{"type":"text","text":" in order to share"},{"type":"text","text":" "},{"type":"text","text":"data between each screen. However, some screens may not need all of "},{"type":"codeVoice","code":"SignUpData"},{"type":"text","text":", but instead just a"},{"type":"text","text":" "},{"type":"text","text":"small part. The phone number confirmation screen may only need access to "},{"type":"codeVoice","code":"signUpData.phoneNumber"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so that feature can hold onto just "},{"type":"codeVoice","code":"Shared<String>"},{"type":"text","text":" to express this fact:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer ","struct PhoneNumberFeature { ","  struct State {","    @Shared var phoneNumber: String","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, when the parent feature constructs the "},{"type":"codeVoice","code":"PhoneNumberFeature"},{"type":"text","text":" it can derive a small piece of"},{"type":"text","text":" "},{"type":"text","text":"shared state from "},{"type":"codeVoice","code":"Shared<SignUpData>"},{"type":"text","text":" to pass along:"}]},{"type":"codeListing","syntax":"swift","code":["case .nextButtonTapped:","  state.path.append(","    PhoneNumberFeature.State(phoneNumber: state.$signUpData.phoneNumber)","  )"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we are using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/projectedValue"},{"type":"text","text":" value using "},{"type":"codeVoice","code":"$"},{"type":"text","text":" syntax, "},{"type":"codeVoice","code":"$signUpData"},{"type":"text","text":", and then"},{"type":"text","text":" "},{"type":"text","text":"further dot-chaining onto that projection to derive a "},{"type":"codeVoice","code":"Shared<String>"},{"type":"text","text":". This can be a powerful way"},{"type":"text","text":" "},{"type":"text","text":"for features to hold onto only the bare minimum of shared state it needs to do its job."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be instructive to think of "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" as the Composable Architecture analogue of "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" "},{"type":"text","text":"in vanilla SwiftUI. You use it to express that the actual “source of truth” of the value lies"},{"type":"text","text":" "},{"type":"text","text":"elsewhere, but you want to be able to read its most current value and write to it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also works for persistence strategies. If a parent feature holds onto a "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" piece of"},{"type":"text","text":" "},{"type":"text","text":"state with a persistence strategy:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct ParentFeature {","  struct State {","    @Shared(.fileStorage(.currentUser)) var currentUser","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and a child feature wants access to just a shared "},{"type":"emphasis","inlineContent":[{"type":"text","text":"piece"}]},{"type":"text","text":" of "},{"type":"codeVoice","code":"currentUser"},{"type":"text","text":", such as their name,"},{"type":"text","text":" "},{"type":"text","text":"then they can do so by holding onto a simple, unadorned "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct ChildFeature {","  struct State {","    @Shared var currentUserName: String","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then the parent can pass along "},{"type":"codeVoice","code":"$currentUser.name"},{"type":"text","text":" to the child feature when constructing its"},{"type":"text","text":" "},{"type":"text","text":"state:"}]},{"type":"codeListing","syntax":"swift","code":["case .editNameButtonTapped:","  state.destination = .editName(","    EditNameFeature(name: state.$currentUser.name)","  )"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any changes the child feature makes to its shared "},{"type":"codeVoice","code":"name"},{"type":"text","text":" will be automatically made to the parent’s"},{"type":"text","text":" "},{"type":"text","text":"shared "},{"type":"codeVoice","code":"currentUser"},{"type":"text","text":", and further those changes will be automatically persisted thanks to the"},{"type":"text","text":" "},{"type":"codeVoice","code":".fileStorage"},{"type":"text","text":" persistence strategy used. This means the child feature gets to describe that it"},{"type":"text","text":" "},{"type":"text","text":"needs access to shared state without describing the persistence strategy, and the parent can be"},{"type":"text","text":" "},{"type":"text","text":"responsible for persisting and deriving shared state to pass to the child."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your shared state is a collection, and in particular an "},{"type":"codeVoice","code":"IdentifiedArray"},{"type":"text","text":", then we have another"},{"type":"text","text":" "},{"type":"text","text":"tool for deriving shared state to a particular element of the array. You can subscript into a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" collection with the "},{"type":"codeVoice","code":"[id:]"},{"type":"text","text":" subscript, and that will give a piece of optional shared"},{"type":"text","text":" "},{"type":"text","text":"state (thanks to a dynamic member overload "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/subscript(dynamicMember:)-7ibhr"},{"type":"text","text":"), which you"},{"type":"text","text":" "},{"type":"text","text":"can then unwrap to turn into honest shared state:"}]},{"type":"codeListing","syntax":"swift","code":["@Shared(.fileStorage(.todos)) var todos: IdentifiedArrayOf<Todo> = []","","guard let todo = $todos[id: todoID]","else { return }","todo \/\/ Shared<Todo>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is another tool for deriving shared state, and it is the computed property "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements"},{"type":"text","text":" "},{"type":"text","text":"that is defined on shared collections. It derives a collection of shared elements so that you can"},{"type":"text","text":" "},{"type":"text","text":"get access to a shared reference of just one particular element in a collection."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, it is only appropriate to use this in conjunction with "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" in order to derive a"},{"type":"text","text":" "},{"type":"text","text":"shared reference for each element of a collection:"}]},{"type":"codeListing","syntax":"swift","code":["struct State {","  @Shared(.fileStorage(.todos)) var todos: IdentifiedArrayOf<Todo> = []","  \/\/ ...","}","","\/\/ ...","","ForEach(store.$todos.elements) { $todo in","  NavigationLink(","    \/\/ $todo: Shared<Todo>","    \/\/  todo: Todo","    state: Path.State.todo(TodoFeature.State(todo: $todo))","  ) {","    Text(todo.title)","  }","}"]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We do not recommend using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements"},{"type":"text","text":" outside of using it with "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"List"},{"type":"text","text":", and other SwiftUI views that take collections."}]}],"type":"aside","name":"Important"},{"anchor":"Testing","level":2,"type":"heading","text":"Testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Shared state behaves quite a bit different from the regular state held in Composable Architecture"},{"type":"text","text":" "},{"type":"text","text":"features. It is capable of being changed by any part of the application, not just when an action is"},{"type":"text","text":" "},{"type":"text","text":"sent to the store, and it has reference semantics rather than value semantics. Typically references"},{"type":"text","text":" "},{"type":"text","text":"cause serious problems with testing, especially exhaustive testing that the library prefers (see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},{"type":"text","text":"), because references cannot be copied and so one cannot inspect the changes before and"},{"type":"text","text":" "},{"type":"text","text":"after an action is sent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this reason, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" property wrapper does extra work during testing to preserve a"},{"type":"text","text":" "},{"type":"text","text":"previous snapshot of the state so that one can still exhaustively assert on shared state, even"},{"type":"text","text":" "},{"type":"text","text":"though it is a reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the most part, shared state can be tested just like any regular state held in your features. For"},{"type":"text","text":" "},{"type":"text","text":"example, consider the following simple counter feature that uses in-memory shared state for the"},{"type":"text","text":" "},{"type":"text","text":"count:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer ","struct Feature {","  struct State: Equatable {","    @Shared var count: Int","  }","  enum Action {","    case incrementButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This feature can be tested in exactly the same way as when you are using non-shared state:"}]},{"type":"codeListing","syntax":"swift","code":["func testIncrement() async {","  let store = TestStore(initialState: Feature.State(count: Shared(0))) {","    Feature()","  }","","  await store.send(.incrementButtonTapped) {","    $0.count = 1","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test passes because we have described how the state changes. But even better, if we mutate the"},{"type":"text","text":" "},{"type":"codeVoice","code":"count"},{"type":"text","text":" incorrectly:"}]},{"type":"codeListing","syntax":"swift","code":["func testIncrement() async {","  let store = TestStore(initialState: Feature.State(count: Shared(0))) {","    Feature()","  }","","  await store.send(.incrementButtonTapped) {","    $0.count = 2","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…we immediately get a test failure letting us know exactly what went wrong:"}]},{"type":"codeListing","syntax":null,"code":["❌ State was not expected to change, but a change occurred: …","","    − Feature.State(_count: 2)","    + Feature.State(_count: 1)","","(Expected: −, Actual: +)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This works even though the "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" count is a reference type. The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" "},{"type":"text","text":"type work in unison to snapshot the state before and after the action is sent, allowing us to still"},{"type":"text","text":" "},{"type":"text","text":"assert in an exhaustive manner."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, exhaustively testing shared state is more complicated than testing non-shared state in"},{"type":"text","text":" "},{"type":"text","text":"features. Shared state can be captured in effects and mutated directly, without ever sending an"},{"type":"text","text":" "},{"type":"text","text":"action into system. This is in stark contrast to regular state, which can only ever be mutated when"},{"type":"text","text":" "},{"type":"text","text":"sending an action."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, it is possible to alter the "},{"type":"codeVoice","code":"incrementButtonTapped"},{"type":"text","text":" action so that it captures the"},{"type":"text","text":" "},{"type":"text","text":"shared state in an effect, and then increments from the effect:"}]},{"type":"codeListing","syntax":"swift","code":["case .incrementButtonTapped:","  return .run { [count = state.$count] _ in","    count.wrappedValue += 1","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The only reason this is possible is because "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" state is reference-like, and hence can"},{"type":"text","text":" "},{"type":"text","text":"technically be mutated from anywhere."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, how does this affect testing? Since the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" is no longer incremented directly in"},{"type":"text","text":" "},{"type":"text","text":"the reducer we can drop the trailing closure from the test store assertion:"}]},{"type":"codeListing","syntax":"swift","code":["func testIncrement() async {","  let store = TestStore(initialState: SimpleFeature.State(count: Shared(0))) {","    SimpleFeature()","  }","  await store.send(.incrementButtonTapped)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is technically correct, but we aren’t testing the behavior of the effect at all."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Luckily the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" has our back. If you run this test you will immediately get a failure"},{"type":"text","text":" "},{"type":"text","text":"letting you know that the shared count was mutated but we did not assert on the changes:"}]},{"type":"codeListing","syntax":null,"code":["❌ Tracked changes to 'Shared<Int>@MyAppTests\/FeatureTests.swift:10' but failed to assert: …","","  − 0","  + 1","","(Before: −, After: +)","","Call 'Shared<Int>.assert' to exhaustively test these changes, or call 'skipChanges' to ignore them."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to get this test passing we have to explicitly assert on the shared counter state at"},{"type":"text","text":" "},{"type":"text","text":"the end of the test, which we can do using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/assert(_:file:line:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"swift","code":["func testIncrement() async {","  let store = TestStore(initialState: SimpleFeature.State(count: Shared(0))) {","    SimpleFeature()","  }","  await store.send(.incrementButtonTapped)","  store.state.$count.assert {","    $0 = 1","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the test passes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, even though the "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" type opens our application up to a little bit more uncertainty due"},{"type":"text","text":" "},{"type":"text","text":"to its reference semantics, it is still possible to get exhaustive test coverage on its changes."}]},{"anchor":"Testing-when-using-persistence","level":4,"type":"heading","text":"Testing when using persistence"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to test when using one of the persistence strategies provided by the library,"},{"type":"text","text":" "},{"type":"text","text":"which are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":". Typically persistence is difficult to test because the"},{"type":"text","text":" "},{"type":"text","text":"persisted data bleeds over from test to test, making it difficult to exhaustively prove how each"},{"type":"text","text":" "},{"type":"text","text":"test behaves in isolation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But the "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" and "},{"type":"codeVoice","code":".fileStorage"},{"type":"text","text":" strategies do extra work to make sure that happens. By"},{"type":"text","text":" "},{"type":"text","text":"default the "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy uses a non-persisting user defaults so that changes are not"},{"type":"text","text":" "},{"type":"text","text":"actually persisted across test runs. And the "},{"type":"codeVoice","code":".fileStorage"},{"type":"text","text":" strategy uses a mock file system so that"},{"type":"text","text":" "},{"type":"text","text":"changes to state are not actually persisted to the file system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that if we altered the "},{"type":"codeVoice","code":"SimpleFeature"},{"type":"text","text":" of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Testing"},{"type":"text","text":" section above to"},{"type":"text","text":" "},{"type":"text","text":"use app storage:"}]},{"type":"codeListing","syntax":"swift","code":["struct State: Equatable {","  @Shared(.appStorage(\"count\")) var count: Int","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…then the test for this feature can be written in the same way as before and will still pass."}]},{"anchor":"Testing-when-using-custom-persistence-strategies","level":4,"type":"heading","text":"Testing when using custom persistence strategies"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When creating your own custom persistence strategies you must careful to do so in a style that"},{"type":"text","text":" "},{"type":"text","text":"is amenable to testing. For example, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b"},{"type":"text","text":" persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy that comes with the library injects a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultAppStorage"},{"type":"text","text":" "},{"type":"text","text":"dependency so that one can inject a custom "},{"type":"codeVoice","code":"UserDefaults"},{"type":"text","text":" in order to execute in a controlled"},{"type":"text","text":" "},{"type":"text","text":"environment. By default "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultAppStorage"},{"type":"text","text":" uses a non-persisting"},{"type":"text","text":" "},{"type":"text","text":"user defaults, but you can also customize it to use any kind of defaults."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":" persistence strategy uses an internal"},{"type":"text","text":" "},{"type":"text","text":"dependency for changing how files are written to the disk and loaded from disk. In tests the"},{"type":"text","text":" "},{"type":"text","text":"dependency will forgo any interaction with the file system and instead write data to a "},{"type":"codeVoice","code":"[URL: Data]"},{"type":"text","text":" "},{"type":"text","text":"dictionary, and load data from that dictionary. That emulates how the file system works, but without"},{"type":"text","text":" "},{"type":"text","text":"persisting any data to the global file system, which can bleed over into other tests."}]},{"anchor":"Overriding-shared-state-in-tests","level":4,"type":"heading","text":"Overriding shared state in tests"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When testing features that use "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" with a persistence strategy you may want to set the initial"},{"type":"text","text":" "},{"type":"text","text":"value of that state for the test. Typically this can be done by declaring the shared state at"},{"type":"text","text":" "},{"type":"text","text":"the beginning of the test so that its default value can be specified:"}]},{"type":"codeListing","syntax":"swift","code":["func testFeature() {","  @Shared(.appStorage(\"count\")) var count = 42","","  \/\/ Shared state will be 42 for all features using it.","  let store = TestStore(…)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if your test suite is apart of an app target, then the entry point of the app will execute"},{"type":"text","text":" "},{"type":"text","text":"and potentially cause an early access of "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":", thus capturing a different default value than"},{"type":"text","text":" "},{"type":"text","text":"what is specified above. This quirk of tests in app targets is documented in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-gotchas"},{"type":"text","text":" of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},{"type":"text","text":" article, and a similar quirk exists for Xcode"},{"type":"text","text":" "},{"type":"text","text":"previews and is discussed below in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Gotchas-of-Shared"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most robust workaround to this issue is to simply not execute your app’s entry point when tests"},{"type":"text","text":" "},{"type":"text","text":"are running, which we detail in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-host-application"},{"type":"text","text":". This makes it so that you"},{"type":"text","text":" "},{"type":"text","text":"are not accidentally execute network requests, tracking analytics, etc. while running tests."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also work around this issue by simply setting the shared state again after initializing"},{"type":"text","text":" "},{"type":"text","text":"it:"}]},{"type":"codeListing","syntax":"swift","code":["func testFeature() {","  @Shared(.appStorage(\"count\")) var count = 42","  count = 42  \/\/ NB: Set again to override any value set by the app target.","","  \/\/ Shared state will be 42 for all features using it.","  let store = TestStore(…)","}"]},{"anchor":"UI-Testing","level":4,"type":"heading","text":"UI Testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When UI testing your app you must take extra care so that shared state is not persisted across"},{"type":"text","text":" "},{"type":"text","text":"app runs because that can cause one test to bleed over into another test, making it difficult to"},{"type":"text","text":" "},{"type":"text","text":"write deterministic tests that always pass. To fix this, you can set an environment value from"},{"type":"text","text":" "},{"type":"text","text":"your UI test target, and then if that value is present in the app target you can override the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultAppStorage"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultFileStorage"},{"type":"text","text":" dependencies so that they use in-memory"},{"type":"text","text":" "},{"type":"text","text":"storage, i.e. they do not persist ever:"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct EntryPoint: App {","  let store = Store(initialState: AppFeature.State()) {","    AppFeature()","  } withDependencies: {","    if ProcessInfo.processInfo.environment[\"UITesting\"] == \"true\" {","      $0.defaultAppStorage = UserDefaults(","        suiteName:\"\\(NSTemporaryDirectory())\\(UUID().uuidString)\"","      )!","      $0.defaultFileStorage = .inMemory","    }","  }","}"]},{"anchor":"Testing-tips","level":4,"type":"heading","text":"Testing tips"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is something you can do to make testing features with shared state more robust and catch"},{"type":"text","text":" "},{"type":"text","text":"more potential future problems when you refactor your code. Right now suppose you have two features"},{"type":"text","text":" "},{"type":"text","text":"using "},{"type":"codeVoice","code":"@Shared(.appStorage(\"count\"))"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature1 {","  struct State {","    @Shared(.appStorage(\"count\")) var count = 0","  }","  \/\/ ...","}","","@Reducer","struct Feature2 {","  struct State {","    @Shared(.appStorage(\"count\")) var count = 0","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And suppose you wrote a test that proves one of these counts is incremented when a button is tapped:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.feature1(.buttonTapped)) {","  $0.feature1.count = 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because both features are using "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" you can be sure that both counts are kept in sync, and"},{"type":"text","text":" "},{"type":"text","text":"so you do not need to assert on "},{"type":"codeVoice","code":"feature2.count"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if someday during a long, complex refactor you accidentally removed "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" from"},{"type":"text","text":" "},{"type":"text","text":"the second feature:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature2 {","  struct State {","    var count = 0","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…then all of your code would continue compiling, and the test would still pass, but you may have"},{"type":"text","text":" "},{"type":"text","text":"introduced a bug by not having these two pieces of state in sync anymore."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You could also fix this by forcing yourself to assert on all shared state in your features, even"},{"type":"text","text":" "},{"type":"text","text":"though technically it’s not necessary:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.feature1(.buttonTapped)) {","  $0.feature1.count = 1","  $0.feature2.count = 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are worried about these kinds of bugs you can make your tests more robust by not asserting"},{"type":"text","text":" "},{"type":"text","text":"on the shared state in the argument handed to the trailing closure of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"send"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"instead capture a reference to the shared state in the test and mutate it in the trailing"},{"type":"text","text":" "},{"type":"text","text":"closure:"}]},{"type":"codeListing","syntax":"swift","code":["func testIncrement() async {","  @Shared(.appStorage(\"count\")) var count = 0","  let store = TestStore(initialState: ParentFeature.State()) {","    ParentFeature()","  }","","  await store.send(.feature1(.buttonTapped)) {","    \/\/ Mutate $0 to expected value.","    count = 1","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will fail if you accidetally remove a "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" from one of your features."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, you can enforce this pattern in your codebase by making all "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" properties"},{"type":"text","text":" "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" so that they can never be mutated outside their file scope:"}]},{"type":"codeListing","syntax":"swift","code":["struct State {","  @Shared(.appStorage(\"count\")) fileprivate var count = 0","}"]},{"anchor":"Read-only-shared-state","level":2,"type":"heading","text":"Read-only shared state"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" property wrapper described above gives you access to a piece of shared"},{"type":"text","text":" "},{"type":"text","text":"state that is both readable and writable. That is by far the most common use case when it comes to"},{"type":"text","text":" "},{"type":"text","text":"shared state, but there are times when one wants to express access to shared state for which you"},{"type":"text","text":" "},{"type":"text","text":"are not allowed to write to it, or possibly it doesn’t even make sense to write to it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For those times there is the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@SharedReader"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","overridingTitle":"@SharedReader"},{"type":"text","text":" property wrapper. It represents"},{"type":"text","text":" "},{"type":"text","text":"a reference to some piece of state shared with multiple parts of the application, but you are not"},{"type":"text","text":" "},{"type":"text","text":"allowed to write to it. Every persistence strategy discussed above works with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"however if you try to mutate the state you will get a compiler error:"}]},{"type":"codeListing","syntax":"swift","code":["@SharedReader(.appStorage(\"isOn\")) var isOn = false","isOn = true  \/\/ 🛑"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to make custom persistence strategies that only have the notion of loading and"},{"type":"text","text":" "},{"type":"text","text":"subscribing, but cannot write. To do this you will conform only to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey"},{"type":"text","text":" "},{"type":"text","text":"protocol instead of the full "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you could create a "},{"type":"codeVoice","code":".remoteConfig"},{"type":"text","text":" strategy that loads (and subscribes to) a remote"},{"type":"text","text":" "},{"type":"text","text":"configuration file held on your server so that it is kept automatically in sync:"}]},{"type":"codeListing","syntax":"swift","code":["@SharedReader(.remoteConfig) var remoteConfig"]},{"anchor":"Type-safe-keys","level":2,"type":"heading","text":"Type-safe keys"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to the nature of persisting data to external systems, you lose some type safety when shuffling"},{"type":"text","text":" "},{"type":"text","text":"data from your app to the persistence storage and back. For example, if you are using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":" strategy to save an array of users to disk you might do so"},{"type":"text","text":" "},{"type":"text","text":"like this:"}]},{"type":"codeListing","syntax":"swift","code":["extension URL {","  static let users = URL(\/* ... *\/))","}","","@Shared(.fileStorage(.users)) var users: [User] = []"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And say you have used this file storage users in multiple places throughout your application."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But then, someday in the future you may decide to refactor this data to be an identified array"},{"type":"text","text":" "},{"type":"text","text":"instead of a plain array:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Somewhere else in the application","@Shared(.fileStorage(.users)) var users: IdentifiedArrayOf<User> = []"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But if you forget to convert "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" shared user arrays to the new identified array your application"},{"type":"text","text":" "},{"type":"text","text":"will still compile, but it will be broken. The two types of storage will not share state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To add some type-safety and reusability to this process you can extend the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey"},{"type":"text","text":" "},{"type":"text","text":"protocol to add a static variable for describing the details of your persistence:"}]},{"type":"codeListing","syntax":"swift","code":["extension PersistenceReaderKey where Self == FileStorageKey<IdentifiedArrayOf<User>> {","  static var users: Self {","    fileStorage(.users)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then when using "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" you can specify this key directly without "},{"type":"codeVoice","code":".fileStorage"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@Shared(.users) var users: IdentifiedArrayOf<User> = []"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And now that the type is baked into the key you cannot accidentally use the wrong type because you"},{"type":"text","text":" "},{"type":"text","text":"will get an immediate compiler error:"}]},{"type":"codeListing","syntax":"swift","code":["@Shared(.users) var users = [User]()"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cannot convert value of type ‘[User]’ to expected argument type ‘IdentifiedArrayOf"},{"type":"text","text":"’"}]}],"type":"aside","name":"🛑 Error"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique works for all types of persistence strategies. For example, a type-safe "},{"type":"codeVoice","code":".inMemory"},{"type":"text","text":" "},{"type":"text","text":"key can be constructed like so:"}]},{"type":"codeListing","syntax":"swift","code":["extension PersistenceReaderKey where Self == InMemoryKey<IdentifiedArrayOf<User>> {","  static var users: Self {","    inMemory(\"users\")","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And a type-safe "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" key can be constructed like so:"}]},{"type":"codeListing","syntax":"swift","code":["extension PersistenceReaderKey where Self == AppStorageKey<Int> {","  static var count: Self {","    appStorage(\"count\")","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And this technique also works on "},{"overridingTitleInlineContent":[{"type":"text","text":"custom persistence"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Custom-persistence","overridingTitle":"custom persistence"},{"type":"text","text":" "},{"type":"text","text":"strategies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, you can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKeyDefault"},{"type":"text","text":" type to also provide a default that is used"},{"type":"text","text":" "},{"type":"text","text":"with the persistence strategy. For example, to use a default value of "},{"type":"codeVoice","code":"[]"},{"type":"text","text":" with the "},{"type":"codeVoice","code":".users"},{"type":"text","text":" "},{"type":"text","text":"persistence strategy described above, we can do the following:"}]},{"type":"codeListing","syntax":"swift","code":["extension PersistenceReaderKey ","where Self == PersistenceKeyDefault<FileStorageKey<IdentifiedArrayOf<User>>>","{","  static var users: Self {","    PersistenceKeyDefault(.fileStorage(.users), [])","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And now anytime you reference the shared users state you can leave off the default value, and"},{"type":"text","text":" "},{"type":"text","text":"you can even leave off the type annotation:"}]},{"type":"codeListing","syntax":"swift","code":["@Shared(.users) var users"]},{"anchor":"Shared-state-in-pre-observation-apps","level":2,"type":"heading","text":"Shared state in pre-observation apps"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to use "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" in features that have not yet been updated with"},{"type":"text","text":" "},{"type":"text","text":"the observation tools released in 1.7, such as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro. In the reducer"},{"type":"text","text":" "},{"type":"text","text":"you can use "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" regardless of your use of the observation tools."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if you are deploying to iOS 16 or earlier, then you must use "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" "},{"type":"text","text":"in your views if you are accessing shared state. For example, the following view:"}]},{"type":"codeListing","syntax":"swift","code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    Form {","      Text(store.sharedCount.description)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…will not update properly when "},{"type":"codeVoice","code":"sharedCount"},{"type":"text","text":" changes. This view will even generate a runtime warning"},{"type":"text","text":" "},{"type":"text","text":"letting you know something is wrong:"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Perceptible state was accessed but is not being tracked. Track changes to"},{"type":"text","text":" "},{"type":"text","text":"state by wrapping your view in a ‘WithPerceptionTracking’ view."}]}],"type":"aside","name":"🟣 Runtime Warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fix is to wrap the body of the view in "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(store.sharedCount.description)","      }","    }","  }","}"]},{"anchor":"Gotchas-of-Shared","level":2,"type":"heading","text":"Gotchas of @Shared"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using shared state in the Composable Architecture."}]},{"anchor":"Hashability","level":4,"type":"heading","text":"Hashability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" type is equatable based on its wrapped value, and because the value is held in a reference and can change over time, it cannot be hashable. This also means that types containing "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" properties should not compute their hashes from shared values."}]},{"anchor":"Codability","level":4,"type":"heading","text":"Codability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" type is not conditionally encodable or decodable because the source of truth of the wrapped value is rarely local: it might be derived from some other shared value, or it might rely on loading the value from a backing persistence strategy."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When introducing shared state to a data type that is encodable or decodable, you must provide your own implementations of "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" that do the appropriate thing."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if the data type is sharing state with a persistence strategy, you can decode by delegating to the memberwise initializer that implicitly loads the shared value from the property wrapper’s persistence strategy, or you can explicitly initialize a shared value via "},{"type":"codeVoice","code":"Shared\/init(wrappedValue:_:fileID:line:)"},{"type":"text","text":". And for encoding you can often skip encoding the shared value:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppState {","  @Shared(.appStorage(\"launchCount\")) var launchCount = 0","  var todos: [String] = []","}","","extension AppState: Codable {","  enum CodingKeys: String, CodingKey { case todos }","","  init(from decoder: any Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","","    \/\/ Use the property wrapper default via the memberwise initializer:","    try self.init(","      todos: container.decode([String].self, forKey: .todos)","    )","","    \/\/ Or initialize the shared storage manually:","    self._launchCount = Shared(wrappedValue: 0, .appStorage(\"launchCount\"))","    self.todos = try container.decode([String].self, forKey: .todos)","  }","","  func encode(to encoder: any Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","    try container.encode(self.todos, forKey: .todos)","    \/\/ Skip encoding the launch count.","  }","}"]},{"anchor":"Previews","level":4,"type":"heading","text":"Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a preview is run in an app target, the entry point is also created. This means if your entry"},{"type":"text","text":" "},{"type":"text","text":"point looks something like this:"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MainApp: App {","  let store = Store(…)","","  var body: some Scene {","    …","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…then a store will be created each time you run your preview. This can be problematic with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" "},{"type":"text","text":"and persistence strategies because the first access of a "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property will use the default"},{"type":"text","text":" "},{"type":"text","text":"value provided, and that will cause "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":"’s created later to ignore the default. That will mean"},{"type":"text","text":" "},{"type":"text","text":"you cannot override shared state in previews."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fix is to delay creation of the store until the entry point’s "},{"type":"codeVoice","code":"body"},{"type":"text","text":" is executed. Further, it"},{"type":"text","text":" "},{"type":"text","text":"can be a good idea to also not run the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" when in tests because that can also interfere with"},{"type":"text","text":" "},{"type":"text","text":"tests (as documented in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-gotchas"},{"type":"text","text":"). Here is one way this can be accomplished:"}]},{"type":"codeListing","syntax":"swift","code":["import ComposableArchitecture","import SwiftUI","","@main","struct MainApp: App {","  @MainActor","  static let store = Store(…)","","  var body: some Scene {","    WindowGroup {","      if _XCTIsTesting {","        \/\/ NB: Don't run application in tests to avoid interference ","        \/\/     between the app and the test.","        EmptyView()","      } else {","        AppView(store: Self.store)","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively you can take an extra step to override shared state in your previews:"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","  @Shared(.appStorage(\"isOn\")) var isOn = true","  isOn = true","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second assignment of "},{"type":"codeVoice","code":"isOn"},{"type":"text","text":" will guarantee that it holds a value of "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/sharingstate"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"type":"text","text":" "},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"kind":"article","metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"collectionGroup","title":"Sharing state"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"]]},"topicSections":[{"title":"Essentials","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"]},{"title":"Persistence strategies","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/InMemoryKey"]},{"title":"Custom persistence","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"]},{"title":"Read-only persistence","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/subscript(dynamicMember:)-7ibhr":{"role":"symbol","title":"subscript(dynamicMember:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Member"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Member"},{"kind":"text","text":"?>) -> "},{"kind":"typeIdentifier","text":"Shared","preciseIdentifier":"s:22ComposableArchitecture6SharedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Member"},{"kind":"text","text":">?"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/subscript(dynamicMember:)-7ibhr","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/subscript(dynamicmember:)-7ibhr"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/publisher":{"role":"symbol","title":"publisher","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyPublisher","preciseIdentifier":"s:7Combine12AnyPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/publisher","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/publisher"},"#Testing":{"title":"Testing","titleInlineContent":[{"type":"text","text":"Testing"}],"type":"link","identifier":"#Testing","url":"#Testing"},"#UI-Testing":{"title":"UI Testing","titleInlineContent":[{"type":"text","text":"UI Testing"}],"type":"link","identifier":"#UI-Testing","url":"#UI-Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Testing-host-application":{"abstract":[],"title":"Testing host application","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-host-application","url":"\/documentation\/composablearchitecture\/testing#Testing-host-application"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"role":"article","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement"},"#Persisted-shared-state":{"title":"Persisted shared state","titleInlineContent":[{"type":"text","text":"Persisted shared state"}],"type":"link","identifier":"#Persisted-shared-state","url":"#Persisted-shared-state"},"#Gotchas-of-Shared":{"title":"Gotchas of @Shared","titleInlineContent":[{"type":"text","text":"Gotchas of @Shared"}],"type":"link","identifier":"#Gotchas-of-Shared","url":"#Gotchas-of-Shared"},"#File-storage":{"title":"File storage","titleInlineContent":[{"type":"text","text":"File storage"}],"type":"link","identifier":"#File-storage","url":"#File-storage"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Read-only-shared-state":{"abstract":[],"title":"Read-only shared state","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Read-only-shared-state","url":"\/documentation\/composablearchitecture\/sharingstate#Read-only-shared-state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Dependencies/DependencyValues/defaultAppStorage":{"role":"symbol","title":"defaultAppStorage","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"defaultAppStorage"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UserDefaults","preciseIdentifier":"c:objc(cs)NSUserDefaults"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultAppStorage","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/dependencies\/dependencyvalues\/defaultappstorage"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/assert(_:file:line:)":{"role":"symbol","title":"assert(_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"assert"},{"kind":"text","text":"(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/assert(_:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/assert(_:file:line:)"},"#In-memory":{"title":"In-memory","titleInlineContent":[{"type":"text","text":"In-memory"}],"type":"link","identifier":"#In-memory","url":"#In-memory"},"#Read-only-shared-state":{"title":"Read-only shared state","titleInlineContent":[{"type":"text","text":"Read-only shared state"}],"type":"link","identifier":"#Read-only-shared-state","url":"#Read-only-shared-state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/projectedValue":{"role":"symbol","title":"projectedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"projectedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Shared","preciseIdentifier":"s:22ComposableArchitecture6SharedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A projection of the shared value that returns a shared reference."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/projectedValue","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/projectedvalue"},"#Testing-when-using-custom-persistence-strategies":{"title":"Testing when using custom persistence strategies","titleInlineContent":[{"type":"text","text":"Testing when using custom persistence strategies"}],"type":"link","identifier":"#Testing-when-using-custom-persistence-strategies","url":"#Testing-when-using-custom-persistence-strategies"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducers":{"role":"collectionGroup","title":"Reducers","abstract":[{"type":"text","text":"Learn about one of the most fundamental tools in the Composable Architecture: the reducer. It is"},{"type":"text","text":" "},{"type":"text","text":"responsible for evolving the state of your application forward when an action is sent, and"},{"type":"text","text":" "},{"type":"text","text":"constructing effects that are executed in the outside world."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"role":"collectionGroup","title":"Navigation","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/navigation"},"#User-defaults":{"title":"User defaults","titleInlineContent":[{"type":"text","text":"User defaults"}],"type":"link","identifier":"#User-defaults","url":"#User-defaults"},"#Custom-persistence":{"title":"Custom persistence","titleInlineContent":[{"type":"text","text":"Custom persistence"}],"type":"link","identifier":"#Custom-persistence","url":"#Custom-persistence"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"#Explicit-shared-state":{"title":"Explicit shared state","titleInlineContent":[{"type":"text","text":"Explicit shared state"}],"type":"link","identifier":"#Explicit-shared-state","url":"#Explicit-shared-state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Dependencies/DependencyValues/defaultFileStorage":{"role":"symbol","title":"defaultFileStorage","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"defaultFileStorage"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileStorage","preciseIdentifier":"s:22ComposableArchitecture11FileStorageV"}],"abstract":[{"type":"text","text":"Default file storage used by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultFileStorage","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/dependencies\/dependencyvalues\/defaultfilestorage"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"role":"symbol","title":"ObservableState()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/init(wrappedValue:_:fileID:line:)-80rtq":{"role":"symbol","title":"init(wrappedValue:_:fileID:line:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", some "},{"kind":"typeIdentifier","text":"PersistenceKey","preciseIdentifier":"s:22ComposableArchitecture14PersistenceKeyP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(wrappedValue:_:fileID:line:)-80rtq","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/init(wrappedvalue:_:fileid:line:)-80rtq"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"role":"symbol","title":"Shared","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Shared"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"url":"\/documentation\/composablearchitecture\/shared"},"#Testing-when-using-persistence":{"title":"Testing when using persistence","titleInlineContent":[{"type":"text","text":"Testing when using persistence"}],"type":"link","identifier":"#Testing-when-using-persistence","url":"#Testing-when-using-persistence"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Initialization-rules":{"abstract":[],"title":"Initialization rules","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Initialization-rules","url":"\/documentation\/composablearchitecture\/sharingstate#Initialization-rules"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#File-storage":{"abstract":[],"title":"File storage","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#File-storage","url":"\/documentation\/composablearchitecture\/sharingstate#File-storage"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"role":"symbol","title":"FileStorageKey","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileStorageKey"}],"abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FileStorageKey"}],"url":"\/documentation\/composablearchitecture\/filestoragekey"},"#Testing-tips":{"title":"Testing tips","titleInlineContent":[{"type":"text","text":"Testing tips"}],"type":"link","identifier":"#Testing-tips","url":"#Testing-tips"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/fileStorage(_:)":{"role":"symbol","title":"fileStorage(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fileStorage"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"URL","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Creates a persistence key that can read and write to a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value to the file system."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/filestorage(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceKeyDefault":{"role":"symbol","title":"PersistenceKeyDefault","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PersistenceKeyDefault"}],"abstract":[{"type":"text","text":"A persistence key that provides a default value to an existing persistence key."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKeyDefault","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PersistenceKeyDefault"}],"url":"\/documentation\/composablearchitecture\/persistencekeydefault"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceKey":{"role":"symbol","title":"PersistenceKey","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PersistenceKey"}],"abstract":[{"type":"text","text":"A type that can persist shared state to an external storage."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PersistenceKey"}],"url":"\/documentation\/composablearchitecture\/persistencekey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/inMemory(_:)":{"role":"symbol","title":"inMemory(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"inMemory"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Creates a persistence key for sharing data in-memory for the lifetime of an application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/inMemory(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/inmemory(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Testing-gotchas":{"abstract":[],"title":"Testing gotchas","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-gotchas","url":"\/documentation\/composablearchitecture\/testing#Testing-gotchas"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Custom-persistence":{"abstract":[],"title":"Custom persistence","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Custom-persistence","url":"\/documentation\/composablearchitecture\/sharingstate#Custom-persistence"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"role":"symbol","title":"AppStorageKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppStorageKey"}],"abstract":[{"type":"text","text":"A type defining a user defaults persistence strategy."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AppStorageKey"}],"url":"\/documentation\/composablearchitecture\/appstoragekey"},"#Shared-state-in-pre-observation-apps":{"title":"Shared state in pre-observation apps","titleInlineContent":[{"type":"text","text":"Shared state in pre-observation apps"}],"type":"link","identifier":"#Shared-state-in-pre-observation-apps","url":"#Shared-state-in-pre-observation-apps"},"#Deriving-shared-state":{"title":"Deriving shared state","titleInlineContent":[{"type":"text","text":"Deriving shared state"}],"type":"link","identifier":"#Deriving-shared-state","url":"#Deriving-shared-state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/GettingStarted":{"role":"article","title":"Getting started","abstract":[{"type":"text","text":"Learn how to integrate the Composable Architecture into your project and write your first"},{"type":"text","text":" "},{"type":"text","text":"application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/gettingstarted"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader":{"role":"symbol","title":"SharedReader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedReader"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SharedReader"}],"url":"\/documentation\/composablearchitecture\/sharedreader"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey":{"role":"symbol","title":"PersistenceReaderKey","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PersistenceReaderKey"}],"abstract":[{"type":"text","text":"A type that can load and subscribe to state in an external system."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PersistenceReaderKey"}],"url":"\/documentation\/composablearchitecture\/persistencereaderkey"},"#Observing-changes-to-shared-state":{"title":"Observing changes to shared state","titleInlineContent":[{"type":"text","text":"Observing changes to shared state"}],"type":"link","identifier":"#Observing-changes-to-shared-state","url":"#Observing-changes-to-shared-state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Gotchas-of-Shared":{"abstract":[],"title":"Gotchas of @Shared","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Gotchas-of-Shared","url":"\/documentation\/composablearchitecture\/sharingstate#Gotchas-of-Shared"},"#Overriding-shared-state-in-tests":{"title":"Overriding shared state in tests","titleInlineContent":[{"type":"text","text":"Overriding shared state in tests"}],"type":"link","identifier":"#Overriding-shared-state-in-tests","url":"#Overriding-shared-state-in-tests"},"#Initialization-rules":{"title":"Initialization rules","titleInlineContent":[{"type":"text","text":"Initialization rules"}],"type":"link","identifier":"#Initialization-rules","url":"#Initialization-rules"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"role":"symbol","title":"State","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"}],"abstract":[{"type":"text","text":"A type that holds the current state of the reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"role":"article","title":"Testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/testing"},"#Type-safe-keys":{"title":"Type-safe keys","titleInlineContent":[{"type":"text","text":"Type-safe keys"}],"type":"link","identifier":"#Type-safe-keys","url":"#Type-safe-keys"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/InMemoryKey":{"role":"symbol","title":"InMemoryKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InMemoryKey"}],"abstract":[{"type":"text","text":"A type defining an in-memory persistence strategy"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/InMemoryKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InMemoryKey"}],"url":"\/documentation\/composablearchitecture\/inmemorykey"},"#Source-of-truth":{"title":"“Source of truth”","titleInlineContent":[{"type":"text","text":"“Source of truth”"}],"type":"link","identifier":"#Source-of-truth","url":"#Source-of-truth"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Testing":{"abstract":[],"title":"Testing","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Testing","url":"\/documentation\/composablearchitecture\/sharingstate#Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/appStorage(_:)-4l5b":{"role":"symbol","title":"appStorage(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"appStorage"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Creates a persistence key that can read and write to a boolean user default."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/appstorage(_:)-4l5b"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/elements":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"MutableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value.Index"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Value.Index"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"elements","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"elements"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"RandomAccessCollection","preciseIdentifier":"s:Sk"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Shared","preciseIdentifier":"s:22ComposableArchitecture6SharedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">>"}],"abstract":[{"type":"text","text":"Allows a "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" view to transform a shared collection into shared elements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/elements"}}}