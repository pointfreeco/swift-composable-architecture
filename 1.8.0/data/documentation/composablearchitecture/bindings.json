{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many APIs in SwiftUI use bindings to set up two-way communication between your application’s state"},{"type":"text","text":" "},{"type":"text","text":"and a view. The Composable Architecture provides several tools for creating bindings that establish"},{"type":"text","text":" "},{"type":"text","text":"such communication with your application’s store."}]},{"anchor":"Ad-hoc-bindings","level":3,"type":"heading","text":"Ad hoc bindings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest tool for creating bindings that communicate with your store is to create a dedicated"},{"type":"text","text":" "},{"type":"text","text":"action that can change a piece of state in your feature. For example, a reducer may have a domain"},{"type":"text","text":" "},{"type":"text","text":"that tracks if the user has enabled haptic feedback. First, it can define a boolean property on"},{"type":"text","text":" "},{"type":"text","text":"state:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  struct State: Equatable {","    var isHapticsEnabled = true","    \/\/ ...","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, in order to allow the outside world to mutate this state, for example from a toggle, it must"},{"type":"text","text":" "},{"type":"text","text":"define a corresponding action that can be sent updates:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  struct State: Equatable { \/* ... *\/ }","","  enum Action { ","    case isHapticsEnabledChanged(Bool)","    \/\/ ...","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the reducer handles this action, it can update state accordingly:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case let .isHapticsEnabledChanged(isEnabled):","        state.isHapticsEnabled = isEnabled","        return .none","      \/\/ ...","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, in the view, we can derive a binding from the domain that allows a toggle to"},{"type":"text","text":" "},{"type":"text","text":"communicate with our Composable Architecture feature. First you must hold onto the store in a"},{"type":"text","text":" "},{"type":"text","text":"bindable way, which can be done using the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper from SwiftUI:"}]},{"type":"codeListing","syntax":"swift","code":["struct SettingsView: View {","  @Bindable var store: StoreOf<Settings>","  \/\/ ...","}"]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are targeting older Apple platforms (iOS 16, macOS 13, tvOS 16, watchOS 9, or"},{"type":"text","text":" "},{"type":"text","text":"less), then you must use our backport of the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"diff","code":["-@Bindable var store: StoreOf<Settings>","+@Perception.Bindable var store: StoreOf<Settings>"]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once that is done you can derive a binding to a piece of state that sends an action when the"},{"type":"text","text":" "},{"type":"text","text":"binding is mutated:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some View {","  Form {","    Toggle(","      \"Haptic feedback\",","      isOn: $store.isHapticsEnabled.sending(\\.isHapticsEnabledChanged)","    )","","    \/\/ ...","  }","}"]},{"anchor":"Binding-actions-and-reducers","level":3,"type":"heading","text":"Binding actions and reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Deriving ad hoc bindings requires many manual steps that can feel tedious, especially for screens"},{"type":"text","text":" "},{"type":"text","text":"with many controls driven by many bindings. Because of this, the Composable Architecture comes with"},{"type":"text","text":" "},{"type":"text","text":"tools that can be applied to a reducer’s domain and logic to make this easier."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, a settings screen may model its state with the following struct:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  @ObservableState","  struct State {","    var digest = Digest.daily","    var displayName = \"\"","    var enableNotifications = false","    var isLoading = false","    var protectMyPosts = false","    var sendEmailNotifications = false","    var sendMobileNotifications = false","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The majority of these fields should be editable by the view, and in the Composable Architecture this"},{"type":"text","text":" "},{"type":"text","text":"means that each field requires a corresponding action that can be sent to the store. Typically this"},{"type":"text","text":" "},{"type":"text","text":"comes in the form of an enum with a case per field:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","","  enum Action {","    case digestChanged(Digest)","    case displayNameChanged(String)","    case enableNotificationsChanged(Bool)","    case protectMyPostsChanged(Bool)","    case sendEmailNotificationsChanged(Bool)","    case sendMobileNotificationsChanged(Bool)","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And we’re not even done yet. In the reducer we must now handle each action, which simply replaces"},{"type":"text","text":" "},{"type":"text","text":"the state at each field with a new value:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case let digestChanged(digest):","        state.digest = digest","        return .none","","      case let displayNameChanged(displayName):","        state.displayName = displayName","        return .none","","      case let enableNotificationsChanged(isOn):","        state.enableNotifications = isOn","        return .none","","      case let protectMyPostsChanged(isOn):","        state.protectMyPosts = isOn","        return .none","","      case let sendEmailNotificationsChanged(isOn):","        state.sendEmailNotifications = isOn","        return .none","","      case let sendMobileNotificationsChanged(isOn):","        state.sendMobileNotifications = isOn","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lot"}]},{"type":"text","text":" of boilerplate for something that should be simple. Luckily, we can dramatically"},{"type":"text","text":" "},{"type":"text","text":"eliminate this boilerplate using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, we can conform the action type to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" by collapsing all of the individual,"},{"type":"text","text":" "},{"type":"text","text":"field-mutating actions into a single case that holds a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":" that is generic over the"},{"type":"text","text":" "},{"type":"text","text":"reducer’s state:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then, we can simplify the settings reducer by adding a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":" that handles these"},{"type":"text","text":" "},{"type":"text","text":"field mutations for us:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action: BindableAction { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    BindingReducer()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in the view you must hold onto the store in a bindable manner, which can be done using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper (or the backported tool "},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":" if targeting older"},{"type":"text","text":" "},{"type":"text","text":"Apple platforms):"}]},{"type":"codeListing","syntax":"swift","code":["struct SettingsView: View {","  @Bindable var store: StoreOf<Settings>","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then bindings can be derived from the store using familiar "},{"type":"codeVoice","code":"$"},{"type":"text","text":" syntax:"}]},{"type":"codeListing","syntax":"swift","code":["TextField(\"Display name\", text: $store.displayName)","Toggle(\"Notifications\", text: $store.enableNotifications)","\/\/ ..."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you need to layer additional functionality over these bindings, your can pattern match the"},{"type":"text","text":" "},{"type":"text","text":"action for a given key path in the reducer:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some Reducer<State, Action> {","  BindingReducer()","","  Reduce { state, action in","    switch action","    case .binding(\\.displayName):","      \/\/ Validate display name","  ","    case .binding(\\.enableNotifications):","      \/\/ Return an effect to request authorization from UNUserNotificationCenter","  ","    \/\/ ...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or you can apply "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)"},{"type":"text","text":" to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":" to react to changes to"},{"type":"text","text":" "},{"type":"text","text":"particular fields:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some Reducer<State, Action> {","  BindingReducer()","    .onChange(of: \\.displayName) { oldValue, newValue in","      \/\/ Validate display name","    }","    .onChange(of: \\.enableNotifications) { oldValue, newValue in","      \/\/ Return an authorization request effect","    }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions can also be tested in much the same way regular actions are tested. Rather than send"},{"type":"text","text":" "},{"type":"text","text":"a specific action describing how a binding changed, such as "},{"type":"codeVoice","code":".displayNameChanged(\"Blob\")"},{"type":"text","text":", you will"},{"type":"text","text":" "},{"type":"text","text":"send a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":" action that describes which key path is being set to what value, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":".set(\\.displayName, \"Blob\")"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(initialState: Settings.State()) {","  Settings()","}","","store.send(.set(\\.displayName, \"Blob\")) {","  $0.displayName = \"Blob\"","}","store.send(.set(\\.protectMyPosts, true)) {","  $0.protectMyPosts = true",")"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindings"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Working with SwiftUI bindings","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"seeAlsoSections":[{"title":"Bindings","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"role":"symbol","title":"BindingReducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingReducer"}],"abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"url":"\/documentation\/composablearchitecture\/bindingreducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","title":"SwiftUI Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"role":"collectionGroup","title":"Deprecations","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuideprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"role":"symbol","title":"BindableAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"type":"text","text":" case that holds a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"url":"\/documentation\/composablearchitecture\/bindableaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"role":"symbol","title":"BindingAction","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingAction"}],"abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"url":"\/documentation\/composablearchitecture\/bindingaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"deprecated":true,"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/onChange(of:_:)":{"role":"symbol","title":"onChange(of:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"onChange"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_OnChangeReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Adds a reducer to run when this reducer changes the given value in state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/onchange(of:_:)"}}}