{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"prefix"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An effect that causes a test to fail if it runs."}]}]},{"kind":"parameters","parameters":[{"name":"prefix","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A string that identifies this scheduler and will prefix all failure"},{"type":"text","text":" "},{"type":"text","text":"messages."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This effect can provide an additional layer of certainty that a tested code path does not"},{"type":"text","text":" "},{"type":"text","text":"execute a particular effect."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, let’s say we have a very simple counter application, where a user can increment"},{"type":"text","text":" "},{"type":"text","text":"and decrement a number. The state and actions are simple enough:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterState: Equatable {","  var count = 0","}","","enum CounterAction: Equatable {","  case decrementButtonTapped","  case incrementButtonTapped","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s throw in a side effect. If the user attempts to decrement the counter below zero, the"},{"type":"text","text":" "},{"type":"text","text":"application should refuse and play an alert sound instead."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can model playing a sound in the environment with an effect:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterEnvironment {","  let playAlertSound: () -> Effect<Never, Never>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we’ve defined the domain, we can describe the logic in a reducer:"}]},{"type":"codeListing","syntax":"swift","code":["let counterReducer = Reducer<","  CounterState, CounterAction, CounterEnvironment","> { state, action, environment in","  switch action {","  case .decrementButtonTapped:","    if state > 0 {","      state.count -= 0","      return .none","    } else {","      return environment.playAlertSound()","        .fireAndForget()","    }","","  case .incrementButtonTapped:","    state.count += 1","    return .none","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s say we want to write a test for the increment path. We can see in the reducer that it"},{"type":"text","text":" "},{"type":"text","text":"should never play an alert, so we can configure the environment with an effect that will"},{"type":"text","text":" "},{"type":"text","text":"fail if it ever executes:"}]},{"type":"codeListing","syntax":"swift","code":["func testIncrement() {","  let store = TestStore(","    initialState: CounterState(count: 0)","    reducer: counterReducer,","    environment: CounterEnvironment(","      playSound: .failing(\"playSound\")","    )","  )","","  store.send(.increment) {","    $0.count = 1","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By using a "},{"type":"codeVoice","code":".failing"},{"type":"text","text":" effect in our environment we have strengthened the assertion and made"},{"type":"text","text":" "},{"type":"text","text":"the test easier to understand at the same time. We can see, without consulting the reducer"},{"type":"text","text":" "},{"type":"text","text":"itself, that this particular action should not access this effect."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/effect\/failing(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/failing(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An effect that causes a test to fail if it runs."}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"failing(_:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:22ComposableArchitecture6EffectV7failingyACyxq_GSSFZ","extendedModule":"ComposableArchitecture","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" type encapsulates a unit of work that can be run in the outside world, and can"},{"type":"text","text":" "},{"type":"text","text":"feed data back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":". It is the perfect place to do side effects, such as network"},{"type":"text","text":" "},{"type":"text","text":"requests, saving\/loading from disk, creating timers, interacting with dependencies, and more."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect/failing(_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"failing(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"failing"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that causes a test to fail if it runs."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/failing(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/failing(_:)"}}}