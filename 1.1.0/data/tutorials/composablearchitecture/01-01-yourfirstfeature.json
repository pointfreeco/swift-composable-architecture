{"variants":[{"paths":["\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Your first feature","chapter":"Essentials","estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}]}]},{"kind":"tasks","tasks":[{"anchor":"Create-a-reducer","title":"Create a reducer","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The fundamental unit that features are built with in the Composable Architecture is the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":". A conformance to that protocol represents the"},{"type":"text","text":" "},{"type":"text","text":"logic and behavior for a feature in your application. This includes how to evolve the current"},{"type":"text","text":" "},{"type":"text","text":"state to the next state when an action is sent into the system, and how effects communicate"},{"type":"text","text":" "},{"type":"text","text":"with the outside world and feed data back into the system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And most importantly, the feature’s core logic and behavior can be built in full isolation"},{"type":"text","text":" "},{"type":"text","text":"with no mention of a SwiftUI view, which makes it easier to develop in isolation, easier"},{"type":"text","text":" "},{"type":"text","text":"to reuse, and easier to test."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by creating a simple reducer that encapsulates the logic of a counter. We will"},{"type":"text","text":" "},{"type":"text","text":"add more interesting behavior to the feature, but let’s start simple for now."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-01-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new Swift file named CounterFeature.swift and import the Composable Architecture."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before importing the library you will need to depend on it by adding it to your"},{"type":"text","text":" "},{"type":"text","text":"Xcode project settings or SPM package:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation"}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a new struct called CounterFeature that conforms to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" you will start with a domain"},{"type":"text","text":" "},{"type":"text","text":"modeling exercise. You will create a "},{"type":"codeVoice","code":"State"},{"type":"text","text":" type that holds the state your feature needs"},{"type":"text","text":" "},{"type":"text","text":"to do its job, typically a struct. Then you will create an "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" type that holds all"},{"type":"text","text":" "},{"type":"text","text":"the actions the user can perform in the feature, typically an enum."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-01-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For the purpose of a simple counter feature, the state consists of just a single integer,"},{"type":"text","text":" "},{"type":"text","text":"the current count, and the actions consist of tapping buttons to either increment or"},{"type":"text","text":" "},{"type":"text","text":"decrement the count."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is best to name the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" cases after literally what the user does in the UI,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"incrementButtonTapped"},{"type":"text","text":", rather than what logic you want to perform, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"incrementCount"},{"type":"text","text":"."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-01-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, to finish conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":", you must implement"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/reduce(into:action:)-1t2ri"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"that evolves the state from its current value to the next value given a user action, and"},{"type":"text","text":" "},{"type":"text","text":"returns any effects that the feature wants to execute in the outside world. This almost"},{"type":"text","text":" "},{"type":"text","text":"always begins by switching on the incoming action to determine what logic you need to"},{"type":"text","text":" "},{"type":"text","text":"perform."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":" method takes "},{"type":"codeVoice","code":"State"},{"type":"text","text":" as an argument and it is marked as "},{"type":"codeVoice","code":"inout"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"means you can make any mutations you want directly to the state. There is no need to make"},{"type":"text","text":" "},{"type":"text","text":"a copy of the state just to return it."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-01-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The logic for this feature is quite simple. We just want to either subtract one or add one"},{"type":"text","text":" "},{"type":"text","text":"to the state’s count. We must also return a value of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"that represents the effect to be executed in the outside world, but in this case we do not"},{"type":"text","text":" "},{"type":"text","text":"need to execute anything. So we can return a special"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none"},{"type":"text","text":" value to represent we have no effects to"},{"type":"text","text":" "},{"type":"text","text":"execute."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to implement a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"very"}]},{"type":"text","text":" basic feature in the Composable Architecture."},{"type":"text","text":" "},{"type":"text","text":"There is of course a lot more to know about, such as executing effects and feeding data"},{"type":"text","text":" "},{"type":"text","text":"back into the system, using dependencies in reducers, composing multiple reducers together,"},{"type":"text","text":" "},{"type":"text","text":"and a lot more. But we will stop here for this feature right now and move onto the view."}]}]},{"anchor":"Integrating-with-SwiftUI","title":"Integrating with SwiftUI","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have a simple feature built as a reducer, we need to figure out how to power a"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI view from that feature. This involves two new concepts:"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":", which represents the runtime of the feature, and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":", which represents the observation of the runtime."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-01-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is our personal preference to keep the reducer and view in the same file until it is"},{"type":"text","text":" "},{"type":"text","text":"untenable, but others prefer to split the types into their own files. For this tutorial"},{"type":"text","text":" "},{"type":"text","text":"we will continue putting everything in CounterFeature.swift, and we will now import SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"and get a basic view into place:"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first thing one adds to the view is a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" that is generic"},{"type":"text","text":" "},{"type":"text","text":"over the reducer we constructed in the previous section. The "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" represents the runtime"},{"type":"text","text":" "},{"type":"text","text":"of your feature. That is, it is the object that can process actions in order to update"},{"type":"text","text":" "},{"type":"text","text":"state, and it can execute effects and feed data from those effects back into the system."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The store can be held onto as a "},{"type":"codeVoice","code":"let"},{"type":"text","text":". It does not need to be observed by the view."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we can implement some basic view hierarchy for displaying the count and providing"},{"type":"text","text":" "},{"type":"text","text":"buttons for incrementing and decrementing."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot read state from a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" directly, nor can you"},{"type":"text","text":" "},{"type":"text","text":"send actions to it directly. So, for now we will provide stubs for that behavior, but once"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" is added we can provide the real implementations."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":"01-02-image-0003.png","media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"With some basic view scaffolding in place we can now start actually observing state in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"store"},{"type":"text","text":". This is done by constructing a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":", and for"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI views there is a convenience view called a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" "},{"type":"text","text":"that provides a lightweight syntax for constructing a view store."}]},{"code":"01-01-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View stores require that "},{"type":"codeVoice","code":"State"},{"type":"text","text":" be "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", so we must do that first. Once the view"},{"type":"text","text":" "},{"type":"text","text":"store is constructed we can access the feature’s state and send it actions when the user"},{"type":"text","text":" "},{"type":"text","text":"taps on buttons."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently we are observing "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" state in the store by using "},{"type":"codeVoice","code":"observe: { $0 }"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"but typically features hold onto a lot more state than what is needed in the view. See"},{"type":"text","text":" "},{"type":"text","text":"our article "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},{"type":"text","text":" for more information on how to best observe only the bare"},{"type":"text","text":" "},{"type":"text","text":"essentials a view needs to do its job."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-02-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to actually run the feature. We will start with a preview. To do this we will"},{"type":"text","text":" "},{"type":"text","text":"construct a "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":", and to do that we need to construct a "},{"type":"codeVoice","code":"StoreOf<CounterFeature>"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Stores can be constructed by providing the initial state you want the feature to begin in,"},{"type":"text","text":" "},{"type":"text","text":"as well as a trailing closure that specifies the reducer that powers the feature."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With that done we can run the preview to see that tapping the “+” and “-” buttons does"},{"type":"text","text":" "},{"type":"text","text":"indeed change the visible count in the UI."}]}],"type":"step","runtimePreview":"01-02-video-0005.mp4","media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before moving onto the next section, let’s quickly show off a super power of the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture. Because all of the feature’s logic and behavior are contained in the reducer,"},{"type":"text","text":" "},{"type":"text","text":"we can run the preview with a completely different reducer to alter how it executes."}]},{"code":"01-01-02-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, in the preview, comment out the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" reducer and the store will be"},{"type":"text","text":" "},{"type":"text","text":"given a reducer that performs no state mutations or effects. This allows us to preview the"},{"type":"text","text":" "},{"type":"text","text":"design of the feature without worrying about any of its logic or behavior."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that the video demonstrates that tapping the buttons does not cause"},{"type":"text","text":" "},{"type":"text","text":"the count to increase or decrease. That is because we are using the empty reducer in the"},{"type":"text","text":" "},{"type":"text","text":"preview."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":"01-02-video-0006.mp4","media":null},{"code":"01-01-02-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before moving on let’s be sure to bring back the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" reducer in the preview,"},{"type":"text","text":" "},{"type":"text","text":"otherwise it will continue to be inert with our next explorations."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all there is to implementing a basic feature in the Composable Architecture. The"},{"type":"text","text":" "},{"type":"text","text":"feature is of course very simple, and doesn’t involve anything interesting like side effects"},{"type":"text","text":" "},{"type":"text","text":"(which will be the topic of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"type":"text","text":"), but before any of that let’s see"},{"type":"text","text":" "},{"type":"text","text":"how to integrate this feature into an application."}]}]},{"anchor":"Integrating-into-the-app","title":"Integrating into the app","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have now integrated our Composable Architecture feature into a SwiftUI view and we’ve been"},{"type":"text","text":" "},{"type":"text","text":"able to run it in the preview. Next we need to figure out how to run the feature in the full"},{"type":"text","text":" "},{"type":"text","text":"application by altering its entry point. This will allow us to run the feature in a simulator"},{"type":"text","text":" "},{"type":"text","text":"or on a device."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-01-03-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the entry point of your application is probably in a file called App.swift"},{"type":"text","text":" "},{"type":"text","text":"and looks something like this code."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-03-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will change the entry point of the application so that it constructs a "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":" "},{"type":"text","text":"and provides a store, just as we did in the preview."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-01-03-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that the "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" that powers the application should only be created"},{"type":"text","text":" "},{"type":"text","text":"a single time. For most applications it should be sufficient to create it directly in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"WindowGroup"},{"type":"text","text":" at the root of the scene. But, it can also be held as a static variable"},{"type":"text","text":" "},{"type":"text","text":"and then provided in the scene."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can demonstrate another super power of the Composable Architecture. Reducers have a"},{"type":"text","text":" "},{"type":"text","text":"method called "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)"},{"type":"text","text":" that is similar"},{"type":"text","text":" "},{"type":"text","text":"to a tool that SwiftUI provides. When used it will print every action that the reducer"},{"type":"text","text":" "},{"type":"text","text":"processes to the console, and it will print how the state changed after processing the"},{"type":"text","text":" "},{"type":"text","text":"action. The method will also go through great lengths to collapse the state difference to a"},{"type":"text","text":" "},{"type":"text","text":"compact form. This includes not displaying nested state if it hasn’t changed, and not showing"},{"type":"text","text":" "},{"type":"text","text":"elements in collections that haven’t changed."}]},{"code":"01-01-03-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the entry point of the application to invoke"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)"},{"type":"text","text":" on the reducer."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now when you run the application in the simulator and tap the “+” and “-” buttons a few"},{"type":"text","text":" "},{"type":"text","text":"times you should see logs printed to the console showing you exactly what is happening."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"01-03-image-0005.jpg"}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Adding side effects","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Your first feature","categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]]},"references":{"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"role":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","title":"Testing the add contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"01-01-01-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0001.swift","type":"file","fileType":"swift","highlights":[]},"01-01-02-code-0004.swift":{"syntax":"swift","content":["extension CounterFeature.State: Equatable {}","","struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0004.swift","type":"file","fileType":"swift","highlights":[]},"01-01-01-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","","    case .incrementButtonTapped:","","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"01-01-02-code-0007.swift":{"syntax":"swift","content":["struct CounterPreview: PreviewProvider {","  static var previews: some View {","    CounterView(","      store: Store(initialState: CounterFeature.State()) {","        CounterFeature()","      }","    )","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0007.swift","type":"file","fileType":"swift","highlights":[{"line":5}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"role":"project","title":"Testing presentation","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation"},"01-01-02-code-0005.swift":{"syntax":"swift","content":["struct CounterPreview: PreviewProvider {","  static var previews: some View {","    CounterView(","      store: Store(initialState: CounterFeature.State()) {","        CounterFeature()","      }","    )","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0005.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/performance"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"role":"pseudoSymbol","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"role":"pseudoSymbol","title":"What is a side effect?","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect"},"01-03-image-0005.jpg":{"alt":null,"type":"image","identifier":"01-03-image-0005.jpg","variants":[{"url":"\/images\/01-03-image-0005.jpg","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","title":"Contact detail feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"01-01-01-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","","}"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":3},{"line":4},{"line":5}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"role":"pseudoSymbol","title":"Create a reducer","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"role":"project","title":"Your first presentation","estimatedTime":"30min","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","title":"Improve domain modeling","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"01-01-03-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","      ._printChanges()","  }","","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"fileName":"App.swift","identifier":"01-01-03-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":8}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"role":"pseudoSymbol","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"01-01-03-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      CounterView(","        store: Store(initialState: CounterFeature.State()) {","          CounterFeature()","        }","      )","    }","  }","}"],"fileName":"App.swift","identifier":"01-01-03-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":1},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}]},"01-01-02-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct CounterView: View {","  var body: some View {","    EmptyView()","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0001.swift","type":"file","fileType":"swift","highlights":[]},"01-01-01-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0006.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":20},{"line":21}]},"01-02-video-0005.mp4":{"poster":null,"alt":null,"type":"video","identifier":"01-02-video-0005.mp4","variants":[{"url":"\/videos\/01-02-video-0005.mp4","traits":["1x","light"]}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"role":"pseudoSymbol","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"role":"symbol","title":"none","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"none"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/none"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","title":"Testing your feature","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"role":"project","title":"Multiple presentation destinations","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"01-02-image-0003.png":{"alt":"iOS application showing a text view in the center displaying a 0 and two buttons underneath it, one for decrementing the count and one for incrementing.","type":"image","identifier":"01-02-image-0003.png","variants":[{"url":"\/images\/01-02-image-0003.png","traits":["1x","light"]}]},"01-01-03-code-0001.swift":{"syntax":"swift","content":["import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      ContentView()","    }","  }","}"],"fileName":"App.swift","identifier":"01-01-03-code-0001.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"role":"project","title":"Adding side effects","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"role":"article","title":"Navigation","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","title":"Essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"role":"pseudoSymbol","title":"Child-to-parent communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"01-01-01-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","","  }","","  enum Action {","","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"role":"pseudoSymbol","title":"Managing a timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"role":"pseudoSymbol","title":"Testing effects","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/_printChanges(_:)":{"role":"symbol","title":"_printChanges(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"_printChanges"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"_ReducerPrinter"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">?) -> "},{"kind":"typeIdentifier","text":"_PrintChangesReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Enhances a reducer with debug logging of received actions and state mutations for the given"},{"type":"text","text":" "},{"type":"text","text":"printer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/_printchanges(_:)"},"01-01-02-code-0006.swift":{"syntax":"swift","content":["struct CounterPreview: PreviewProvider {","  static var previews: some View {","    CounterView(","      store: Store(initialState: CounterFeature.State()) {","        \/\/ CounterFeature()","      }","    )","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0006.swift","type":"file","fileType":"swift","highlights":[{"line":5}]},"01-01-03-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","  }","","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"fileName":"App.swift","identifier":"01-01-03-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":12}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","estimatedTime":"20min","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"01-01-01-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-01-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":9},{"line":10}]},"01-01-02-code-0003.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    VStack {","      Text(\"0\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        Button(\"+\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"01-01-02-code-0002.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    EmptyView()","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-01-02-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":3}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"role":"pseudoSymbol","title":"Testing state changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"01-02-video-0006.mp4":{"poster":null,"alt":null,"type":"video","identifier":"01-02-video-0006.mp4","variants":[{"url":"\/videos\/01-02-video-0006.mp4","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/reduce(into:action:)-1t2ri":{"defaultImplementations":1,"role":"symbol","title":"reduce(into:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Evolves the current state of the reducer to the next state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/reduce(into:action:)-1t2ri","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/reduce(into:action:)-1t2ri"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"}}}