{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC6Actionq_mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"kind":"text","text":": "},{"kind":"attribute","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC5Statexmfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"action","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An action."}]}]},{"name":"predicate","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate on "},{"type":"codeVoice","code":"State"},{"type":"text","text":" that determines for how long this method should"},{"type":"text","text":" "},{"type":"text","text":"suspend."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method can be used to interact with async\/await code, allowing you to suspend while"},{"type":"text","text":" "},{"type":"text","text":"work is being performed in an effect. One common example of this is using SwiftUI’s"},{"type":"text","text":" "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" method, which shows a loading indicator on the screen while work is being"},{"type":"text","text":" "},{"type":"text","text":"performed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose we wanted to load some data from the network when a pull-to-refresh"},{"type":"text","text":" "},{"type":"text","text":"gesture is performed on a list. The domain and logic for this feature can be modeled like"},{"type":"text","text":" "},{"type":"text","text":"so:"}]},{"type":"codeListing","syntax":"swift","code":["struct State: Equatable {","  var isLoading = false","  var response: String?","}","","enum Action {","  case pulledToRefresh","  case receivedResponse(String?)","}","","struct Environment {","  var fetch: () -> Effect<String?, Never>","}","","let reducer = Reducer<State, Action, Environment> { state, action, environment in","  switch action {","  case .pulledToRefresh:","    state.isLoading = true","    return environment.fetch()","      .map(Action.receivedResponse)","","  case let .receivedResponse(response):","    state.isLoading = false","    state.response = response","    return .none","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we keep track of an "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" boolean in our state so that we know exactly"},{"type":"text","text":" "},{"type":"text","text":"when the network response is being performed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The view can show the fact in a "},{"type":"codeVoice","code":"List"},{"type":"text","text":", if it’s present, and we can use the "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" "},{"type":"text","text":"view modifier to enhance the list with pull-to-refresh capabilities:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  let store: Store<State, Action>","","  var body: some View {","    WithViewStore(self.store) { viewStore in","      List {","        if let response = viewStore.response {","          Text(response)","        }","      }","      .refreshable {","        await viewStore.send(.pulledToRefresh, while: \\.isLoading)","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we’ve used the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)"},{"type":"text","text":" method to suspend while the "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" state is"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":". Once that piece of state flips back to "},{"type":"codeVoice","code":"false"},{"type":"text","text":" the method will resume, signaling"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" that the work has finished which will cause the loading indicator to"},{"type":"text","text":" "},{"type":"text","text":"disappear."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note:"}]},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" is not thread safe and you should only send actions to it from the"},{"type":"text","text":" "},{"type":"text","text":"main thread. If you are wanting to send actions on background threads due to the fact that"},{"type":"text","text":" "},{"type":"text","text":"the reducer is performing computationally expensive work, then a better way to handle this"},{"type":"text","text":" "},{"type":"text","text":"is to wrap that work in an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" that is performed on a background thread so that the"},{"type":"text","text":" "},{"type":"text","text":"result can be fed back into the store."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"send(_:while:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC6Actionq_mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC5Statexmfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"symbolKind":"method","externalID":"s:22ComposableArchitecture9ViewStoreC4send_5whileyq__SbxctYaF","extendedModule":"ComposableArchitecture","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be"},{"type":"text","text":" "},{"type":"text","text":"used anywhere it makes sense to observe state and send actions."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:while:)":{"role":"symbol","title":"send(_:while:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC6Actionq_mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC5Statexmfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" type encapsulates a unit of work that can be run in the outside world, and can"},{"type":"text","text":" "},{"type":"text","text":"feed data back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":". It is the perfect place to do side effects, such as network"},{"type":"text","text":" "},{"type":"text","text":"requests, saving\/loading from disk, creating timers, interacting with dependencies, and more."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"}}}