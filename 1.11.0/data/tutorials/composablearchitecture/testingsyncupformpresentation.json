{"variants":[{"paths":["\/tutorials\/composablearchitecture\/testingsyncupformpresentation"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Testing the add sync-up flow","chapter":"Presenting the sync-up form","estimatedTimeInMinutes":10,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}]}]},{"kind":"tasks","tasks":[{"anchor":"Adding-a-sync-up","title":"Adding a sync-up","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by testing the flow of adding a sync-up."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"TestingSyncUpFormPresentation-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These new tests will go in the SyncUpsListTests.swift file since we are testing the"},{"type":"text","text":" "},{"type":"text","text":"integration of the list feature with the form feature. We already have one, very simple test"},{"type":"text","text":" "},{"type":"text","text":"in this file for the deletion logic (code is currently omitted from the snippet). Add a new"},{"type":"text","text":" "},{"type":"text","text":"test method for the flow of adding a sync-up."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As with every test in the Composable Architecture, we start by creating a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" for the feature we are testing. We will start the"},{"type":"text","text":" "},{"type":"text","text":"feature in a state with no sync-ups."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping on the “+” button in the top-right of the interface by sending the"},{"type":"text","text":" "},{"type":"codeVoice","code":"addSyncUpButtonTapped"},{"type":"text","text":" action. When that action is sent we expect the "},{"type":"codeVoice","code":"addSyncUp"},{"type":"text","text":" state to"},{"type":"text","text":" "},{"type":"text","text":"be populated, representing that the sheet should appear."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-01-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that unfortunately it fails."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The problem is similar to what we encountered while writing tests for the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"feature. We are using an uncontrolled dependency in the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature for generating"},{"type":"text","text":" "},{"type":"text","text":"UUIDs. We now need to control that dependency."}]},{"code":"TestingSyncUpFormPresentation-01-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to SyncUpsList.swift and add a dependency on the UUID generator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-01-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the controlled UUID generator rather than reaching out the global, uncontrolled UUID"},{"type":"text","text":" "},{"type":"text","text":"initializer."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-01-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to SyncUpsListTests.swift and override the "},{"type":"codeVoice","code":"uuid"},{"type":"text","text":" dependency to be "},{"type":"codeVoice","code":".incrementing"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This way we can predict what UUIDs will be generated by the feature in tests."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we can predict what UUIDs will be generated in the feature. The first time a UUID is"},{"type":"text","text":" "},{"type":"text","text":"created it will be 00000000-0000-0000-0000-000000000000. Then the next time it will be"},{"type":"text","text":" "},{"type":"text","text":"00000000-0000-0000-0000-000000000001. And on, and on, and on…"}]},{"code":"TestingSyncUpFormPresentation-01-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the assertion to confirm that the newly created "},{"type":"codeVoice","code":"SyncUp"},{"type":"text","text":" should have an ID that is"},{"type":"text","text":" "},{"type":"text","text":"the UUID with all 0s."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the test passes with flying colors!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But we also haven’t tested too much yet. We’ve just confirmed that when the user taps the “+”"},{"type":"text","text":" "},{"type":"text","text":"that some state in the feature is populated. Let’s now emulate the user making some changes to"},{"type":"text","text":" "},{"type":"text","text":"the sync-up in the form, and then confirming the addition of the sync-up to the root list."}]},{"code":"TestingSyncUpFormPresentation-01-code-0009.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user editing some details of the sync-up. To do this we need to send an action"},{"type":"text","text":" "},{"type":"text","text":"in the sync-up form’s domain, which can be done by sending a nested enum action that"},{"type":"text","text":" "},{"type":"text","text":"represents an action in the "},{"type":"codeVoice","code":"addSyncUp"},{"type":"text","text":" domain."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are using key path syntax to describe the nested action to send."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-01-code-0010.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the "},{"type":"codeVoice","code":".addSyncUp"},{"type":"text","text":" case we can send any action in the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" domain. In"},{"type":"text","text":" "},{"type":"text","text":"particular we know that the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" has a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":" "},{"type":"text","text":"that was used to bind the "},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" to various UI controls in the view. We can send a binding"},{"type":"text","text":" "},{"type":"text","text":"action by chaining onto "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/binding(_:)"},{"type":"text","text":":"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-01-code-0011.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the "},{"type":"codeVoice","code":".binding"},{"type":"text","text":" case we can further chain onto any field in the feature’s state"},{"type":"text","text":" "},{"type":"text","text":"to update it. Construct a new "},{"type":"codeVoice","code":"SyncUp"},{"type":"text","text":" that represents the edits that are made by the user,"},{"type":"text","text":" "},{"type":"text","text":"and assert on how we expect the state to change."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that it passes!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have now emulated the user opening the “Add sync-up” sheet and making some edits to the"},{"type":"text","text":" "},{"type":"text","text":"sync-up. Let’s tie the knot by now emulating the user confirming to add the sync-up to the"},{"type":"text","text":" "},{"type":"text","text":"root list."}]},{"code":"TestingSyncUpFormPresentation-01-code-0012.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping on the “Add” button in the sheet."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-01-code-0013.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that we get a failure."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is happening because when the addition of the sync-up is confirmed, the root"},{"type":"text","text":" "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature mutates its state to add the sync-up, and it clears out the "},{"type":"codeVoice","code":"addSyncUp"},{"type":"text","text":" "},{"type":"text","text":"state in order to dismiss the sheet. The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" forces us to"},{"type":"text","text":" "},{"type":"text","text":"assert on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"everything"}]},{"type":"text","text":" happening in the feature so that if someday we accidentally remove"},{"type":"text","text":" "},{"type":"text","text":"that dismissal logic we will instantly get a test failure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s now assert on that logic."}]},{"code":"TestingSyncUpFormPresentation-01-code-0014.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that after the "},{"type":"codeVoice","code":"confirmAddButtonTapped"},{"type":"text","text":" is sent that the root "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature"},{"type":"text","text":" "},{"type":"text","text":"has updated its "},{"type":"codeVoice","code":"syncUps"},{"type":"text","text":" array to have the newly edited sync-up, and it "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"’s out the"},{"type":"text","text":" "},{"type":"codeVoice","code":"addSyncUp"},{"type":"text","text":" state to represent dismissal of the sheet."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have a passing test, and it exercises the integration of two features. We have emulated"},{"type":"text","text":" "},{"type":"text","text":"the full flow of a user bringing up the “New sync-up” sheet, making some changes, tapping"},{"type":"text","text":" "},{"type":"text","text":"“Add”, and proved that the new sheet was added to the list and the sheet was dismissed. As"},{"type":"text","text":" "},{"type":"text","text":"long as we have hooked everything up in the view properly, and as long as we trust SwiftUI to"},{"type":"text","text":" "},{"type":"text","text":"do its  job, we can be confident this feature works the way we expect."}]}]},{"anchor":"Non-exhaustive-testing","title":"Non-exhaustive testing","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The test we wrote in the previous section is incredibly powerful, but also a bit verbose. As"},{"type":"text","text":" "},{"type":"text","text":"the features you test get more complex, and as you test the integration of more features, you"},{"type":"text","text":" "},{"type":"text","text":"may come to a point where you do not want to exhaustively assert on every little thing"},{"type":"text","text":" "},{"type":"text","text":"happening inside the features."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is where non-exhaustive testing is helpful. It allows you to write tests in the same"},{"type":"text","text":" "},{"type":"text","text":"style as before, but you can choose what state you want to assert on, and you can ignore state"},{"type":"text","text":" "},{"type":"text","text":"that is not interesting to you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically you will have a mixture of exhaustive and non-exhaustive tests in your suite."},{"type":"text","text":" "},{"type":"text","text":"Exhaustive tests are a great default for testing leaf features, but every once in a while you"},{"type":"text","text":" "},{"type":"text","text":"may want an exhaustive test on feature integrations. And then non-exhaustive tests are a great"},{"type":"text","text":" "},{"type":"text","text":"default for testing the integration of features, and may make sense every once in a while on"},{"type":"text","text":" "},{"type":"text","text":"leaf features."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"TestingSyncUpFormPresentation-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new test method for testing the “Add sync-up” flow, but this time in an exhaustive"},{"type":"text","text":" "},{"type":"text","text":"manner."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" just like we did before, but this time we"},{"type":"text","text":" "},{"type":"text","text":"will set the store’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"type":"text","text":" to "},{"type":"codeVoice","code":".off"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"puts the test store in “non-exhaustive” mode."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The default value of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"type":"text","text":" is "},{"type":"codeVoice","code":".on"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"so typically it does not need to be set."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping the “+” button in the UI by sending the "},{"type":"codeVoice","code":".addSyncUpButtonTapped"},{"type":"text","text":" "},{"type":"text","text":"action."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that it passes."}]}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Already we can see a difference between non-exhaustive and exhaustive test stores. We are not"},{"type":"text","text":" "},{"type":"text","text":"specifying the trailing closure in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-2co21"},{"type":"text","text":" to assert on state"},{"type":"text","text":" "},{"type":"text","text":"changes, yet the test will still pass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A non-exhaustive store operates similarly to an exhaustive one, but with a few key"},{"type":"text","text":" "},{"type":"text","text":"differences. In a non-exhaustive store, the "},{"type":"codeVoice","code":"$0"},{"type":"text","text":" handed to the trailing closure of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-2co21"},{"type":"text","text":" is the state "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" "},{"type":"text","text":"the action has been processed, whereas in an exhaustive test store it is the state "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means in non-exhaustive test stores you do not have make any mutations in the trailing"},{"type":"text","text":" "},{"type":"text","text":"closure if you do not want to. And anything you "},{"type":"emphasis","inlineContent":[{"type":"text","text":"do"}]},{"type":"text","text":" set in the trailing closure must match"},{"type":"text","text":" "},{"type":"text","text":"what was already there in order for the test to pass. See the dedicated article"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":" for more information."}]},{"code":"TestingSyncUpFormPresentation-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user making edits to the sync-up, but again do not provide a trailing closure."},{"type":"text","text":" "},{"type":"text","text":"We will not assert on how the state changes for this action."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that it passes."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"TestingSyncUpFormPresentation-02-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping the “Add” button to confirm adding the sync-up. This time we will"},{"type":"text","text":" "},{"type":"text","text":"provide an assertion trailing closure, but we will only assert that the edited sync-up was"},{"type":"text","text":" "},{"type":"text","text":"added to the root list."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that it passes."}]}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test passes, and it proves at a very high level that when the user does the full “Add"},{"type":"text","text":" "},{"type":"text","text":"sync-up” flow that a sync-up is added to the root list without asserting on every little"},{"type":"text","text":" "},{"type":"text","text":"detail long the way."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is an alternate non-exhaustive mode called"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)"},{"type":"text","text":". The"},{"type":"text","text":" "},{"type":"codeVoice","code":"showSkippedAssertions"},{"type":"text","text":" flag allows you to see what state you did not assert on without"},{"type":"text","text":" "},{"type":"text","text":"failing the test suite. The default value is "},{"type":"codeVoice","code":"false"},{"type":"text","text":", but it can be turned on explicitly."}]},{"code":"TestingSyncUpFormPresentation-02-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Put the test store in the alternate non-exhaustive mode."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that it passes, but that for any state we did not assert on we get a"},{"type":"text","text":" "},{"type":"text","text":"grey informational box in Xcode letting us know what was skipped."}]}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This mode of non-exhaustive testing can be great for debugging. Non-exhaustive testing has"},{"type":"text","text":" "},{"type":"text","text":"the downside that you can have a passing test that is secretly hiding a production bug since"},{"type":"text","text":" "},{"type":"text","text":"you are not asserting on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"everything"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are seeing a mysterious bug in the simulator or device that you have test coverage for,"},{"type":"text","text":" "},{"type":"text","text":"then you can turn on "},{"type":"codeVoice","code":"showSkippedAssertions"},{"type":"text","text":" to get a view into what state you are not"},{"type":"text","text":" "},{"type":"text","text":"asserting on and search for the bug there."}]}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Persisting sync-ups","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Testing the add sync-up flow","categoryPathComponent":"BuildingSyncUps","role":"project","category":"Building SyncUps"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"TestingSyncUpFormPresentation-02-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp_NonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addSyncUpButtonTapped)","  }","  ","  @MainActor","  func testAddSyncUp() async {","    \/\/ ...","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-02-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"role":"pseudoSymbol","title":"Asking for speech recognition permission","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission"},"TestingSyncUpFormPresentation-01-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case confirmAddButtonTapped","    case discardButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","        return .none","","      case .addSyncUp:","        return .none","","      case .confirmAddButtonTapped:","        guard let newSyncUp = state.addSyncUp?.syncUp","        else { return .none }","        state.addSyncUp = nil","        state.syncUps.append(newSyncUp)","        return .none","","      case .discardButtonTapped:","        state.addSyncUp = nil","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}"],"fileName":"SyncUpsList.swift","identifier":"TestingSyncUpFormPresentation-01-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":19},{"line":20},{"line":21}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"role":"pseudoSymbol","title":"Writing your first test","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"role":"project","title":"Testing the sync-up detail","estimatedTime":"10min","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"role":"pseudoSymbol","title":"Navigate to a meeting","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"role":"pseudoSymbol","title":"Creating the app view","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:file:line:)-2co21":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"send(_:assert:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:file:line:)-2co21","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:file:line:)-2co21"},"TestingSyncUpFormPresentation-02-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp_NonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off(showSkippedAssertions: true)","","    await store.send(.addSyncUpButtonTapped)","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)","","    await store.send(.confirmAddButtonTapped) {","      $0.syncUps = [editedSyncUp]","    }","  }","  ","  @MainActor","  func testAddSyncUp() async {","    \/\/ ...","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-02-code-0006.swift","type":"file","fileType":"swift","highlights":[{"line":14}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"role":"pseudoSymbol","title":"Testing the edit flow","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow"},"TestingSyncUpFormPresentation-01-code-0013.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","","    await store.send(.confirmAddButtonTapped)","    \/\/ ❌ State was not expected to change, but a change occurred: …","    \/\/","    \/\/       SyncUpsList.State(","    \/\/     −   _addSyncUp: SyncUpForm.State(","    \/\/     −     _focus: .title,","    \/\/     −     _syncUp: SyncUp(","    \/\/     −       id: Tagged(rawValue: UUID(00000000-0000-0000-0000-000000000000)),","    \/\/     −       attendees: [","    \/\/     −         [0]: Attendee(","    \/\/     −           id: Tagged(rawValue: UUID(0C804547-B60D-48D5-A5CC-BBC16D1B2287)),","    \/\/     −           name: \"Blob\"","    \/\/     −         ),","    \/\/     −         [1]: Attendee(","    \/\/     −           id: Tagged(rawValue: UUID(70B92063-FE08-458F-9703-E2E627A88EDA)),","    \/\/     −           name: \"Blob Jr.\"","    \/\/     −         )","    \/\/     −       ],","    \/\/     −       duration: 5 minutes,","    \/\/     −       meetings: [],","    \/\/     −       theme: .bubblegum,","    \/\/     −       title: \"Point-Free morning sync\"","    \/\/     −     )","    \/\/     −   ),","    \/\/     +   _addSyncUp: nil,","    \/\/         _syncUps: [","    \/\/     +     [0]: SyncUp(","    \/\/     +       id: Tagged(rawValue: UUID(00000000-0000-0000-0000-000000000000)),","    \/\/     +       attendees: [","    \/\/     +         [0]: Attendee(","    \/\/     +           id: Tagged(rawValue: UUID(0C804547-B60D-48D5-A5CC-BBC16D1B2287)),","    \/\/     +           name: \"Blob\"","    \/\/     +         ),","    \/\/     +         [1]: Attendee(","    \/\/     +           id: Tagged(rawValue: UUID(70B92063-FE08-458F-9703-E2E627A88EDA)),","    \/\/     +           name: \"Blob Jr.\"","    \/\/     +         )","    \/\/     +       ],","    \/\/     +       duration: 5 minutes,","    \/\/     +       meetings: [],","    \/\/     +       theme: .bubblegum,","    \/\/     +       title: \"Point-Free morning sync\"","    \/\/     +     )","    \/\/         ]","    \/\/       )","    \/\/","    \/\/ (Expected: −, Actual: +)","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0013.swift","type":"file","fileType":"swift","highlights":[{"line":29},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"role":"pseudoSymbol","title":"A handy debugging tool","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"role":"pseudoSymbol","title":"Adding a sync-up","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"role":"symbol","title":"Shared","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Shared"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"url":"\/documentation\/composablearchitecture\/shared"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"role":"pseudoSymbol","title":"Editing the sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"role":"pseudoSymbol","title":"Testing the timer","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"role":"project","title":"Persisting sync-ups","estimatedTime":"5min","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/persistingsyncups"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"role":"symbol","title":"BindingAction","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingAction"}],"abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"url":"\/documentation\/composablearchitecture\/bindingaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"role":"symbol","title":"exhaustivity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity"},"TestingSyncUpFormPresentation-01-code-0012.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)))) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","","    await store.send(.confirmAddButtonTapped)","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0012.swift","type":"file","fileType":"swift","highlights":[{"line":29},{"line":32},{"line":33}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"role":"article","title":"Persisting sync-ups to disk","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"role":"pseudoSymbol","title":"Form focus: a better approach","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"role":"pseudoSymbol","title":"Create the SyncUps project","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"role":"project","title":"What is SyncUps?","estimatedTime":"5min","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/whatissyncups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"role":"pseudoSymbol","title":"Sync-up form basics","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"role":"project","title":"The RecordMeeting feature","estimatedTime":"5min","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"role":"pseudoSymbol","title":"Testing persistence","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"role":"pseudoSymbol","title":"A basic timer","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"role":"pseudoSymbol","title":"Domain models","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing"},"TestingSyncUpFormPresentation-01-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    ","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}]},"TestingSyncUpFormPresentation-01-code-0008.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0008.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"role":"pseudoSymbol","title":"Persisting data to disk","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"role":"pseudoSymbol","title":"Deleting a sync-up","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"role":"project","title":"Sync-up form","estimatedTime":"15min","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupform"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"role":"project","title":"Adding a speech recognizer","estimatedTime":"10min","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer"},"TestingSyncUpFormPresentation-01-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    }","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11}]},"TestingSyncUpFormPresentation-02-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp_NonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addSyncUpButtonTapped)","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)","","    await store.send(.confirmAddButtonTapped) {","      $0.syncUps = [editedSyncUp]","    }","  }","  ","  @MainActor","  func testAddSyncUp() async {","    \/\/ ...","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-02-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":27},{"line":28},{"line":29},{"line":30}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"abstract":[],"title":"Non-exhaustive testing","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing"},"TestingSyncUpFormPresentation-01-code-0010.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    await store.send(\\.addSyncUp.binding…)","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0010.swift","type":"file","fileType":"swift","highlights":[{"line":21}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"role":"article","title":"Navigating to sync-up detail","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"role":"article","title":"Sync-up detail","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/sync-up-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"role":"project","title":"Navigating to a sync-up detail","estimatedTime":"20min","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"role":"project","title":"Sync-up detail","estimatedTime":"5min","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupdetail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"role":"pseudoSymbol","title":"Controlling dependencies early","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"role":"article","title":"Presenting the sync-up form","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"role":"pseudoSymbol","title":"Create a new feature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"role":"pseudoSymbol","title":"Creating the app feature","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature"},"TestingSyncUpFormPresentation-01-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","    }","    \/\/ ❌ A state change does not match expectation: …","    \/\/","    \/\/       SyncUpsList.State(","    \/\/         _addSyncUp: SyncUpForm.State(","    \/\/           _focus: .title,","    \/\/           _syncUp: SyncUp(","    \/\/     −       id: Tagged(rawValue: UUID(46714C1B-449D-430C-9AE9-300BEF39D259))","    \/\/     +       id: Tagged(rawValue: UUID(29CEC58B-1FC1-443C-8178-D35C9CA062C1))","    \/\/             attendees: [],","    \/\/             duration: 5 minutes,","    \/\/             meetings: [],","    \/\/             theme: .bubblegum,","    \/\/             title: \"\"","    \/\/           )","    \/\/         ),","    \/\/         _syncUps: []","    \/\/       )","    \/\/","    \/\/ (Expected: −, Actual: +)","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"role":"article","title":"Record meeting","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/record-meeting"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"role":"pseudoSymbol","title":"Adding attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"role":"pseudoSymbol","title":"The meeting screen","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction/binding(_:)":{"role":"symbol","title":"binding(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"binding"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"BindingAction","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Embeds a binding action in this action type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/binding(_:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/bindableaction\/binding(_:)"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"role":"article","title":"Lists of sync-ups","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups"},"TestingSyncUpFormPresentation-02-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp_NonExhaustive() async {","","  }","  ","  @MainActor","  func testAddSyncUp() async {","    \/\/ ...","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-02-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"role":"pseudoSymbol","title":"More concise domain modeling","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling"},"TestingSyncUpFormPresentation-01-code-0014.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","","    await store.send(.confirmAddButtonTapped) {","      $0.addSyncUp = nil","      $0.syncUps = [editedSyncUp]","    }","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0014.swift","type":"file","fileType":"swift","highlights":[{"line":33},{"line":34},{"line":35},{"line":36}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"role":"project","title":"Testing navigation","estimatedTime":"10min","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingnavigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"role":"pseudoSymbol","title":"Ending the meeting early","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"role":"pseudoSymbol","title":"Integrating the feature domains together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"role":"pseudoSymbol","title":"Adding a new sync-up to the list","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"role":"pseudoSymbol","title":"Navigating to the record meeting feature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"role":"article","title":"New sync-up form","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/new-sync-up-form"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"role":"pseudoSymbol","title":"Deleting the sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"role":"project","title":"Testing the add sync-up flow","estimatedTime":"10min","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"role":"pseudoSymbol","title":"Navigating to the detail","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"role":"project","title":"Presenting the sync-up form","estimatedTime":"10min","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/presentingsyncupform"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"role":"pseudoSymbol","title":"A tour of SyncUps","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"role":"project","title":"Navigating to a meeting","estimatedTime":"5min","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/meetingnavigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"role":"pseudoSymbol","title":"SyncUpsList feature","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"role":"project","title":"Adding a meeting timer","estimatedTime":"25min","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/implementingtimer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"role":"project","title":"Testing the list of sync-ups","estimatedTime":"5min","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"role":"pseudoSymbol","title":"Removing attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"role":"symbol","title":"Exhaustivity.off(showSkippedAssertions:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"off"},{"kind":"text","text":"("},{"kind":"externalParam","text":"showSkippedAssertions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)"},"TestingSyncUpFormPresentation-01-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","    }","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15}]},"TestingSyncUpFormPresentation-02-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp_NonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","  }","  ","  @MainActor","  func testAddSyncUp() async {","    \/\/ ...","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-02-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}]},"TestingSyncUpFormPresentation-02-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp_NonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addSyncUpButtonTapped)","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)","  }","  ","  @MainActor","  func testAddSyncUp() async {","    \/\/ ...","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-02-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/fileStorage(_:)":{"role":"symbol","title":"fileStorage(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fileStorage"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"URL","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Creates a persistence key that can read and write to a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value to the file system."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/filestorage(_:)"},"TestingSyncUpFormPresentation-01-code-0007.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","    }","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0007.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"role":"pseudoSymbol","title":"Form focus: an approach","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach"},"TestingSyncUpFormPresentation-01-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case confirmAddButtonTapped","    case discardButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(","          syncUp: SyncUp(id: uuid())","        )","        return .none","","      case .addSyncUp:","        return .none","","      case .confirmAddButtonTapped:","        guard let newSyncUp = state.addSyncUp?.syncUp","        else { return .none }","        state.addSyncUp = nil","        state.syncUps.append(newSyncUp)","        return .none","","      case .discardButtonTapped:","        state.addSyncUp = nil","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}","",""],"fileName":"SyncUpsList.swift","identifier":"TestingSyncUpFormPresentation-01-code-0006.swift","type":"file","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":58},{"line":59}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"role":"project","title":"Lists of sync-ups","estimatedTime":"10min","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/listsofsyncups"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"role":"article","title":"What is SyncUps?","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/what-is-syncups-"},"TestingSyncUpFormPresentation-01-code-0011.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0011.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"role":"project","title":"Editing and deleting a sync-up","estimatedTime":"30min","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"role":"pseudoSymbol","title":"Integrating the feature views together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"role":"overview","title":"Building SyncUps","abstract":[{"type":"text","text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,"},{"type":"text","text":" "},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"type":"text","text":"domain modeling, controlling dependencies, and testability."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","kind":"overview","type":"topic","url":"\/tutorials\/buildingsyncups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"role":"project","title":"Testing the sync-up form","estimatedTime":"10min","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupform"},"TestingSyncUpFormPresentation-01-code-0009.swift":{"syntax":"swift","content":["import ComposableArchitecture","import XCTest","","@testable import SyncUps","","class SyncUpsListTests: XCTestCase {","  @MainActor","  func testAddSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    await store.send(\\.addSyncUp…)","  }","","  @MainActor","  func testDeletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-01-code-0009.swift","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"role":"pseudoSymbol","title":"Create the sync-up detail","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail"}}}