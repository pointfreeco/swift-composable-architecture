{"variants":[{"paths":["\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Your first presentation","chapter":"Navigation","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]}]},{"kind":"tasks","tasks":[{"anchor":"Project-set-up","title":"Project set up","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Suppose that you are working on an application that shows a list of contacts at the root, and"},{"type":"text","text":" "},{"type":"text","text":"you want to add the ability to create a new contact. This should be done by tapping a “+” icon"},{"type":"text","text":" "},{"type":"text","text":"in the UI, a sheet will be presented where you can enter the contact’s info, and then tapping"},{"type":"text","text":" "},{"type":"text","text":"a button will dismiss the sheet and add the contact to the list."}]}],"mediaPosition":"trailing","media":"ch02-sub01-sec01-image-0001.png"}],"stepsSection":[{"code":"02-01-01-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will start by creating a new file, ContactsFeature.swift, and we will get the very basics"},{"type":"text","text":" "},{"type":"text","text":"of our contacts feature in this file. Currently that consists of a simple "},{"type":"codeVoice","code":"Contact"},{"type":"text","text":" model"},{"type":"text","text":" "},{"type":"text","text":"data type, and a simple reducer with a collection of contacts, and a single action for when"},{"type":"text","text":" "},{"type":"text","text":"the “+” button is tapped. Currently that action is not yet implemented."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-01-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a view that holds onto a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" "},{"type":"text","text":"and observes the store in order to show a list of contacts and send actions."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-01-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a preview with a few stubbed contacts already in the state so that we can see what"},{"type":"text","text":" "},{"type":"text","text":"the feature looks like."}]}],"caption":[],"type":"step","runtimePreview":"ch02-sub01-sec01-image-0001.png","media":null},{"code":"02-01-01-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file, AddContactFeature.swift, that will hold the reducer and view for the"},{"type":"text","text":" "},{"type":"text","text":"feature that allows us to enter the name of a new contact. The feature will have a “Cancel”"},{"type":"text","text":" "},{"type":"text","text":"button for dismissing, and a “Save” button that when tapped should dismiss the feature"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" add the contact to the list of contacts in the parent."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-01-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a view that holds onto a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" "},{"type":"text","text":"and observes the state in order to show a text field for the contact name and send actions."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-01-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a preview so that we can see what the feature looks like."}]}],"caption":[],"type":"step","runtimePreview":"ch02-sub01-sec01-image-0002.png","media":null}]},{"anchor":"Integrate-reducers","title":"Integrate reducers","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have our two isolated features built, it is time to integrate them together so"},{"type":"text","text":" "},{"type":"text","text":"that you can navigate to the “Add Contact” screen from the contacts list screen. To do this we"},{"type":"text","text":" "},{"type":"text","text":"will first integrate the features’ reducers, which consists of utilizing"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" "},{"type":"text","text":"to integrate the domains, and the reducer operator"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:destination:fileID:line:)"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"integrate the reducers."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-01-02-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will start by integrating the features together at the reducer level. This takes a"},{"type":"text","text":" "},{"type":"text","text":"few steps. Go back to the ContactsFeature.swift file where we built the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" "},{"type":"text","text":"reducer for handling the logic and behavior of the list of contacts."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-02-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the features’ states together by using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" property wrapper to hold onto an optional"},{"type":"text","text":" "},{"type":"text","text":"value."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value represents that the “Add Contacts” feature is not presented, and a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"value represents that it is presented."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-02-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the feature’s actions together by adding a case that holds onto a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This allows the parent to observe every action sent from the child feature."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-02-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since a new case has been added to the action enum we must now handle it in the main"},{"type":"text","text":" "},{"type":"text","text":"reducer. For now we will do nothing for this case and return "},{"type":"codeVoice","code":".none"},{"type":"text","text":", but soon we will do"},{"type":"text","text":" "},{"type":"text","text":"more here."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-02-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the reducers together by making use of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:destination:fileID:line:)"},{"type":"text","text":" "},{"type":"text","text":"reducer operator."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This creates a new reducer that runs the child reducer when a child"},{"type":"text","text":" "},{"type":"text","text":"action comes into the system, and runs the parent reducer on all actions. It also"},{"type":"text","text":" "},{"type":"text","text":"automatically handles effect cancellation when the child feature is dismissed, and a lot"},{"type":"text","text":" "},{"type":"text","text":"more. See the documentation for more information."}]}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to integrate the two features’ domains together. Before moving onto the"},{"type":"text","text":" "},{"type":"text","text":"view, we can start flexing some of the muscles that the library gives us. Because the two"},{"type":"text","text":" "},{"type":"text","text":"features are so tightly integrated together we can now easily implement the presentation and"},{"type":"text","text":" "},{"type":"text","text":"dismissal of the “Add Contact” feature."}]},{"code":"02-01-02-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the “+” button is tapped in the contacts list feature we can now populate the"},{"type":"text","text":" "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" state to represent that the feature should be presented."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-02-code-0006","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the “Cancel” button is tapped "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inside"}]},{"type":"text","text":" the “Add Contacts” feature we want to dismiss"},{"type":"text","text":" "},{"type":"text","text":"the feature and do nothing else. This can be accomplished by simply "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"-ing out the"},{"type":"text","text":" "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" state."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are destructuring on the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},{"type":"text","text":" case in order to listen for"},{"type":"text","text":" "},{"type":"text","text":"actions inside the “Add Contact” feature."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-02-code-0007","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the “Save” button is tapped "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inside"}]},{"type":"text","text":" the “Add Contacts” feature we want to not only"},{"type":"text","text":" "},{"type":"text","text":"dismiss the feature, but we also want to add the new contact to the collection of contacts"},{"type":"text","text":" "},{"type":"text","text":"held in "},{"type":"codeVoice","code":"ContactsFeature.State"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to implement communication between parent and child features. The parent"},{"type":"text","text":" "},{"type":"text","text":"feature can create state in order to drive navigation, and the parent feature can listen for"},{"type":"text","text":" "},{"type":"text","text":"child actions to figure out what additional logic it wants to layer on. Next we need to"},{"type":"text","text":" "},{"type":"text","text":"integrate the views together."}]}]},{"anchor":"Integrate-views","title":"Integrate views","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have integrated the domain and reducers of the two features we must integrate"},{"type":"text","text":" "},{"type":"text","text":"their views. In particular, we will present an "},{"type":"codeVoice","code":"AddContactView"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"ContactsView"},{"type":"text","text":"."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-01-02-code-0008","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Recall that view currently looks like this. It is a simple list with a row for each contact,"},{"type":"text","text":" "},{"type":"text","text":"and we have a navigation title and toolbar. We need to figure out how to present a sheet"},{"type":"text","text":" "},{"type":"text","text":"in this view whenever the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" state flips to non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library comes with a variety of tools that mimic SwiftUI’s native navigation tools (such"},{"type":"text","text":" "},{"type":"text","text":"as sheets, popovers, fullscreen covers, alerts, and confirmation dialogs), but they take"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"s instead of bindings."}]},{"code":"02-01-02-code-0009","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"sheet(store:)"},{"type":"text","text":" view modifier by scoping your store down to just the presentation"},{"type":"text","text":" "},{"type":"text","text":"domain of the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" feature. When the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", a new"},{"type":"text","text":" "},{"type":"text","text":"store will be derived focused only on the "},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" domain, which is what you can"},{"type":"text","text":" "},{"type":"text","text":"pass to the "},{"type":"codeVoice","code":"AddContactView"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the app in the preview to show that it works as expected. Tapping the “+” icon brings up"},{"type":"text","text":" "},{"type":"text","text":"the “AddContactFeature” in a sheet, and tapping “Save” adds a new contact to the list,"},{"type":"text","text":" "},{"type":"text","text":"whereas tapping “Cancel” does not."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"ch02-sub01-sec03-image-0000.mov"}]},{"anchor":"Child-to-parent-communication","title":"Child-to-parent communication","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the previous sections we facilitated child-to-parent communication by having the parent"},{"type":"text","text":" "},{"type":"text","text":"reducer inspect the actions in the child so that we could determine when the “Save” and"},{"type":"text","text":" "},{"type":"text","text":"“Cancel” buttons were tapped. This is not ideal since it may lead to the parent making"},{"type":"text","text":" "},{"type":"text","text":"assumptions about what logic it should perform when something happens in the child feature."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A better pattern is to use so-called “delegate actions” for the child feature to directly tell"},{"type":"text","text":" "},{"type":"text","text":"the parent what it wants done."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-01-04-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to AddContactFeature.swift and add a new "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" action enum to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":". This enum will describe all the actions that the parent can listen for"},{"type":"text","text":" "},{"type":"text","text":"and interpret. It allows the child feature to directly tell the parent what it wants done."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-04-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle the new case in the reducer, but we should never actually perform any logic in this"},{"type":"text","text":" "},{"type":"text","text":"case. Only the parent should listen for "},{"type":"codeVoice","code":"delegate"},{"type":"text","text":" actions and respond accordingly."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-04-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Anytime we want the child feature to communicate to the parent we will return an effect that"},{"type":"text","text":" "},{"type":"text","text":"immediately and synchronously sends a delegate action. For example, when the “Save” button"},{"type":"text","text":" "},{"type":"text","text":"is tapped, we will send the "},{"type":"codeVoice","code":"saveContact"},{"type":"text","text":" action."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-04-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift and update the reducer to listen for delegate actions to"},{"type":"text","text":" "},{"type":"text","text":"figure out when it is time to dismiss or save the contact."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The application should work exactly has it did before the “delegate action” refactor, but now"},{"type":"text","text":" "},{"type":"text","text":"the child feature can accurately describe what it wants the parent to do rather than the"},{"type":"text","text":" "},{"type":"text","text":"parent make assumptions. There is still room for improvement though. It is very common for a"},{"type":"text","text":" "},{"type":"text","text":"child feature to want to dismiss itself, such as is the case when tapping “Cancel”. It is too"},{"type":"text","text":" "},{"type":"text","text":"cumbersome to create a delegate action just to communicate this to the parent, and so the"},{"type":"text","text":" "},{"type":"text","text":"library comes with a special tool for this."}]},{"code":"02-01-04-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to AddContactFeature.swift and add a dependency on"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":". This is a value that allows child features to"},{"type":"text","text":" "},{"type":"text","text":"dismiss themselves without any direct contact with the parent feature."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-04-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" dependency by returning an effect and invoking it. This will communicate"},{"type":"text","text":" "},{"type":"text","text":"with the parent in order for a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"type":"text","text":" action"},{"type":"text","text":" "},{"type":"text","text":"to be sent, which will clear out the state driving the presentation."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" dependency is asynchronous which means it is only appropriate to"},{"type":"text","text":" "},{"type":"text","text":"invoke from an effect."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-04-code-0006","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remove the "},{"type":"codeVoice","code":"cancel"},{"type":"text","text":" action from the "},{"type":"codeVoice","code":"Delegate"},{"type":"text","text":" enum because it is no longer needed. We do"},{"type":"text","text":" "},{"type":"text","text":"not need to explicitly communicate to the parent that it should dismiss the child. That is"},{"type":"text","text":" "},{"type":"text","text":"all handled by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-01-04-code-0007","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift. We can also remove the "},{"type":"codeVoice","code":"cancel"},{"type":"text","text":" logic from the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" reducer and it is no longer necessary to explicitly "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the"},{"type":"text","text":" "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" state. That is already taken care of."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Multiple presentation destinations","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Your first presentation","categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a conformance to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":" for implementing"},{"type":"text","text":" "},{"type":"text","text":"the logic and behavior of a feature, and then learn how to hook up that feature to a SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"role":"symbol","title":"DismissEffect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DismissEffect"}],"abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"role":"article","title":"Navigation","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"role":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"role":"symbol","title":"PresentationAction.presented(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An action sent to the associated, non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","title":"PresentationAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"role":"symbol","title":"ReducerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerProtocol"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerProtocol"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"role":"pseudoSymbol","title":"Testing effects","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","title":"Testing the add contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"02-01-01-code-0003":{"syntax":"swift","content":["import ComposableArchitecture","","struct AddContactFeature: ReducerProtocol {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case saveButtonTapped","    case setName(String)","  }","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .cancelButtonTapped:","      return .none","","    case .saveButtonTapped:","      return .none","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"fileName":"AddContactFeature.swift","identifier":"02-01-01-code-0003","type":"file","fileType":"swift","highlights":[]},"02-01-02-code-0007":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case .addContact(.presented(.cancelButtonTapped)):","        state.addContact = nil","        return .none","","      case .addContact(.presented(.saveButtonTapped)):","        guard let contact = state.addContact?.contact","        else { return .none }","        state.contacts.append(contact)","        state.addContact = nil","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0007","type":"file","fileType":"swift","highlights":[{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"role":"pseudoSymbol","title":"Create a reducer","abstract":[{"type":"text","text":"Learn how to create a conformance to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":" for implementing"},{"type":"text","text":" "},{"type":"text","text":"the logic and behavior of a feature, and then learn how to hook up that feature to a SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"02-01-02-code-0002":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0002","type":"file","fileType":"swift","highlights":[{"line":8}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"role":"pseudoSymbol","title":"Managing a timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a conformance to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":" for implementing"},{"type":"text","text":" "},{"type":"text","text":"the logic and behavior of a feature, and then learn how to hook up that feature to a SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"02-01-02-code-0009":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            Text(contact.name)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(","        state: \\.$addContact,","        action: { .addContact($0) }","      )","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0009","type":"file","fileType":"swift","highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33}]},"02-01-02-code-0003":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","","      case .addContact:","        return .none","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0003","type":"file","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18}]},"02-01-01-code-0000":{"syntax":"swift","content":["import ComposableArchitecture","","struct Contact: Equatable, Identifiable {","  let id: UUID","  var name: String","}","","struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-01-code-0000","type":"file","fileType":"swift","highlights":[]},"02-01-02-code-0004":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0004","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","title":"Contact detail feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"02-01-04-code-0004":{"syntax":"swift","content":["import ComposableArchitecture","","struct AddContactFeature: ReducerProtocol {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate {","      case cancel","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .cancelButtonTapped:","      return .send(.delegate(.cancel))","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .send(.delegate(.saveContact(state.contact)))","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"fileName":"AddContactFeature.swift","identifier":"02-01-04-code-0004","type":"file","fileType":"swift","highlights":[{"line":17}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"role":"project","title":"Testing presentation","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation"},"02-01-02-code-0008":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            Text(contact.name)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0008","type":"file","fileType":"swift","highlights":[]},"02-01-01-code-0001":{"syntax":"swift","content":["import SwiftUI","","struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            Text(contact.name)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-01-code-0001","type":"file","fileType":"swift","highlights":[]},"02-01-04-code-0001":{"syntax":"swift","content":["import ComposableArchitecture","","struct AddContactFeature: ReducerProtocol {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate {","      case cancel","      case saveContact(Contact)","    }","  }","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .cancelButtonTapped:","      return .none","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .none","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"fileName":"AddContactFeature.swift","identifier":"02-01-04-code-0001","type":"file","fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24}]},"02-01-02-code-0005":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0005","type":"file","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","title":"Testing your feature","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"02-01-04-code-0005":{"syntax":"swift","content":["import ComposableArchitecture","","struct AddContactFeature: ReducerProtocol {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate {","      case cancel","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .cancelButtonTapped:","      return .fireAndForget { await self.dismiss() }","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .run { [contact = state.contact] send in","        await send(.delegate(.saveContact(state.contact)))","        await self.dismiss()","      }","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"fileName":"AddContactFeature.swift","identifier":"02-01-04-code-0005","type":"file","fileType":"swift","highlights":[{"line":21},{"line":27},{"line":28},{"line":29},{"line":30}]},"ch02-sub01-sec01-image-0002.png":{"alt":null,"type":"image","identifier":"ch02-sub01-sec01-image-0002.png","variants":[{"url":"\/images\/ch02-sub01-sec01-image-0002.png","traits":["1x","light"]}]},"02-01-04-code-0003":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case .addContact(.presented(.delegate(.cancel))):","        state.addContact = nil","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        state.addContact = nil","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-04-code-0003","type":"file","fileType":"swift","highlights":[{"line":19},{"line":23}]},"ch02-sub01-sec01-image-0001.png":{"alt":null,"type":"image","identifier":"ch02-sub01-sec01-image-0001.png","variants":[{"url":"\/images\/ch02-sub01-sec01-image-0001.png","traits":["1x","light"]}]},"02-01-01-code-0004":{"syntax":"swift","content":["import SwiftUI","","struct AddContactView: View {","  let store: StoreOf<AddContactFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","        TextField(\"Name\", text: viewStore.binding(get: \\.contact.name, send: { .setName($0) }))","        Button(\"Save\") {","          viewStore.send(.saveButtonTapped)","        }","      }","      .toolbar {","        ToolbarItem {","          Button(\"Cancel\") {","            viewStore.send(.cancelButtonTapped)","          }","        }","      }","    }","  }","}"],"fileName":"AddContactFeature.swift","identifier":"02-01-01-code-0004","type":"file","fileType":"swift","highlights":[]},"02-01-04-code-0002":{"syntax":"swift","content":["import ComposableArchitecture","","struct AddContactFeature: ReducerProtocol {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate {","      case cancel","      case saveContact(Contact)","    }","  }","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .cancelButtonTapped:","      return .send(.delegate(.cancel))","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .send(.delegate(.saveContact(state.contact)))","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"fileName":"AddContactFeature.swift","identifier":"02-01-04-code-0002","type":"file","fileType":"swift","highlights":[{"line":20},{"line":26}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"role":"pseudoSymbol","title":"What is a side effect?","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"role":"project","title":"Multiple presentation destinations","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"role":"pseudoSymbol","title":"Child-to-parent communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"role":"project","title":"Adding side effects","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"02-01-01-code-0005":{"syntax":"swift","content":["struct AddContactPreviews: PreviewProvider {","  static var previews: some View {","    NavigationStack {","      AddContactView(","        store: Store(","          initialState: AddContactFeature.State(","            contact: Contact(","              id: UUID(),","              name: \"Blob\"","            )","          ),","          reducer: AddContactFeature()","        )","      )","    }","  }","}"],"fileName":"AddContactFeature.swift","identifier":"02-01-01-code-0005","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"ch02-sub01-sec03-image-0000.mov":{"poster":null,"alt":null,"type":"video","identifier":"ch02-sub01-sec03-image-0000.mov","variants":[{"url":"\/videos\/ch02-sub01-sec03-image-0000.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"role":"pseudoSymbol","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail"},"02-01-02-code-0001":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0001","type":"file","fileType":"swift","highlights":[{"line":3}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"role":"project","title":"Your first presentation","estimatedTime":"30min","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"role":"pseudoSymbol","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"02-01-04-code-0006":{"syntax":"swift","content":["import ComposableArchitecture","","struct AddContactFeature: ReducerProtocol {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate {","      \/\/ case cancel","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .cancelButtonTapped:","      return .fireAndForget { await self.dismiss() }","","    case .delegate:","      return .none","","    case .saveButtonTapped:","      return .run { [contact = state.contact] send in","        await send(.delegate(.saveContact(state.contact)))","        await self.dismiss()","      }","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"fileName":"AddContactFeature.swift","identifier":"02-01-04-code-0006","type":"file","fileType":"swift","highlights":[{"line":13}]},"02-01-04-code-0007":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      \/\/ case .addContact(.presented(.delegate(.cancel))):","      \/\/   state.addContact = nil","      \/\/   return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        \/\/ state.addContact = nil","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-04-code-0007","type":"file","fileType":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":25}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","title":"PresentationState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","title":"Essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"role":"pseudoSymbol","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"02-01-01-code-0002":{"syntax":"swift","content":["struct ContentView_Previews: PreviewProvider {","  static var previews: some View {","    ContentView(","      store: Store(","        initialState: ContactsFeature.State(","          contacts: [","            Contact(id: UUID(), name: \"Blob\"),","            Contact(id: UUID(), name: \"Blob Jr\"),","            Contact(id: UUID(), name: \"Blob Sr\"),","          ]","        ),","        reducer: ContactsFeature()","      )","    )","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-01-code-0002","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","title":"Improve domain modeling","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"role":"symbol","title":"PresentationAction.dismiss","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}],"abstract":[{"type":"text","text":"An action sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/ifLet(_:action:destination:fileID:line:)":{"role":"symbol","title":"ifLet(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_PresentationReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:destination:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducerprotocol\/iflet(_:action:destination:fileid:line:)"},"02-01-02-code-0006":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case .addContact(.presented(.cancelButtonTapped)):","        state.addContact = nil","        return .none","","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0006","type":"file","fileType":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","estimatedTime":"20min","abstract":[{"type":"text","text":"Learn how to create a conformance to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":" for implementing"},{"type":"text","text":" "},{"type":"text","text":"the logic and behavior of a feature, and then learn how to hook up that feature to a SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"role":"pseudoSymbol","title":"Testing state changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"02-01-02-code-0000":{"syntax":"swift","content":["struct ContactsFeature: ReducerProtocol {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","  }","  var body: some ReducerProtocolOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-01-02-code-0000","type":"file","fileType":"swift","highlights":[]},"02-01-04-code-0000":{"syntax":"swift","content":["import ComposableArchitecture","","struct AddContactFeature: ReducerProtocol {","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate {","      case cancel","      case saveContact(Contact)","    }","  }","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .cancelButtonTapped:","      return .none","","    case .saveButtonTapped:","      return .none","","    case let .setName(name):","      state.contact.name = name","      return .none","    }","  }","}"],"fileName":"AddContactFeature.swift","identifier":"02-01-04-code-0000","type":"file","fileType":"swift","highlights":[{"line":9},{"line":12},{"line":13},{"line":14},{"line":15}]}}}