{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tree-based navigation is the process of modeling navigation using optional and enum state. This"},{"type":"text","text":" "},{"type":"text","text":"style of navigation allows you to deep-link into any state of your application by simply"},{"type":"text","text":" "},{"type":"text","text":"constructing a deeply nested piece of state, handing it off to SwiftUI, and letting it take care of"},{"type":"text","text":" "},{"type":"text","text":"the rest."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Basics"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Enum-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Integration"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Dismissal"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing"}]}]}]},{"anchor":"Basics","level":2,"type":"heading","text":"Basics"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The tools for this style of navigation include the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" property wrapper,"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":", the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)"},{"type":"text","text":" operator, and a bunch of"},{"type":"text","text":" "},{"type":"text","text":"APIs that mimic SwiftUI’s regular tools, such as "},{"type":"codeVoice","code":".sheet"},{"type":"text","text":", "},{"type":"codeVoice","code":".popover"},{"type":"text","text":", etc., but tuned specifically"},{"type":"text","text":" "},{"type":"text","text":"for the Composable Architecture."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The process of integrating two features together for navigation largely consists of 2 steps:"},{"type":"text","text":" "},{"type":"text","text":"integrating the features’ domains together and integrating the features’ views together. One"},{"type":"text","text":" "},{"type":"text","text":"typically starts by integrating the features’ domains together. This consists of adding the child’s"},{"type":"text","text":" "},{"type":"text","text":"state and actions to the parent, and then utilizing a reducer operator to compose the child reducer"},{"type":"text","text":" "},{"type":"text","text":"into the parent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have a list of items and you want to be able to show a sheet to display a"},{"type":"text","text":" "},{"type":"text","text":"form for adding a new item. We can integrate state and actions together by utilizing the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" types:"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addItem: ItemFormFeature.State?","    var items: IdentifiedArrayOf<Item> = []","    \/\/ ...","  }","","  enum Action: Equatable {","    case addItem(PresentationAction<ItemFormFeature.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"addItem"},{"type":"text","text":" state is held as an optional. A non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value represents that feature is"},{"type":"text","text":" "},{"type":"text","text":"being presented, and "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presents the feature is dismissed."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next you can integrate the reducers of the parent and child features by using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)"},{"type":"text","text":" reducer operator, as well as having an action in the"},{"type":"text","text":" "},{"type":"text","text":"parent domain for populating the child’s state to drive navigation:"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryFeature: Reducer {","  struct State: Equatable { \/* ... *\/ }","  enum Action: Equatable { \/* ... *\/ }","  ","  var body: some ReducerOf<Self> {","    Reduce<State, Action> { state, action in ","      switch action {","      case .addButtonTapped:","        \/\/ Populating this state performs the navigation","        state.addItem = ItemFormFeature.State()","        return .none","","      \/\/ ...","      }","    }","    .ifLet(\\.$addItem, action: \/Action.addItem) {","      ItemFormFeature()","    }","  }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The key path used with "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" focuses on the "},{"type":"codeVoice","code":"@PresentationState"},{"type":"text","text":" projected value since it"},{"type":"text","text":" "},{"type":"text","text":"uses the "},{"type":"codeVoice","code":"$"},{"type":"text","text":" syntax. Also note that the action uses a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"type":"text","text":", which is analogous to key paths but"},{"type":"text","text":" "},{"type":"text","text":"tuned for enums, and uses the forward slash syntax."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all that it takes to integrate the domains and logic of the parent and child features. Next"},{"type":"text","text":" "},{"type":"text","text":"we need to integrate the features’ views. This is done using view modifiers that look similar to"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s, but are tuned specifically to work with the Composable Architecture."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, to show a sheet from the "},{"type":"codeVoice","code":"addItem"},{"type":"text","text":" state in the "},{"type":"codeVoice","code":"InventoryFeature"},{"type":"text","text":", we can use"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"sheet(store:)"},{"type":"text","text":" modifier that takes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" as an argument that is focused on presentation"},{"type":"text","text":" "},{"type":"text","text":"state and actions:"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryView: View {","  let store: StoreOf<InventoryFeature>","","  var body: some View {","    List {","      \/\/ ...","    }","    .sheet(","      store: self.store.scope(state: \\.$addItem, action: { .addItem($0) })","    ) { store in","      ItemFormView(store: store)","    }","  }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We again must specify a key path to the "},{"type":"codeVoice","code":"@PresentationState"},{"type":"text","text":" projected value, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"type":"text","text":" "},{"type":"codeVoice","code":"\\.$addItem"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With those few steps completed the domains and views of the parent and child features are now"},{"type":"text","text":" "},{"type":"text","text":"integrated together, and when the "},{"type":"codeVoice","code":"addItem"},{"type":"text","text":" state flips to a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value the sheet will be"},{"type":"text","text":" "},{"type":"text","text":"presented, and when it is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"’d out it will be dismissed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example we are using the "},{"type":"codeVoice","code":".sheet"},{"type":"text","text":" view modifier, but the library ships with overloads for"},{"type":"text","text":" "},{"type":"text","text":"all of SwiftUI’s navigation APIs that take stores of presentation domain, including:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"alert(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"confirmationDialog(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sheet(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"popover(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"fullScreenCover(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"navigationDestination(store:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This should make it possible to use optional state to drive any kind of navigation in a SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"application."}]},{"anchor":"Enum-state","level":2,"type":"heading","text":"Enum state"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While driving navigation with optional state can be powerful, it can also lead to less-than-ideal"},{"type":"text","text":" "},{"type":"text","text":"modeled domains. In particular, if a feature can navigate to multiple screens then you may be"},{"type":"text","text":" "},{"type":"text","text":"tempted to model that with multiple optional values:"}]},{"type":"codeListing","syntax":"swift","code":["struct State {","  @PresentationState var detailItem: DetailFeature.State?","  @PresentationState var editItem: EditFeature.State?","  @PresentationState var addItem: AddFeature.State?","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this can lead to invalid states, such as 2 or more states being non-nil at the same time,"},{"type":"text","text":" "},{"type":"text","text":"and that can cause a lot of problems. First of all, SwiftUI does not support presenting multiple"},{"type":"text","text":" "},{"type":"text","text":"views at the same time from a single view, and so by allowing this in our state we run the risk of"},{"type":"text","text":" "},{"type":"text","text":"putting our application into an inconsistent state with respect to SwiftUI."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Second, it becomes more difficult for us to determine what feature is actually being presented. We"},{"type":"text","text":" "},{"type":"text","text":"must check multiple optionals to figure out which one is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", and then we must figure out how"},{"type":"text","text":" "},{"type":"text","text":"to interpret when multiple pieces of state are non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at the same time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And the number of invalid states increases exponentially with respect to the number of features that"},{"type":"text","text":" "},{"type":"text","text":"can be navigated to. For example, 3 optionals leads to 4 invalid states, 4 optionals leads to 11"},{"type":"text","text":" "},{"type":"text","text":"invalid states, and 5 optionals leads to 26 invalid states."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For these reasons, and more, it can be better to model multiple destinations in a feature as a"},{"type":"text","text":" "},{"type":"text","text":"single enum rather than multiple optionals. So the example of above, with 3 optionals, can be"},{"type":"text","text":" "},{"type":"text","text":"refactored as an enum:"}]},{"type":"codeListing","syntax":"swift","code":["enum State {","  case addItem(AddFeature.State)","  case detailItem(DetailFeature.State)","  case editItem(EditFeature.State)","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives us compile-time proof that only one single destination can be active at a time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to utilize this style of domain modeling you must take a few extra steps. First you model a"},{"type":"text","text":" "},{"type":"text","text":"“destination” reducer that encapsulates the domains and behavior of all of the features that you can"},{"type":"text","text":" "},{"type":"text","text":"navigate to. And typically it’s best to nest this reducer inside the feature that can perform the"},{"type":"text","text":" "},{"type":"text","text":"navigation:"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryFeature: Reducer {","  \/\/ ...","","  struct Destination: Reducer {","    enum State {","      case addItem(AddFeature.State)","      case detailItem(DetailFeature.State)","      case editItem(EditFeature.State)","    }","    enum Action {","      case addItem(AddFeature.Action)","      case detailItem(DetailFeature.Action)","      case editItem(EditFeature.Action)","    }","    var body: some ReducerOf<Self> {","      Scope(state: \/State.addItem, action: \/Action.addItem) { ","        AddFeature()","      }","      Scope(state: \/State.editItem, action: \/Action.editItem) { ","        EditFeature()","      }","      Scope(state: \/State.detailItem, action: \/Action.detailItem) { ","        DetailFeature()","      }","    }","  }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Both the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" types nested in the reducer are enums, with a case for each"},{"type":"text","text":" "},{"type":"text","text":"screen that can be navigated to. Further, the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" computed property has a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" reducer for"},{"type":"text","text":" "},{"type":"text","text":"each feature, and uses case paths for focusing in on the specific case of the state and action"},{"type":"text","text":" "},{"type":"text","text":"enums."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that done we can now hold onto a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"single"}]},{"type":"text","text":" piece of optional state in our feature, using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" property wrapper, and we hold onto the destination actions using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" type:"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryFeature: Reducer {","  struct State { ","    @PresentationState var destination: Destination.State?","    \/\/ ...","  }","  enum Action {","    case destination(PresentationAction<Destination.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now when we want to present a particular feature we can simply populate the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state"},{"type":"text","text":" "},{"type":"text","text":"with a case of the enum:"}]},{"type":"codeListing","syntax":"swift","code":["case addButtonTapped:","  state.destination = .addItem(AddFeature.State())","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And at any time we can figure out exactly what feature is being presented by switching or otherwise"},{"type":"text","text":" "},{"type":"text","text":"destructuring the single piece of "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state rather than checking multiple optional values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final step is to make use of the special view modifiers that come with this library that mimic"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s APIs, but are tuned specifically for enum state. In particular, you provide a store that"},{"type":"text","text":" "},{"type":"text","text":"is focused in on the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" domain, and then provide transformations for isolating a"},{"type":"text","text":" "},{"type":"text","text":"particular case of the state and action enums."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose the “add” screen is presented as a sheet, the “edit” screen is presented"},{"type":"text","text":" "},{"type":"text","text":"by a popover, and the “detail” screen is presented in a drill-down. Then we can use the"},{"type":"text","text":" "},{"type":"codeVoice","code":".sheet(store:state:action:)"},{"type":"text","text":", "},{"type":"codeVoice","code":".popover(store:state:action:)"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"codeVoice","code":".navigationDestination(store:state:action:)"},{"type":"text","text":" view modifiers to have each of those styles of"},{"type":"text","text":" "},{"type":"text","text":"presentation powered by the respective case of the destination enum:"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryView: View {","  let store: StoreOf<InventoryFeature>","","  var body: some View {","    List {","      \/\/ ...","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/InventoryFeature.Destination.State.addItem,","      action: InventoryFeature.Destination.Action.addItem","    ) { store in ","      AddFeatureView(store: store)","    }","    .popover(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/InventoryFeature.Destination.State.editItem,","      action: InventoryFeature.Destination.Action.editItem","    ) { store in ","      EditFeatureView(store: store)","    }","    .navigationDestination(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/InventoryFeature.Destination.State.detailItem,","      action: InventoryFeature.Destination.Action.detailItem","    ) { store in ","      DetailFeatureView(store: store)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With those steps completed you can be sure that your domains are modeled as concisely as possible."},{"type":"text","text":" "},{"type":"text","text":"If the “add” item sheet was presented, and you decided to mutate the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state to point"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":".detailItem"},{"type":"text","text":" case, then you can be certain that the sheet will be dismissed and the"},{"type":"text","text":" "},{"type":"text","text":"drill-down will occur immediately."}]},{"anchor":"API-Unification","level":4,"type":"heading","text":"API Unification"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the best features of tree-based navigation is that it unifies all forms of navigation with a"},{"type":"text","text":" "},{"type":"text","text":"single style of API. First of all, regardless of the type of navigation you plan on performing,"},{"type":"text","text":" "},{"type":"text","text":"integrating the parent and child features together can be done with the single"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)"},{"type":"text","text":" operator. This one single API services all"},{"type":"text","text":" "},{"type":"text","text":"forms of optional-driven navigation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in the view, whether you are wanting to perform a drill-down, show a sheet, display"},{"type":"text","text":" "},{"type":"text","text":"an alert, or even show a custom navigation component, all you need to do is invoke an API that"},{"type":"text","text":" "},{"type":"text","text":"is provided a store focused on some "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":". If you do"},{"type":"text","text":" "},{"type":"text","text":"that, then the API can handle the rest, making sure to present the child view when the state"},{"type":"text","text":" "},{"type":"text","text":"becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and dismissing when it goes back to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that theoretically you could have a single view that needs to be able to show a sheet,"},{"type":"text","text":" "},{"type":"text","text":"popover, drill-down, alert "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" confirmation dialog, and all of the work to display the various"},{"type":"text","text":" "},{"type":"text","text":"forms of navigation could be as simple as this:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(","  store: self.store.scope(state: \\.addItem, action: { .addItem($0) })",") { store in ","  AddFeatureView(store: store)","}",".popover(","  store: self.store.scope(state: \\.editItem, action: { .editItem($0) })",") { store in ","  EditFeatureView(store: store)","}",".navigationDestination(","  store: self.store.scope(state: \\.detailItem, action: { .detailItem($0) })",") { store in ","  DetailFeatureView(store: store)","}",".alert(","  store: self.store.scope(state: \\.alert, action: { .alert($0) })",")",".confirmationDialog(","  store: self.store.scope(state: \\.confirmationDialog, action: { .confirmationDialog($0) })",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In each case we provide a store scoped to the presentation domain, and a view that will be presented"},{"type":"text","text":" "},{"type":"text","text":"when its corresponding state flips to non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". It is incredibly powerful to see that so many"},{"type":"text","text":" "},{"type":"text","text":"seemingly disparate forms of navigation can be unified under a single style of API."}]},{"anchor":"Integration","level":2,"type":"heading","text":"Integration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once your features are integrated together using the steps above, your parent feature gets instant"},{"type":"text","text":" "},{"type":"text","text":"access to everything happening inside the child feature. You can use this as a means to integrate"},{"type":"text","text":" "},{"type":"text","text":"the logic of child and parent features. For example, if you want to detect when the “Save” button"},{"type":"text","text":" "},{"type":"text","text":"inside the edit feature is tapped, you can simply destructure on that action. This consists of"},{"type":"text","text":" "},{"type":"text","text":"pattern matching on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":", then the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},{"type":"text","text":" case,"},{"type":"text","text":" "},{"type":"text","text":"then the feature you are interested in, and finally the action you are interested in:"}]},{"type":"codeListing","syntax":"swift","code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  \/\/ ..."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once inside that case you can then try extracting out the feature state so that you can perform"},{"type":"text","text":" "},{"type":"text","text":"additional logic, such as closing the “edit” feature and saving the edited item to the database:"}]},{"type":"codeListing","syntax":"swift","code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  guard case let .editItem(editItemState) = self.destination","  else { return .none }","","  state.destination = nil","  return .fireAndForget {","    self.database.save(editItemState.item)","  }"]},{"anchor":"Dismissal","level":2,"type":"heading","text":"Dismissal"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dismissing a presented feature is as simple as "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"-ing out the state that represents the"},{"type":"text","text":" "},{"type":"text","text":"presented feature:"}]},{"type":"codeListing","syntax":"swift","code":["case .closeButtonTapped:","  state.destination = nil","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the presenting state you must have access to that state, and usually only the"},{"type":"text","text":" "},{"type":"text","text":"parent has access, but often we would like to encapsulate the logic of dismissing a feature to be"},{"type":"text","text":" "},{"type":"text","text":"inside the child feature without needing explicit communication with the parent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI provides a wonderful tool for allowing child "},{"type":"emphasis","inlineContent":[{"type":"text","text":"views"}]},{"type":"text","text":" to dismiss themselves from the parent,"},{"type":"text","text":" "},{"type":"text","text":"all without any explicit communication with the parent. It’s an environment value called "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and it can be used like so:"}]},{"type":"codeListing","syntax":"swift","code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked, SwiftUI finds the closet parent view with a presentation, and"},{"type":"text","text":" "},{"type":"text","text":"causes it to dismiss by writing "},{"type":"codeVoice","code":"false"},{"type":"text","text":" or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to the binding that drives the presentation. This"},{"type":"text","text":" "},{"type":"text","text":"can be incredibly useful, but it is also relegated to the view layer. It is not possible to use"},{"type":"text","text":" "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" elsewhere, like in an observable object, which would allow you to have nuanced logic"},{"type":"text","text":" "},{"type":"text","text":"for dismissal such as validation or async work."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,"},{"type":"text","text":" "},{"type":"text","text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s"},{"type":"text","text":" "},{"type":"text","text":"dependency management system (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"type":"text","text":") using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: Reducer {","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .closeButtonTapped:","      return .fireAndForget { await self.dismiss() }","    } ","  }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":" function is async which means it cannot be invoked directly inside a"},{"type":"text","text":" "},{"type":"text","text":"reducer. Instead it must be called from either"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/run(priority:operation:catch:fileID:line:)"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/fireAndForget(priority:_:)"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked it will "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the state responsible for presenting the feature"},{"type":"text","text":" "},{"type":"text","text":"by sending a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"type":"text","text":" action back into the system, causing the feature to be"},{"type":"text","text":" "},{"type":"text","text":"dismissed. This allows you to encapsulate the logic for dismissing a child feature entirely inside"},{"type":"text","text":" "},{"type":"text","text":"the child domain without explicitly communicating with the parent."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because dismissal is handled by sending an action, it is not valid to ever send an action"},{"type":"text","text":" "},{"type":"text","text":"after invoking "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To do so would be to send an action for a feature while its state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", and that will cause"},{"type":"text","text":" "},{"type":"text","text":"a runtime warning in Xcode and a test failure when running tests."}]}],"type":"aside","name":"Note"},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI’s environment value "},{"type":"codeVoice","code":"@Environment(\\.dismiss)"},{"type":"text","text":" and the Composable Architecture’s"},{"type":"text","text":" "},{"type":"text","text":"dependency value "},{"type":"codeVoice","code":"@Dependency(\\.dismiss)"},{"type":"text","text":" serve similar purposes, but are completely different"},{"type":"text","text":" "},{"type":"text","text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s"},{"type":"text","text":" "},{"type":"text","text":"dependency value can only be used inside reducers."}]}],"type":"aside","name":"Warning"},{"anchor":"Testing","level":2,"type":"heading","text":"Testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A huge benefit of properly modeling your domains for navigation is that testing becomes quite easy."},{"type":"text","text":" "},{"type":"text","text":"Further, using “non-exhaustive testing” (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":") can be very"},{"type":"text","text":" "},{"type":"text","text":"useful for testing navigation since you often only want to assert on a few high level details and"},{"type":"text","text":" "},{"type":"text","text":"not all state mutations and effects."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, consider the following simple counter feature that wants to dismiss itself if its"},{"type":"text","text":" "},{"type":"text","text":"count is greater than or equal to 5:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","  }","  enum Action: Equatable {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return state.count >= 5","        ? .fireAndForget { await self.dismiss() }","        : .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then let’s embed that feature into a parent feature using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: Reducer {","  struct State: Equatable {","    @PresentationState var counter: CounterFeature.State?","  }","  enum Action: Equatable {","    case counter(CounterFeature.Action)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .ifLet(\\.$counter, action: \/Action.counter) {","      CounterFeature()","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s try to write a test on the "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer that proves that when the child counter"},{"type":"text","text":" "},{"type":"text","text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" for "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" that starts in a state with the count already set to 3:"}]},{"type":"codeListing","syntax":"swift","code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can send the "},{"type":"codeVoice","code":".incrementButtonTapped"},{"type":"text","text":" action in the counter child feature to confirm"},{"type":"text","text":" "},{"type":"text","text":"that the count goes up by one:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.counter(.presented(.incrementButtonTapped))) {","  $0.counter?.count = 4","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we can send it one more time to see that the count goes up to 5:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.counter(.presented(.incrementButtonTapped))) {","  $0.counter?.count = 5","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we finally expect that the child dismisses itself, which manifests itself as the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"type":"text","text":" action being sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the "},{"type":"codeVoice","code":"counter"},{"type":"text","text":" state, which we can"},{"type":"text","text":" "},{"type":"text","text":"assert using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-1rwdd"},{"type":"text","text":" method on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["await store.receive(.counter(.dismiss)) {","  $0.counter = nil","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This shows how we can write very nuanced tests on how parent and child features interact with each"},{"type":"text","text":" "},{"type":"text","text":"other."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, the more complex the features become, the more cumbersome testing their integration can be."},{"type":"text","text":" "},{"type":"text","text":"By default, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" requires us to be exhaustive in our assertions. We must assert on how"},{"type":"text","text":" "},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"type":"text","text":" "},{"type":"text","text":"sure that all effects finish by the end of the test (see "},{"type":"reference","isActive":true,"identifier":"docs:Testing"},{"type":"text","text":" for more info)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" also supports a form of testing known as “non-exhaustive testing” that allows you"},{"type":"text","text":" "},{"type":"text","text":"to assert on only the parts of the features that you actually care about (see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":" for more info)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if we turn off exhaustivity on the test store (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"type":"text","text":") then we"},{"type":"text","text":" "},{"type":"text","text":"can assert at a high level that when the increment button is tapped twice that eventually we receive"},{"type":"text","text":" "},{"type":"text","text":"a dismiss action:"}]},{"type":"codeListing","syntax":"swift","code":["func testDismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(.counter(.presented(.incrementButtonTapped)))","  await store.send(.counter(.presented(.incrementButtonTapped)))","  await store.receive(.counter(.dismiss)) ","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer"},{"type":"text","text":" "},{"type":"text","text":"lines and is more resilient to future changes in the features that we don’t necessarily care about."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is the basics of testing, but things get a little more complicated when you leverage the"},{"type":"text","text":" "},{"type":"text","text":"concepts outlined in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state"},{"type":"text","text":" in which you model multiple destinations"},{"type":"text","text":" "},{"type":"text","text":"as an enum instead of multiple optionals. In order to assert on state changes when using enum"},{"type":"text","text":" "},{"type":"text","text":"state you must be able to extract the associated state from the enum, make a mutation, and then"},{"type":"text","text":" "},{"type":"text","text":"embed the new state back into the enum."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library provides a tool to perform these steps in a single step, and it is called "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.destination(.presented(.counter(.incrementButtonTapped)))) {","  XCTModify(&$0.destination, case: \/Feature.Destination.State.counter) { ","    $0.count = 4","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"XCTModify"},{"type":"text","text":" function takes an "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" piece of enum state as its first argument and a case"},{"type":"text","text":" "},{"type":"text","text":"path for its second argument, and then uses the case path to extract the payload in that case,"},{"type":"text","text":" "},{"type":"text","text":"allow you to perform a mutation to it, and embed the data back into the enum. So, in the code"},{"type":"text","text":" "},{"type":"text","text":"above, we are wanting to mutate the "},{"type":"codeVoice","code":"$0.destination"},{"type":"text","text":" enum by isolating the "},{"type":"codeVoice","code":".counter"},{"type":"text","text":" case,"},{"type":"text","text":" "},{"type":"text","text":"and mutating the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" to be 4 since it incremented by one. Further, if the case of"},{"type":"text","text":" "},{"type":"codeVoice","code":"$0.destination"},{"type":"text","text":" didn’t match the case path, then a test failure would be emitted."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/treebasednavigation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including"},{"type":"text","text":" "},{"type":"text","text":"how to model your domains, how to integrate features, how to test your features, and more."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Tree-based navigation","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"seeAlsoSections":[{"title":"Tree-based navigation","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"],"generated":true}],"references":{"#Testing":{"title":"Testing","titleInlineContent":[{"type":"text","text":"Testing"}],"type":"link","identifier":"#Testing","url":"#Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"role":"article","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","title":"PresentationAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"deprecated":true,"role":"symbol","title":"NavigationLinkStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationLinkStore"}],"abstract":[{"type":"text","text":"A view that controls a navigation presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NavigationLinkStore"}],"url":"\/documentation\/composablearchitecture\/navigationlinkstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"role":"symbol","title":"PresentationAction.dismiss","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}],"abstract":[{"type":"text","text":"An action sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"role":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/composablearchitecture\/scope"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"role":"collectionGroup","title":"Navigation","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)":{"role":"symbol","title":"ifLet(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_PresentationReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:line:)"},"#Dismissal":{"title":"Dismissal","titleInlineContent":[{"type":"text","text":"Dismissal"}],"type":"link","identifier":"#Dismissal","url":"#Dismissal"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"abstract":[],"title":"Non-exhaustive testing","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"role":"symbol","title":"DismissEffect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DismissEffect"}],"abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect"},"docs:Testing":{"title":"docs:Testing","titleInlineContent":[{"type":"text","text":"docs:Testing"}],"type":"link","identifier":"docs:Testing","url":"docs:Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","title":"PresentationState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/run(priority:operation:catch:fileID:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"run(priority:operation:catch:fileID:line:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/run(priority:operation:catch:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effectpublisher\/run(priority:operation:catch:fileid:line:)"},"#Basics":{"title":"Basics","titleInlineContent":[{"type":"text","text":"Basics"}],"type":"link","identifier":"#Basics","url":"#Basics"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"abstract":[],"title":"Enum state","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state"},"#Enum-state":{"title":"Enum state","titleInlineContent":[{"type":"text","text":"Enum state"}],"type":"link","identifier":"#Enum-state","url":"#Enum-state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"role":"symbol","title":"PresentationAction.presented(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An action sent to the associated, non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:then:fileID:line:)":{"role":"symbol","title":"ifLet(_:action:then:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"WrappedState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"WrappedAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"WrappedState"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"WrappedAction"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_IfLetReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:then:fileid:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/fireAndForget(priority:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"fireAndForget(priority:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fireAndForget"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/fireAndForget(priority:_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/effectpublisher\/fireandforget(priority:_:)"},"#Integration":{"title":"Integration","titleInlineContent":[{"type":"text","text":"Integration"}],"type":"link","identifier":"#Integration","url":"#Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:file:line:)-1rwdd":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ScopedState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"receive(_:timeout:assert:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ScopedState"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:file:line:)-1rwdd","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:file:line:)-1rwdd"},"http://github.com/pointfreeco/swift-case-paths":{"title":"case path","titleInlineContent":[{"type":"text","text":"case path"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"role":"symbol","title":"exhaustivity","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity"}}}