{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@dynamicMemberLookup"},{"kind":"text","text":" "},{"kind":"attribute","text":"@propertyWrapper"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableState"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Along with an action type that conforms to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" protocol, this type can be"},{"type":"text","text":" "},{"type":"text","text":"used to safely eliminate the boilerplate that is typically incurred when working with multiple"},{"type":"text","text":" "},{"type":"text","text":"mutable fields on state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, a settings screen may model its state with the following struct:"}]},{"type":"codeListing","syntax":"swift","code":["struct SettingsState {","  var digest = Digest.daily","  var displayName = \"\"","  var enableNotifications = false","  var isLoading = false","  var protectMyPosts = false","  var sendEmailNotifications = false","  var sendMobileNotifications = false","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The majority of these fields should be editable by the view, and in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture this means that each field requires a corresponding action that can be sent to"},{"type":"text","text":" "},{"type":"text","text":"the store. Typically this comes in the form of an enum with a case per field:"}]},{"type":"codeListing","syntax":"swift","code":["enum SettingsAction {","  case digestChanged(Digest)","  case displayNameChanged(String)","  case enableNotificationsChanged(Bool)","  case protectMyPostsChanged(Bool)","  case sendEmailNotificationsChanged(Bool)","  case sendMobileNotificationsChanged(Bool)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And we’re not even done yet. In the reducer we must now handle each action, which simply"},{"type":"text","text":" "},{"type":"text","text":"replaces the state at each field with a new value:"}]},{"type":"codeListing","syntax":"swift","code":["let settingsReducer = Reducer<","  SettingsState, SettingsAction, SettingsEnvironment","> { state, action, environment in","  switch action {","  case let digestChanged(digest):","    state.digest = digest","    return .none","","  case let displayNameChanged(displayName):","    state.displayName = displayName","    return .none","","  case let enableNotificationsChanged(isOn):","    state.enableNotifications = isOn","    return .none","","  case let protectMyPostsChanged(isOn):","    state.protectMyPosts = isOn","    return .none","","  case let sendEmailNotificationsChanged(isOn):","    state.sendEmailNotifications = isOn","    return .none","","  case let sendMobileNotificationsChanged(isOn):","    state.sendMobileNotifications = isOn","    return .none","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lot"}]},{"type":"text","text":" of boilerplate for something that should be simple. Luckily, we can"},{"type":"text","text":" "},{"type":"text","text":"dramatically eliminate this boilerplate using "},{"type":"codeVoice","code":"BindableState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, we can annotate each bindable value of state with the "},{"type":"codeVoice","code":"@BindableState"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["struct SettingsState {","  @BindableState var digest = Digest.daily","  @BindableState var displayName = \"\"","  @BindableState var enableNotifications = false","  var isLoading = false","  @BindableState var protectMyPosts = false","  @BindableState var sendEmailNotifications = false","  @BindableState var sendMobileNotifications = false","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each annotated field is directly to bindable to SwiftUI controls, like pickers, toggles, and"},{"type":"text","text":" "},{"type":"text","text":"text fields. Notably, the "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" property is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" annotated as being bindable, which"},{"type":"text","text":" "},{"type":"text","text":"prevents the view from mutating this value directly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we can conform the action type to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" by collapsing all of the"},{"type":"text","text":" "},{"type":"text","text":"individual, field-mutating actions into a single case that holds a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":" generic"},{"type":"text","text":" "},{"type":"text","text":"over the reducer’s "},{"type":"codeVoice","code":"SettingsState"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["enum SettingsAction: BindableAction {","  case binding(BindingAction<SettingsState>)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then, we can simplify the settings reducer by allowing the "},{"type":"codeVoice","code":"binding"},{"type":"text","text":" method to handle"},{"type":"text","text":" "},{"type":"text","text":"these field mutations for us:"}]},{"type":"codeListing","syntax":"swift","code":["let settingsReducer = Reducer<","  SettingsState, SettingsAction, SettingsEnvironment","> {","  switch action {","  case .binding:","    return .none","  }","}",".binding()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions are constructed and sent to the store by calling "},{"type":"codeVoice","code":"ViewStore\/binding(_:)"},{"type":"text","text":" "},{"type":"text","text":"with a key path to the bindable state:"}]},{"type":"codeListing","syntax":"swift","code":["TextField(\"Display name\", text: viewStore.binding(\\.$displayName))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you need to layer additional functionality over these bindings, your reducer can"},{"type":"text","text":" "},{"type":"text","text":"pattern match the action for a given key path:"}]},{"type":"codeListing","syntax":"swift","code":["case .binding(\\.$displayName):","  \/\/ Validate display name","","case .binding(\\.$enableNotifications):","  \/\/ Return an authorization request effect"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Binding actions can also be tested in much the same way regular actions are tested. Rather"},{"type":"text","text":" "},{"type":"text","text":"than send a specific action describing how a binding changed, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":".displayNameChanged(\"Blob\")"},{"type":"text","text":", you will send a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/binding(action:)"},{"type":"text","text":" action that"},{"type":"text","text":" "},{"type":"text","text":"describes which key path is being set to what value, such as "},{"type":"codeVoice","code":".set(\\.$displayName, \"Blob\")"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(","  initialState: SettingsState(),","  reducer: settingsReducer,","  environment: SettingsEnvironment(...)",")","","store.send(.set(\\.$displayName, \"Blob\")) {","  $0.displayName = \"Blob\"","}","store.send(.set(\\.$protectMyPosts, true)) {","  $0.protectMyPosts = true",")"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindablestate"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/10CustomDump0aB13RepresentableP","doc:\/\/co.pointfree.ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/co.pointfree.ComposableArchitecture\/s17CustomReflectableP","doc:\/\/co.pointfree.ComposableArchitecture\/Se","doc:\/\/co.pointfree.ComposableArchitecture\/SE","doc:\/\/co.pointfree.ComposableArchitecture\/SQ","doc:\/\/co.pointfree.ComposableArchitecture\/SH"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly"},{"type":"text","text":" "},{"type":"text","text":"bindable in SwiftUI views."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableState"}],"title":"BindableState","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:22ComposableArchitecture13BindableStateV","modules":[{"name":"ComposableArchitecture"}],"navigatorTitle":[{"kind":"identifier","text":"BindableState"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/init(wrappedValue:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/projectedValue","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/wrappedValue"]},{"title":"Subscripts","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/subscript(dynamicMember:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/CustomDebugStringConvertible-Implementations","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/CustomDumpRepresentable-Implementations","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/CustomReflectable-Implementations","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/Decodable-Implementations","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/Encodable-Implementations","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/Equatable-Implementations"],"generated":true}],"references":{"doc://co.pointfree.ComposableArchitecture/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/SQ"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/Decodable-Implementations":{"role":"collectionGroup","title":"Decodable Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/Decodable-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/decodable-implementations"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Reducer/binding(action:)":{"role":"symbol","title":"binding(action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"binding"},{"kind":"text","text":"("},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerV6Actionq_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"BindingAction","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerV5Statexmfp"},{"kind":"text","text":">?) -> "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/binding(action:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/reducer\/binding(action:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"role":"symbol","title":"BindingAction","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingAction"}],"abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"url":"\/documentation\/composablearchitecture\/bindingaction"},"doc://co.pointfree.ComposableArchitecture/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/SH"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/CustomReflectable-Implementations":{"role":"collectionGroup","title":"CustomReflectable Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/CustomReflectable-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/customreflectable-implementations"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/Encodable-Implementations":{"role":"collectionGroup","title":"Encodable Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/Encodable-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/encodable-implementations"},"doc://co.pointfree.ComposableArchitecture/Se":{"type":"unresolvable","title":"Swift.Decodable","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/Se"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/equatable-implementations"},"doc://co.pointfree.ComposableArchitecture/10CustomDump0aB13RepresentableP":{"type":"unresolvable","title":"CustomDump.CustomDumpRepresentable","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/10CustomDump0aB13RepresentableP"},"doc://co.pointfree.ComposableArchitecture/SE":{"type":"unresolvable","title":"Swift.Encodable","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/SE"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/CustomDumpRepresentable-Implementations":{"role":"collectionGroup","title":"CustomDumpRepresentable Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/CustomDumpRepresentable-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/customdumprepresentable-implementations"},"doc://co.pointfree.ComposableArchitecture/s17CustomReflectableP":{"type":"unresolvable","title":"Swift.CustomReflectable","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/s17CustomReflectableP"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/CustomDebugStringConvertible-Implementations":{"role":"collectionGroup","title":"CustomDebugStringConvertible Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/CustomDebugStringConvertible-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/customdebugstringconvertible-implementations"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/wrappedValue":{"role":"symbol","title":"wrappedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:22ComposableArchitecture13BindableStateV5Valuexmfp"}],"abstract":[{"type":"text","text":"The underlying value wrapped by the bindable state."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/wrappedValue","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/wrappedvalue"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/subscript(dynamicMember:)":{"role":"symbol","title":"subscript(dynamicMember:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Subject"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:22ComposableArchitecture13BindableStateV5Valuexmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Subject","preciseIdentifier":"s:22ComposableArchitecture13BindableStateV13dynamicMemberACyqd__Gs15WritableKeyPathCyxqd__G_tcluip7SubjectL_qd__mfp"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"BindableState","preciseIdentifier":"s:22ComposableArchitecture13BindableStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Subject","preciseIdentifier":"s:22ComposableArchitecture13BindableStateV13dynamicMemberACyqd__Gs15WritableKeyPathCyxqd__G_tcluip7SubjectL_qd__mfp"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns bindable state to the resulting value of a given key path."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/subscript(dynamicMember:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/subscript(dynamicmember:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/projectedValue":{"role":"symbol","title":"projectedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"projectedValue"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"A projection that can be used to derive bindings from a view store."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/projectedValue","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/projectedvalue"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"role":"symbol","title":"BindableAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"type":"text","text":" case that holds a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"url":"\/documentation\/composablearchitecture\/bindableaction"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState":{"role":"symbol","title":"BindableState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableState"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly"},{"type":"text","text":" "},{"type":"text","text":"bindable in SwiftUI views."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableState"}],"url":"\/documentation\/composablearchitecture\/bindablestate"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/init(wrappedValue:)":{"role":"symbol","title":"init(wrappedValue:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:22ComposableArchitecture13BindableStateV5Valuexmfp"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates bindable state from the value of another bindable state."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/init(wrappedValue:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/init(wrappedvalue:)"},"doc://co.pointfree.ComposableArchitecture/s28CustomDebugStringConvertibleP":{"type":"unresolvable","title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/s28CustomDebugStringConvertibleP"}}}