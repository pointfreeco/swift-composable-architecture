{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Adding-the-Composable-Architecture-as-a-dependency","level":2,"type":"heading","text":"Adding the Composable Architecture as a dependency"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use the Composable Architecture in a SwiftPM project, add it to the dependencies of your"},{"type":"text","text":" "},{"type":"text","text":"Package.swift and specify the "},{"type":"codeVoice","code":"ComposableArchitecture"},{"type":"text","text":" product in any targets that need access to"},{"type":"text","text":" "},{"type":"text","text":"the library:"}]},{"type":"codeListing","syntax":"swift","code":["let package = Package(","  dependencies: [","    .package(","      url: \"https:\/\/github.com\/pointfreeco\/swift-composable-architecture\",","      from: \"0.41.0\"","    ),","  ],","  targets: [","    .target(","      name: \"<target-name>\",","      dependencies: [","        .product(","          name: \"ComposableArchitecture\",","          package: \"swift-composable-architecture\"","        )","      ]","    )","  ]",")"]},{"anchor":"Writing-your-first-feature","level":2,"type":"heading","text":"Writing your first feature"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To build a feature using the Composable Architecture you define some types and values that model"},{"type":"text","text":" "},{"type":"text","text":"your domain:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"State"}]},{"type":"text","text":": A type that describes the data your feature needs to perform its logic and render its"},{"type":"text","text":" "},{"type":"text","text":"UI."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Action"}]},{"type":"text","text":": A type that represents all of the actions that can happen in your feature, such as"},{"type":"text","text":" "},{"type":"text","text":"user actions, notifications, event sources and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Reducer"}]},{"type":"text","text":": A function that describes how to evolve the current state of the app to the next"},{"type":"text","text":" "},{"type":"text","text":"state given an action. The reducer is also responsible for returning any effects that should be"},{"type":"text","text":" "},{"type":"text","text":"run, such as API requests, which can be done by returning an "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":" value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Store"}]},{"type":"text","text":": The runtime that actually drives your feature. You send all user actions to the store"},{"type":"text","text":" "},{"type":"text","text":"so that the store can run the reducer and effects, and you can observe state changes in the"},{"type":"text","text":" "},{"type":"text","text":"store so that you can update UI."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The benefits of doing this is that you will instantly unlock testability of your feature, and you"},{"type":"text","text":" "},{"type":"text","text":"will be able to break large, complex features into smaller domains that can be glued together."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a basic example, consider a UI that shows a number along with “+” and “−” buttons that increment"},{"type":"text","text":" "},{"type":"text","text":"and decrement the number. To make things interesting, suppose there is also a button that when"},{"type":"text","text":" "},{"type":"text","text":"tapped makes an API request to fetch a random fact about that number and then displays the fact in"},{"type":"text","text":" "},{"type":"text","text":"an alert."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To implement this feature we create a new type that will house the domain and behavior of the"},{"type":"text","text":" "},{"type":"text","text":"feature by conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In here we need to define a type for the feature’s state, which consists of an integer for the"},{"type":"text","text":" "},{"type":"text","text":"current count, as well as an optional string that represents the title of the alert we want to show"},{"type":"text","text":" "},{"type":"text","text":"(optional because "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" represents not showing an alert):"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State: Equatable {","    var count = 0","    var numberFactAlert: String?","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We also need to define a type for the feature’s actions. There are the obvious actions, such as"},{"type":"text","text":" "},{"type":"text","text":"tapping the decrement button, increment button, or fact button. But there are also some slightly"},{"type":"text","text":" "},{"type":"text","text":"non-obvious ones, such as the action of the user dismissing the alert, and the action that occurs"},{"type":"text","text":" "},{"type":"text","text":"when we receive a response from the fact API request:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State: Equatable { … }","  enum Action: Equatable {","    case factAlertDismissed","    case decrementButtonTapped","    case incrementButtonTapped","    case numberFactButtonTapped","    case numberFactResponse(TaskResult<String>)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we implement the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-4nzr2"},{"type":"text","text":" method which is responsible"},{"type":"text","text":" "},{"type":"text","text":"for handling the actual logic and  behavior for the feature. It describes how to change the current"},{"type":"text","text":" "},{"type":"text","text":"state to the next state, and describes what effects need to be executed. Some actions don’t need to"},{"type":"text","text":" "},{"type":"text","text":"execute effects, and they can return "},{"type":"codeVoice","code":".none"},{"type":"text","text":" to represent that:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State: Equatable { … }","  enum Action: Equatable { … }","  ","  func reduce(into state: inout State, action: Action) -> Effect<Action, Never> {","    switch action {","      case .factAlertDismissed:","        state.numberFactAlert = nil","        return .none","","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return .none","","      case .numberFactButtonTapped:","        return .task { [count = state.count] in ","          await .numberFactResponse(","            TaskResult { ","              String(","                decoding: try await URLSession.shared","                  .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(number)\/trivia\")!).0,","                using: UTF8.self","              )","            }","          )","        }","","      case let .numberFactResponse(.success(fact)):","        state.numberFactAlert = fact","        return .none","","      case .numberFactResponse(.failure):","        state.numberFactAlert = \"Could not load a number fact :(\"","        return .none","      } ","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then finally we define the view that displays the feature. It holds onto a "},{"type":"codeVoice","code":"StoreOf<Feature>"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"so that it can observe all changes to the state and re-render, and we can send all user actions to"},{"type":"text","text":" "},{"type":"text","text":"the store so that state changes. We must also introduce a struct wrapper around the fact alert to"},{"type":"text","text":" "},{"type":"text","text":"make it "},{"type":"codeVoice","code":"Identifiable"},{"type":"text","text":", which the "},{"type":"codeVoice","code":".alert"},{"type":"text","text":" view modifier requires:"}]},{"type":"codeListing","syntax":"swift","code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        HStack {","          Button(\"−\") { viewStore.send(.decrementButtonTapped) }","          Text(\"\\(viewStore.count)\")","          Button(\"+\") { viewStore.send(.incrementButtonTapped) }","        }","","        Button(\"Number fact\") { viewStore.send(.numberFactButtonTapped) }","      }","      .alert(","        item: viewStore.binding(","          get: { $0.numberFactAlert.map(FactAlert.init(title:)) },","          send: .factAlertDismissed","        ),","        content: { Alert(title: Text($0.title)) }","      )","    }","  }","}","","struct FactAlert: Identifiable {","  var title: String","  var id: String { self.title }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also straightforward to have a UIKit controller driven off of this store. You subscribe to the"},{"type":"text","text":" "},{"type":"text","text":"store in "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":" in order to update the UI and show alerts. The code is a bit longer than the"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI version:"}]},{"type":"codeListing","syntax":"swift","code":["class FeatureViewController: UIViewController {","  let viewStore: ViewStoreOf<Feature>","  var cancellables: Set<AnyCancellable> = []","","  init(store: StoreOf<Feature>) {","    self.viewStore = ViewStore(store)","    super.init(nibName: nil, bundle: nil)","  }","","  required init?(coder: NSCoder) {","    fatalError(\"init(coder:) has not been implemented\")","  }","","  override func viewDidLoad() {","    super.viewDidLoad()","","    let countLabel = UILabel()","    let incrementButton = UIButton()","    let decrementButton = UIButton()","    let factButton = UIButton()","","    \/\/ Omitted: Add subviews and set up constraints...","","    self.viewStore.publisher","      .map { \"\\($0.count)\" }","      .assign(to: \\.text, on: countLabel)","      .store(in: &self.cancellables)","","    self.viewStore.publisher.numberFactAlert","      .sink { [weak self] numberFactAlert in","        let alertController = UIAlertController(","          title: numberFactAlert, message: nil, preferredStyle: .alert","        )","        alertController.addAction(","          UIAlertAction(","            title: \"Ok\",","            style: .default,","            handler: { _ in self?.viewStore.send(.factAlertDismissed) }","          )","        )","        self?.present(alertController, animated: true, completion: nil)","      }","      .store(in: &self.cancellables)","  }","","  @objc private func incrementButtonTapped() {","    self.viewStore.send(.incrementButtonTapped)","  }","  @objc private func decrementButtonTapped() {","    self.viewStore.send(.decrementButtonTapped)","  }","  @objc private func factButtonTapped() {","    self.viewStore.send(.numberFactButtonTapped)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once we are ready to display this view, for example in the app’s entry point, we can construct a"},{"type":"text","text":" "},{"type":"text","text":"store. This can be done by specify the initial state to start the application in, as well as the"},{"type":"text","text":" "},{"type":"text","text":"reducer that will power the application:"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","  var body: some Scene {","    FeatureView(","      store: Store(","        initialState: Feature.State(),","        reducer: Feature()","      )","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that is enough to get something on the screen to play around with. It’s definitely a few more"},{"type":"text","text":" "},{"type":"text","text":"steps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives"},{"type":"text","text":" "},{"type":"text","text":"us a consistent manner to apply state mutations, instead of scattering logic in some observable"},{"type":"text","text":" "},{"type":"text","text":"objects and in various action closures of UI components. It also gives us a concise way of"},{"type":"text","text":" "},{"type":"text","text":"expressing side effects. And we can immediately test this logic, including the effects, without"},{"type":"text","text":" "},{"type":"text","text":"doing much additional work."}]},{"anchor":"Testing-your-feature","level":2,"type":"heading","text":"Testing your feature"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To test use a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":", which can be created with the same information as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":", but it"},{"type":"text","text":" "},{"type":"text","text":"does extra work to allow you to assert how your feature evolves as actions are sent:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","func testFeature() async {","  let store = TestStore(","    initialState: Feature.State(),","    reducer: Feature()","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the test store is created we can use it to make an assertion of an entire user flow of steps."},{"type":"text","text":" "},{"type":"text","text":"Each step of the way we need to prove that state changed how we expect. For example, we can simulate"},{"type":"text","text":" "},{"type":"text","text":"the user flow of tapping on the increment and decrement buttons:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Test that tapping on the increment\/decrement buttons changes the count","await store.send(.incrementButtonTapped) {","  $0.count = 1","}","await store.send(.decrementButtonTapped) {","  $0.count = 0","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if a step causes an effect to be executed, which feeds data back into the store, we must"},{"type":"text","text":" "},{"type":"text","text":"assert on that. For example, if we simulate the user tapping on the fact button we expect to"},{"type":"text","text":" "},{"type":"text","text":"receive a fact response back with the fact, which then causes the alert to show:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.numberFactButtonTapped)","","await store.receive(.numberFactResponse(.success(\"???\"))) {","  $0.numberFactAlert = \"???\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, how do we know what fact is going to be sent back to us?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently our reducer is using an effect that reaches out into the real world to hit an API server,"},{"type":"text","text":" "},{"type":"text","text":"and that means we have no way to control its behavior. We are at the whims of our internet"},{"type":"text","text":" "},{"type":"text","text":"connectivity and the availabilty of the API server in order to write this test."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It would be better for this dependency to be passed to the reducer so that we can use a live"},{"type":"text","text":" "},{"type":"text","text":"dependency when running the application on a device, but use a mocked dependency for tests. We"},{"type":"text","text":" "},{"type":"text","text":"can do this by adding a property to the "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  let numberFact: (Int) async throws -> String","  …","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can use it in the "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":" implementation:"}]},{"type":"codeListing","syntax":"swift","code":["case .numberFactButtonTapped:","  return .task { [count = state.count] in ","    await .numberFactResponse(TaskResult { try wait self.numberFact(count) })","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in the entry point of the application we can provide a version of the dependency that actually"},{"type":"text","text":" "},{"type":"text","text":"interacts with the real world API server:"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","  var body: some Scene {","    FeatureView(","      store: Store(","        initialState: Feature.State(),","        reducer: Feature(","          numberFact: {","            let (data, _) = try await URLSession.shared","              .data(from: .init(string: \"http:\/\/numbersapi.com\/\\(number)\")!)","            return String(decoding: data, using: UTF8.self)","          }","        )","      )","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But in tests we can use a mock dependency that immediately returns a determinstic, predictable fact:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","func testFeature() async {","  let store = TestStore(","    initialState: Feature.State(),","    reducer: Feature(","      numberFact: { \"\\($0) is a good number Brent\" }","    )","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that little bit of upfront work we can finish the test by simulating the user tapping on the"},{"type":"text","text":" "},{"type":"text","text":"fact button, receiving the response from the dependency to trigger the alert, and then dismissing"},{"type":"text","text":" "},{"type":"text","text":"the alert:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.numberFactButtonTapped)","","await store.receive(.numberFactResponse(.success(\"0 is a good number Brent\"))) {","  $0.numberFactAlert = \"0 is a good number Brent\"","}","","await store.send(.factAlertDismissed) {","  $0.numberFactAlert = nil","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can also improve the ergonomics of using the "},{"type":"codeVoice","code":"numberFact"},{"type":"text","text":" dependency in our application. Over"},{"type":"text","text":" "},{"type":"text","text":"time the application may evolve into many features, and some of those features may also want access"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":"numberFact"},{"type":"text","text":", and explicitly passing it through all layers can get annoying. There is a process"},{"type":"text","text":" "},{"type":"text","text":"you can follow to “register” dependencies with the library, making them instantly available to any"},{"type":"text","text":" "},{"type":"text","text":"layer in the application."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can start by wrapping the number fact functionality in a new type:"}]},{"type":"codeListing","syntax":"swift","code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then registering that type with the dependency management system, which is quite similar to"},{"type":"text","text":" "},{"type":"text","text":"how SwiftUI’s environment values works, except you specify the live implementation of the"},{"type":"text","text":" "},{"type":"text","text":"dependency to be used by default:"}]},{"type":"codeListing","syntax":"swift","code":["private enum NumberFactClientKey: DependencyKey {","  static let liveValue = NumberFactClient(","    fetch: {","      let (data, _) = try await URLSession.shared","        .data(from: .init(string: \"http:\/\/numbersapi.com\/\\(number)\")!)","      return String(decoding: data, using: UTF8.self)","    }","  )","}","","extension DependencyValues {","  var numberFact: NumberFactClient {","    get { self[NumberFactClientKey.self] }","    set { self[NumberFactClientKey.self] = newValue }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that little bit of upfront work done you can instantly start making use of the dependency in"},{"type":"text","text":" "},{"type":"text","text":"any feature:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State { … }","  enum Action { … }","  @Dependency(\\.numberFact) var numberFact","  …","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code works exactly as it did before, but you no longer have to explicitly pass the dependency"},{"type":"text","text":" "},{"type":"text","text":"when constructing the feature’s reducer. When running the app in previews, the simulator or on a"},{"type":"text","text":" "},{"type":"text","text":"device, the live dependency will be provided to the reducer, and in tests the test dependency will"},{"type":"text","text":" "},{"type":"text","text":"be provided."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means the entry point to the application no longer needs to construct dependencies:"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","  var body: some Scene {","    FeatureView(","      store: Store(","        initialState: Feature.State(),","        reducer: Feature()","      )","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And the test store can be constructed without specifying any dependencies, but you can still"},{"type":"text","text":" "},{"type":"text","text":"override any dependency you need to for the purpose of the test:"}]},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(","  initialState: Feature.State(),","  reducer: Feature()",")","","store.dependencies.numberFact.fetch = { \"\\($0) is a good number Brent\" }","","await store.send(.numberFactButtonTapped)","await store.receive(.numberFactResponse(.success(\"0 is a good number Brent\"))) {","  $0.numberFactAlert = \"0 is a good number Brent\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is the basics of building and testing a feature in the Composable Architecture. There are"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"a lot"}]},{"type":"text","text":" more things to be explored, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency"},{"type":"text","text":" and more about "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},{"type":"text","text":". Also, the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture\/tree\/main\/Examples"},{"type":"text","text":" directory has"},{"type":"text","text":" "},{"type":"text","text":"a bunch of projects to explore to see more  advanced usages."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to integrate the Composable Architecture into your project and write your first"},{"type":"text","text":" "},{"type":"text","text":"application."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Getting started","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"role":"article","title":"Testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"role":"article","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"role":"symbol","title":"ReducerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerProtocol"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerProtocol"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"https://github.com/pointfreeco/swift-composable-architecture/tree/main/Examples":{"title":"Examples","titleInlineContent":[{"type":"text","text":"Examples"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture\/tree\/main\/Examples","url":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture\/tree\/main\/Examples"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"role":"article","title":"Adopting Swift concurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftconcurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/reduce(into:action:)-4nzr2":{"defaultImplementations":1,"role":"symbol","title":"reduce(into:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Evolves the current state of the reducer to the next state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-4nzr2","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducerprotocol\/reduce(into:action:)-4nzr2"}}}