{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"store"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"observe"},{"kind":"text","text":" "},{"kind":"internalParam","text":"toViewState"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"send"},{"kind":"text","text":" "},{"kind":"internalParam","text":"fromViewAction"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"externalParam","text":"removeDuplicates"},{"kind":"text","text":" "},{"kind":"internalParam","text":"isDuplicate"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"attribute","text":"@"},{"kind":"typeIdentifier","text":"ViewBuilder","preciseIdentifier":"s:7SwiftUI11ViewBuilderV"},{"kind":"text","text":" "},{"kind":"externalParam","text":"content"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC","text":"ViewStore"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":" = "},{"kind":"keyword","text":"#fileID"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":" = "},{"kind":"keyword","text":"#line"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"store","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A store."}]}]},{"name":"toViewState","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that transforms store state into observable view state. All"},{"type":"text","text":" "},{"type":"text","text":"changes to the view state will cause the "},{"type":"codeVoice","code":"WithViewStore"},{"type":"text","text":" to re-compute its view."}]}]},{"name":"fromViewAction","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that transforms view actions into store action."}]}]},{"name":"isDuplicate","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function to determine when two "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" values are equal. When values"},{"type":"text","text":" "},{"type":"text","text":"are equal, repeat view computations are removed."}]}]},{"name":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that can generate content from a view store."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" will re-compute its body for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" change to the state it holds. Often the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" that we want to observe holds onto a lot more state than is necessary to render a"},{"type":"text","text":" "},{"type":"text","text":"view. It may hold onto the state of child features, or internal state for its logic."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be important to transform the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"â€™s state into something smaller for observation."},{"type":"text","text":" "},{"type":"text","text":"This will help minimize the number of times your view re-computes its body, and can even avoid"},{"type":"text","text":" "},{"type":"text","text":"certain SwiftUI bugs that happen due to over-rendering."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The way to do this is to use the "},{"type":"codeVoice","code":"observe"},{"type":"text","text":" argument of this initializer. It allows you to"},{"type":"text","text":" "},{"type":"text","text":"turn the full state into a smaller data type, and only changes to that data type will trigger"},{"type":"text","text":" "},{"type":"text","text":"a body re-computation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your application uses a tab view, then the root state may hold the state"},{"type":"text","text":" "},{"type":"text","text":"for each tab as well as the currently selected tab:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppFeature: Reducer {","  enum Tab { case activity, search, profile }","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","    var selectedTab: Tab","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to construct a tab view you need to observe this state because changes to"},{"type":"text","text":" "},{"type":"codeVoice","code":"selectedTab"},{"type":"text","text":" need to make SwiftUI update the visual state of the UI. However, you do not"},{"type":"text","text":" "},{"type":"text","text":"need to observe changes to "},{"type":"codeVoice","code":"activity"},{"type":"text","text":", "},{"type":"codeVoice","code":"search"},{"type":"text","text":" and "},{"type":"codeVoice","code":"profile"},{"type":"text","text":". Those are only necessary for"},{"type":"text","text":" "},{"type":"text","text":"those child features, and changes to that state should not cause our tab view to re-compute"},{"type":"text","text":" "},{"type":"text","text":"itself."}]},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    WithViewStore(self.store, observe: \\.selectedTab) { viewStore in","      TabView(selection: viewStore.binding(send: AppFeature.Action.tabSelected) {","        ActivityView(","          store: self.store.scope(state: \\.activity, action: AppFeature.Action.activity)","        )","        .tag(AppFeature.Tab.activity)","        SearchView(","          store: self.store.scope(state: \\.search, action: AppFeature.Action.search)","        )","        .tag(AppFeature.Tab.search)","        ProfileView(","          store: self.store.scope(state: \\.profile, action: AppFeature.Action.profile)","        )","        .tag(AppFeature.Tab.profile)","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To read more about this performance technique, read the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},{"type":"text","text":" article."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:send:removeduplicates:content:file:line:)-dheh"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:send:removeDuplicates:content:file:line:)-dheh","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Initializes a structure that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into an observable "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" in order"},{"type":"text","text":" "},{"type":"text","text":"to compute views from state."}],"kind":"symbol","metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"observe"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"send"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"externalParam","text":"removeDuplicates"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"content"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewStore","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"title":"init(_:observe:send:removeDuplicates:content:file:line:)","roleHeading":"Initializer","role":"symbol","symbolKind":"init","externalID":"s:22ComposableArchitecture13WithViewStoreV_7observe4send16removeDuplicates7content4file4lineACyxq_q0_GAA0E0Cyqd__qd_0_G_xqd__cqd_0_q_cSbx_xtcq0_AA0dE0Cyxq_Gcs12StaticStringVSutcr0_lufc","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","title":"SwiftUI Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:send:removeDuplicates:content:file:line:)-dheh":{"role":"symbol","title":"init(_:observe:send:removeDuplicates:content:file:line:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"observe"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"send"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"externalParam","text":"removeDuplicates"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"content"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewStore","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes a structure that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into an observable "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" in order"},{"type":"text","text":" "},{"type":"text","text":"to compute views from state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:send:removeDuplicates:content:file:line:)-dheh","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:send:removeduplicates:content:file:line:)-dheh"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/performance"}}}