{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Migrating an application that uses the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" type over to the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":" can be"},{"type":"text","text":" "},{"type":"text","text":"done slowly and incrementally. The library provides the tools to convert one reducer at a time,"},{"type":"text","text":" "},{"type":"text","text":"allowing you to plug protocol-style reducers into old-style reducers, and vice-versa."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although we recommend migrating your code when you have time, the newest version of the library"},{"type":"text","text":" "},{"type":"text","text":"is still 100% backwards compatible with all previous versions. The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" type is now"},{"type":"text","text":" "},{"type":"text","text":"“soft” deprecated, which means we consider it deprecated, and it says so in the documentation, but"},{"type":"text","text":" "},{"type":"text","text":"you will not get any warnings about it. Sometime in the future, we will officially deprecate it,"},{"type":"text","text":" "},{"type":"text","text":"and then sometime even later we will remove it so that we can rename the protocol to "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article outlines a number of strategies you can employ to convert your reducers to the protocol"},{"type":"text","text":" "},{"type":"text","text":"when you are ready:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Leaf-node-features"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Composition-of-features"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Optional-and-pullback-reducers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#For-each-reducers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Binding-reducers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Dependencies"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Stores"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Embedding-old-reducer-values-in-a-new-reducer-conformance"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Migration-using-Swift-56"}]}]}]},{"anchor":"Leaf-node-features","level":2,"type":"heading","text":"Leaf node features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest parts of an application to convert to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":" are leaf node features that"},{"type":"text","text":" "},{"type":"text","text":"do not compose multiple reducers at once. For example, suppose you have a feature domain with a"},{"type":"text","text":" "},{"type":"text","text":"dependency like this:"}]},{"type":"codeListing","syntax":"swift","code":["struct FeatureState {","  \/\/ ...","}","enum FeatureAction {","  \/\/ ...","}","struct FeatureEnvironment {","  var date: () -> Date","}","","let featureReducer = Reducer<","  FeatureState,","  FeatureAction,","  FeatureEnvironment","> { state, action, environment in","  switch action {","  \/\/ ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can convert this to the protocol style by:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a dedicated type that conforms to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Nest the state and action types inside this new type, and rename them to just "},{"type":"codeVoice","code":"State"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"Action"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Move the fields on the environment to be fields on this new reducer type, and delete the"},{"type":"text","text":" "},{"type":"text","text":"environment type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Move the reducer’s closure implementation to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-8yinq"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Performing these 4 steps on the feature produces the following:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State {","    \/\/ ...","  }","","  enum Action {","    \/\/ ...","  }","","  let date: () -> Date","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    \/\/ ...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once this feature’s domain and reducer are converted to the protocol-style you will invariably have"},{"type":"text","text":" "},{"type":"text","text":"compiler errors wherever you were referring to the old types. For example, suppose you have a"},{"type":"text","text":" "},{"type":"text","text":"parent feature that is currently trying to embed the old-style domain and reducer into its domain"},{"type":"text","text":" "},{"type":"text","text":"and reducer:"}]},{"type":"codeListing","syntax":"swift","code":["struct ParentState { ","  var feature: FeatureState","  \/\/ ...","}","","enum ParentAction {","  case feature(FeatureAction)","  \/\/ ...","}","","struct ParentEnvironment {","  var date: () -> Date","  var dependency: Dependency","  \/\/ ...","}","","let parentReducer = Reducer<ParentState, ParentAction, ParentEnvironment>.combine(","  featureReducer","    .pullback(","      state: \\.feature, ","      action: \/ParentAction.feature, ","      environment: {  ","        FeatureEnvironment(date: $0.date)","      }","    ),","","  Reducer { state, action, environment in ","    \/\/ ...","  }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be updated to work with the new "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer conformance by first fixing any"},{"type":"text","text":" "},{"type":"text","text":"references to the state and action types:"}]},{"type":"codeListing","syntax":"swift","code":["struct ParentState { ","  var feature: Feature.State","  \/\/ ...","}","","enum ParentAction {","  case feature(Feature.Action)","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then the "},{"type":"codeVoice","code":"parentReducer"},{"type":"text","text":" can be fixed by making use of the helper "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/init(_:)-42p1a"},{"type":"text","text":" "},{"type":"text","text":"which aids in converting protocol-style reducers into old-style reducers. It is initialized with a"},{"type":"text","text":" "},{"type":"text","text":"closure that is passed an environment, which is the one thing protocol-style reducers don’t have,"},{"type":"text","text":" "},{"type":"text","text":"and you  are to return a protocol-style reducer:"}]},{"type":"codeListing","syntax":"swift","code":["let parentReducer = Reducer<ParentState, ParentAction, ParentEnvironment>.combine(","  AnyReducer { environment in","    Feature(date: environment.date)","  }","  .pullback(","    state: \\.feature, ","    action: \/ParentAction.feature, ","    environment: { $0 }","  ),","","  Reducer { state, action, environment in ","    \/\/ ...","  }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer"},{"type":"text","text":"’s only purpose is to convert the protocol-style reducer to the"},{"type":"text","text":" "},{"type":"text","text":"old-style so that it can be plugged into existing old-style reducers. You can then chain on the"},{"type":"text","text":" "},{"type":"text","text":"operators you were using before to the end of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer"},{"type":"text","text":" usage."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With those few changes your application should now build, and you have successfully converted one"},{"type":"text","text":" "},{"type":"text","text":"leaf node feature to the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":"-style of doing things."}]},{"anchor":"Composition-of-features","level":2,"type":"heading","text":"Composition of features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some features in your application are an amalgamation of other features. For example, a tab-based"},{"type":"text","text":" "},{"type":"text","text":"application may have a separate domain and reducer for each tab, and then an app-level domain and"},{"type":"text","text":" "},{"type":"text","text":"reducer that composes everything together."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Suppose that all of the tab features have already been converted to the protocol-style:"}]},{"type":"codeListing","syntax":"swift","code":["struct TabA: ReducerProtocol {","  struct State {","    \/\/ ...","  }","  enum Action {","    \/\/ ...","  }","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    \/\/ ...","  }","}","","struct TabB: ReducerProtocol {","  \/\/ ...","}","","struct TabC: ReducerProtocol {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But, suppose that the app-level domain and reducer have not yet been converted and so have compiler"},{"type":"text","text":" "},{"type":"text","text":"errors due to referencing types and values that no longer exist:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppState {","  var tabA: TabAState","  var tabB: TabBState","  var tabC: TabCState","}","","enum AppAction {","  case tabA(TabAAction)","  case tabB(TabBAction)","  case tabC(TabCAction)","}","","struct AppEnvironment {}","","let appReducer = Reducer<","  AppState, ","  AppAction, ","  AppEnvironment","> { state, action, environment in ","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To convert this to the protocol-style we again introduce a new type that conforms to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":", we nest the domain types inside the conformance, we inline the environment"},{"type":"text","text":" "},{"type":"text","text":"fields, but this time we use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/body-swift.property-7foai"},{"type":"text","text":" requirement of the"},{"type":"text","text":" "},{"type":"text","text":"protocol to describe how to compose multiple reducers:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppReducer: ReducerProtocol {","  struct State {","    var tabA: TabA.State","    var tabB: TabB.State","    var tabC: TabC.State","  }","","  enum Action {","    case tabA(TabA.Action)","    case tabB(TabB.Action)","    case tabC(TabC.Action)","  }","","  var body: some ReducerProtocol<State, Action> {","    Scope(state: \\.tabA, action: \/Action.tabA) {","      TabA()","    }","    Scope(state: \\.tabB, action: \/Action.tabB) {","      TabB()","    }","    Scope(state: \\.tabC, action: \/Action.tabC) {","      TabC()","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With those few small changes we have now converted a composition of many reducers into the new"},{"type":"text","text":" "},{"type":"text","text":"protocol-style."}]},{"anchor":"Optional-and-pullback-reducers","level":2,"type":"heading","text":"Optional and pullback reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A common pattern in the Composable Architecture is to model a feature that can be presented and"},{"type":"text","text":" "},{"type":"text","text":"dismissed as optional state. For example, suppose you have the feature’s domain and reducer modeled"},{"type":"text","text":" "},{"type":"text","text":"like so:"}]},{"type":"codeListing","syntax":"swift","code":["struct FeatureState { ","  \/\/ ...","}","struct FeatureAction { ","  \/\/ ...","}","struct FeatureEnvironment { ","  var date: () -> Date","}","","let featureReducer = Reducer<","  FeatureState, ","  FeatureAction, ","  FeatureEnvironment","> { state, action, environment in","  \/\/ Feature logic","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, the parent feature can embed this child feature as an optional in its state:"}]},{"type":"codeListing","syntax":"swift","code":["struct ParentState {","  var feature: FeatureState?","  \/\/ ...","}","enum ParentAction {","  case feature(FeatureAction)","  \/\/ ...","}","struct ParentEnvironment {","  var date: () -> Date","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value for "},{"type":"codeVoice","code":"feature"},{"type":"text","text":" indicates that the feature view is being presented, and when it"},{"type":"text","text":" "},{"type":"text","text":"switches to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" the view should be dismissed. The actual showing and hiding of the view can be"},{"type":"text","text":" "},{"type":"text","text":"done using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" SwiftUI view."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to construct a single reducer that can handle the logic for the parent domain as well as"},{"type":"text","text":" "},{"type":"text","text":"allow the child feature to run its logic on the "},{"type":"codeVoice","code":"feature"},{"type":"text","text":" state when non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", we can make use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/optional(file:fileID:line:)"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/pullback(state:action:environment:)"},{"type":"text","text":" "},{"type":"text","text":"operators:"}]},{"type":"codeListing","syntax":"swift","code":["let parentReducer = Reducer<","  ParentState,","  ParentAction,","  ParentEnvironment",">.combine( ","  featureReducer","    .optional()","    .pullback(","      state: \\.feature, ","      action: \/ParentAction.feature, ","      environment: { FeatureEnvironment(date: $0.date) }","    ),","","  Reducer { state, action, environment in","    \/\/ Parent logic","  }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It seems complex, but we have now combined the logic for the parent feature and child feature into"},{"type":"text","text":" "},{"type":"text","text":"one package, and the child feature will only run when the state is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Migrating the "},{"type":"codeVoice","code":"featureReducer"},{"type":"text","text":" to the protocol by following the earlier instructions will"},{"type":"text","text":" "},{"type":"text","text":"yield a new "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" type that conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":", and the "},{"type":"codeVoice","code":"parentReducer"},{"type":"text","text":" will"},{"type":"text","text":" "},{"type":"text","text":"look something like this:"}]},{"type":"codeListing","syntax":"swift","code":["let parentReducer = Reducer<","  ParentState,","  ParentAction,","  ParentEnvironment",">.combine( ","  AnyReducer { environment in","    Feature(date: environment.date)","  }","  .optional()","  .pullback(","    state: \\.feature, ","    action: \/ParentAction.feature, ","    environment: { $0 }","  ),","","  Reducer { state, action, environment in","    \/\/ Parent logic","  }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the question is, how do we migrate "},{"type":"codeVoice","code":"parentReducer"},{"type":"text","text":" to a protocol conformance?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives us an opportunity to improve the correctness of this code. It turns out there is a gotcha"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"optional"},{"type":"text","text":" operator: it must be run "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" the parent logic runs. If it is not, then it"},{"type":"text","text":" "},{"type":"text","text":"is possible for a child action to come into the system, the parent observes the action and decides to"},{"type":"text","text":" "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the child state, and then the child reducer will not get a chance to react to the action."},{"type":"text","text":" "},{"type":"text","text":"This can cause subtle bugs, and so we have documentation advising you to order things the correct"},{"type":"text","text":" "},{"type":"text","text":"way, and if we detect a child action while state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" we display a runtime warning."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Parent"},{"type":"text","text":" reducer conformances can be made by implementing the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/body-swift.property-7foai"},{"type":"text","text":" property of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":", which allows you"},{"type":"text","text":" "},{"type":"text","text":"to express the parent’s logic as a composition of multiple reducers. In particular, you can use"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce"},{"type":"text","text":" entry point to implement the core parent logic, and then chain on the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:then:file:fileID:line:)"},{"type":"text","text":" operator to identify the optional child"},{"type":"text","text":" "},{"type":"text","text":"state that you want to run the "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer on when non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Parent: ReducerProtocol {","  struct State {","    var feature: Feature.State?","    \/\/ ...","  }","  enum Action {","    case feature(Feature.Action)","    \/\/ ...","  }","","  let date: () -> Date","","  var body: some ReducerProtocol<State, Action> {","    Reduce { state, action in","      \/\/ Parent logic","    }","    .ifLet(\\.feature, action: \/Action.feature) {","      Feature(date: self.date)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" operator has knowledge of both the parent and child reducers it can enforce the"},{"type":"text","text":" "},{"type":"text","text":"order to add an additional layer of correctness."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using an enum to model your state, then there is a corresponding"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifCaseLet(_:action:then:file:fileID:line:)"},{"type":"text","text":" operator that can help you run a"},{"type":"text","text":" "},{"type":"text","text":"reducer on just one case of the enum."}]},{"anchor":"For-each-reducers","level":2,"type":"heading","text":"For-each reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar to "},{"type":"codeVoice","code":"optional"},{"type":"text","text":" reducers, another common pattern in applications is the use of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/forEach(state:action:environment:file:fileID:line:)-2ypoa"},{"type":"text","text":" to allow running a reducer"},{"type":"text","text":" "},{"type":"text","text":"on each element of a collection. Converting such child and parent reducers will look nearly"},{"type":"text","text":" "},{"type":"text","text":"identical to what we did above for optional reducers, but it will make use of the new"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/forEach(_:action:_:file:fileID:line:)"},{"type":"text","text":" operator instead."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In particular, the new "},{"type":"codeVoice","code":"forEach"},{"type":"text","text":" method operates on the parent reducer by specifying the collection"},{"type":"text","text":" "},{"type":"text","text":"sub-state you want to work on, and providing the element reducer you want to be able to run on"},{"type":"text","text":" "},{"type":"text","text":"each element:"}]},{"type":"codeListing","syntax":"swift","code":["struct Parent: ReducerProtocol {","  struct State {","    var rows: IdentifiedArrayOf<Feature.State>","    \/\/ ...","  }","  enum Action {","    case row(id: Feature.State.ID, action: Feature.Action)","    \/\/ ...","  }","","  let date: () -> Date","","  var body: some ReducerProtocol<State, Action> {","    Reduce { state, action in","      \/\/ Parent logic","    }","    .forEach(\\.rows, action: \/Action.row) {","      Feature(date: self.date)","    }","  }","}"]},{"anchor":"Binding-reducers","level":2,"type":"heading","text":"Binding reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Previously, reducers with bindable state and a binding action used the "},{"type":"codeVoice","code":"Reducer.binding()"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to automatically make mutations to state before running the main logic of a reducer."}]},{"type":"codeListing","syntax":"swift","code":["Reducer { state, action, environment in","  \/\/ Logic to run after bindable state mutations are applied","}",".binding()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In reducer builders, use the new top-level "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":" type to specify when to apply"},{"type":"text","text":" "},{"type":"text","text":"mutations to bindable state:"}]},{"type":"codeListing","syntax":"swift","code":["var body: some ReducerProtocol<State, Action> {","  Reduce { state, action in","    \/\/ Logic to run before bindable state mutations are applied","  }","","  BindingReducer()  \/\/ Apply bindable state mutations","","  Reduce { state, action in","    \/\/ Logic to run after bindable state mutations are applied","  }","}"]},{"anchor":"Dependencies","level":2,"type":"heading","text":"Dependencies"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the previous sections we inlined all dependencies directly into the conforming type:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  let apiClient: APIClient","  let date: () -> Date","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But this means that you must explicitly thread all dependencies from the root of the application"},{"type":"text","text":" "},{"type":"text","text":"through to every child feature. This can be arduous and make it difficult to add, remove or change"},{"type":"text","text":" "},{"type":"text","text":"dependencies."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library comes with a tool for managing dependencies in a more ergonomic manner, and even comes"},{"type":"text","text":" "},{"type":"text","text":"with some common dependencies pre-integrated allowing you to access them with no additional work."},{"type":"text","text":" "},{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"date"},{"type":"text","text":" dependency ships with the library so that you can declare your feature’s"},{"type":"text","text":" "},{"type":"text","text":"dependence on that functionality in the following way:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  let apiClient: APIClient","  @Dependency(\\.date) var date","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that one declaration you can stop explicitly passing the date dependency through every layer"},{"type":"text","text":" "},{"type":"text","text":"of your application. A date function will be automatically provided to your feature’s reducer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For domain-specific dependencies you can perform a little bit of upfront work to register your"},{"type":"text","text":" "},{"type":"text","text":"dependency with the system, and then it will be automatically available to every layer in your"},{"type":"text","text":" "},{"type":"text","text":"application:"}]},{"type":"codeListing","syntax":"swift","code":["private enum APIClientKey: DependencyKey {","  static let liveValue = APIClient.live","}","extension DependencyValues {","  var apiClient: APIClient {","    get { self[APIClientKey.self] }","    set { self[APIClientKey.self] = newValue }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that work done you can access the dependency from any feature’s reducer using the "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" "},{"type":"text","text":"property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  @Dependency(\\.apiClient) var apiClient","  @Dependency(\\.date) var date","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information on designing your dependencies and providing live and test dependencies, see"},{"type":"text","text":" "},{"type":"text","text":"our "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},{"type":"text","text":" article."}]},{"anchor":"Stores","level":2,"type":"heading","text":"Stores"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Stores can be initialized from an initial state and an instance of a type conforming to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["FeatureView(","  store: Store(","    initialState: Feature.State(),","    reducer: Feature()","  )",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Views that hold onto stores can also employ the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf"},{"type":"text","text":" type alias to clean up the property"},{"type":"text","text":" "},{"type":"text","text":"declaration:"}]},{"type":"codeListing","syntax":"swift","code":["let store: StoreOf<Feature>","\/\/ Expands to:","\/\/     let store: Store<Feature.State, Feature.Action>"]},{"anchor":"Testing","level":2,"type":"heading","text":"Testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Test stores can be initialized from an initial state and an instance of a type conforming to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(","  initialState: Feature.State(),","  reducer: Feature()",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default test stores will employ “test” dependencies wherever a dependency is accessed from a"},{"type":"text","text":" "},{"type":"text","text":"reducer via the "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" property wrapper."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of passing an environment of test dependencies to the store, or mutating the store’s"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/environment"},{"type":"text","text":", you can either provide a trailing closure when initializing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" "},{"type":"text","text":"or you can directly mutate the test store’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"override dependencies driving a feature."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, to install a test clock as the continuous clock dependency you can do the following:"}]},{"type":"codeListing","syntax":"swift","code":["let clock = TestClock()","","let store = TestStore(","  initialState: Feature.State(),","  reducer: Feature()",") {","  $0.continuousClock = .clock ","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…or you can do:"}]},{"type":"codeListing","syntax":"swift","code":["let clock = TestClock()","store.dependencies.continuousClock = clock","","await store.send(.timerButtonStarted)","","await clock.advance(by: .seconds(1))","await store.receive(.timerTick) {","  $0.secondsElapsed = 1","}","","await store.send(.timerButtonStopped)"]},{"anchor":"Embedding-old-reducer-values-in-a-new-reducer-conformance","level":2,"type":"heading","text":"Embedding old reducer values in a new reducer conformance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It may not be feasible to migrate your entire application at once, and you may find yourself"},{"type":"text","text":" "},{"type":"text","text":"needing to compose an existing value of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" into a type conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This can be done by passing the value and its environment of dependencies to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce\/init(_:environment:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose a tab of your application has not yet been converted to the protocol-style of"},{"type":"text","text":" "},{"type":"text","text":"reducers, and it has an environment of dependencies:"}]},{"type":"codeListing","syntax":"swift","code":["struct TabCState {","  \/\/ ...","}","enum TabCAction {","  \/\/ ...","}","struct TabCEnvironment {","  var date: () -> Date","}","let tabCReducer = Reducer<","  TabCState,","  TabCAction,","  TabCEnvironment","} { state, action, environment in","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can still be embedded in "},{"type":"codeVoice","code":"AppReducer"},{"type":"text","text":" using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce\/init(_:environment:)"},{"type":"text","text":" and passing along the"},{"type":"text","text":" "},{"type":"text","text":"necessary dependencies."}]},{"type":"codeListing","syntax":"swift","code":["struct AppReducer: ReducerProtocol {","  struct State {","    \/\/ ...","    var tabC: TabCState","  }","","  enum Action {","    \/\/ ...","    case tabC(TabCAction)","  }","","  @Dependency(\\.date) var date","","  var body: some ReducerProtocol<State, Action> {","    \/\/ ...","    Scope(state: \\.tabC, action: \/Action.tabC) {","      Reduce(","        tabCReducer,","        environment: TabCEnvironment(date: self.date)","      )","    }","  }","}"]},{"anchor":"Migration-using-Swift-56","level":2,"type":"heading","text":"Migration using Swift 5.6"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The migration strategy described above for Swift 5.7 also applies to applications that are still"},{"type":"text","text":" "},{"type":"text","text":"using Xcode 13 and Swift 5.6, but with one small change. When conforming your types to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":" you are not allowed to use the syntax "},{"type":"codeVoice","code":"some ReducerProtocol<State, Action>"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"because that is only available in Swift 5.7. Instead, you must specify "},{"type":"codeVoice","code":"Reduce<State, Action>"},{"type":"text","text":" "},{"type":"text","text":"as the type of the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppReducer: ReducerProtocol {","  \/\/ ...","  var body: Reduce<State, Action> {","    FeatureA()","    FeatureB()","    FeatureC()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce"},{"type":"text","text":" type is like a type-erased reducer that allows you to construct a reducer from a"},{"type":"text","text":" "},{"type":"text","text":"closure. In Swift 5.6, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder"},{"type":"text","text":" will automatically erase the reducer you build for"},{"type":"text","text":" "},{"type":"text","text":"you so that you do not have to worry about specifying its type explicitly. This may come with a"},{"type":"text","text":" "},{"type":"text","text":"slight performance cost compared to using full opaque types for "},{"type":"codeVoice","code":"body"},{"type":"text","text":", but should be of comparable"},{"type":"text","text":" "},{"type":"text","text":"performance to reducers using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" type, which is now soft-deprecated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All other features of the library should work in Swift 5.6 without any other changes. This includes"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" and all dependency management tools."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingtothereducerprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to migrate existing applications to use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":", in both Swift 5.7 and"},{"type":"text","text":" "},{"type":"text","text":"Swift 5.6."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Migrating to the reducer protocol","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"seeAlsoSections":[{"title":"Upgrade guides","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer/pullback(state:action:environment:)":{"role":"symbol","title":"pullback(state:action:environment:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pullback"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ParentState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ParentAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ParentEnvironment"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"environment"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyReducer","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ParentAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":". Read"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"},{"type":"text","text":" for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/pullback(state:action:environment:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/anyreducer\/pullback(state:action:environment:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"role":"article","title":"Adopting Swift concurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftconcurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/ifCaseLet(_:action:then:file:fileID:line:)":{"role":"symbol","title":"ifCaseLet(_:action:then:file:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifCaseLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"CaseState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"CaseAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Case"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CaseState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"CaseAction"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_IfCaseLetReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Case"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on a case of parent enum state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifCaseLet(_:action:then:file:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducerprotocol\/ifcaselet(_:action:then:file:fileid:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/ifLet(_:action:then:file:fileID:line:)":{"role":"symbol","title":"ifLet(_:action:then:file:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"WrappedState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"WrappedAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"WrappedState"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"WrappedAction"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_IfLetReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:then:file:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducerprotocol\/iflet(_:action:then:file:fileid:line:)"},"#Binding-reducers":{"title":"Binding reducers","titleInlineContent":[{"type":"text","text":"Binding reducers"}],"type":"link","identifier":"#Binding-reducers","url":"#Binding-reducers"},"#Leaf-node-features":{"title":"Leaf node features","titleInlineContent":[{"type":"text","text":"Leaf node features"}],"type":"link","identifier":"#Leaf-node-features","url":"#Leaf-node-features"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"role":"symbol","title":"EffectTask","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectTask"}],"abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectTask"}],"url":"\/documentation\/composablearchitecture\/effecttask"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce/init(_:environment:)":{"role":"symbol","title":"init(_:environment:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Environment"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"AnyReducer","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"environment"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce\/init(_:environment:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/reduce\/init(_:environment:)"},"#Dependencies":{"title":"Dependencies","titleInlineContent":[{"type":"text","text":"Dependencies"}],"type":"link","identifier":"#Dependencies","url":"#Dependencies"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"role":"symbol","title":"Reduce","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reduce"}],"abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":" function."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reduce"}],"url":"\/documentation\/composablearchitecture\/reduce"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"deprecated":true,"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"This API has been deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Read "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"},{"type":"text","text":" for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"#Testing":{"title":"Testing","titleInlineContent":[{"type":"text","text":"Testing"}],"type":"link","identifier":"#Testing","url":"#Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"role":"symbol","title":"ReducerBuilder","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerBuilder"}],"abstract":[{"type":"text","text":"A result builder for combining reducers into a single reducer by running each, one after the"},{"type":"text","text":" "},{"type":"text","text":"other, and returning their merged effects."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerBuilder"}],"url":"\/documentation\/composablearchitecture\/reducerbuilder"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer/forEach(state:action:environment:file:fileID:line:)-2ypoa":{"role":"symbol","title":"forEach(state:action:environment:file:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ParentState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ParentAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ParentEnvironment"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"IdentifiedArray","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentAction"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")>, "},{"kind":"externalParam","text":"environment"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyReducer","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ParentState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ParentAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ParentEnvironment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/forEach(_:action:_:file:fileID:line:)"},{"type":"text","text":". Read"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"},{"type":"text","text":" for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/forEach(state:action:environment:file:fileID:line:)-2ypoa","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/anyreducer\/foreach(state:action:environment:file:fileid:line:)-2ypoa"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","title":"IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreOf":{"role":"symbol","title":"StoreOf","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreOf"}],"abstract":[{"type":"text","text":"A convenience type alias for referring to a store of a given reducer’s domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreOf"}],"url":"\/documentation\/composablearchitecture\/storeof"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer/optional(file:fileID:line:)":{"role":"symbol","title":"optional(file:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"optional"},{"kind":"text","text":"("},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyReducer","preciseIdentifier":"s:22ComposableArchitecture10AnyReducerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/ifLet(_:action:then:file:fileID:line:)"},{"type":"text","text":". Read"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"},{"type":"text","text":" for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/optional(file:fileID:line:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/anyreducer\/optional(file:fileid:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer/init(_:)-42p1a":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Environment"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer\/init(_:)-42p1a","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/anyreducer\/init(_:)-42p1a"},"#Composition-of-features":{"title":"Composition of features","titleInlineContent":[{"type":"text","text":"Composition of features"}],"type":"link","identifier":"#Composition-of-features","url":"#Composition-of-features"},"#Optional-and-pullback-reducers":{"title":"Optional and pullback reducers","titleInlineContent":[{"type":"text","text":"Optional and pullback reducers"}],"type":"link","identifier":"#Optional-and-pullback-reducers","url":"#Optional-and-pullback-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"role":"symbol","title":"BindingReducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingReducer"}],"abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"url":"\/documentation\/composablearchitecture\/bindingreducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"role":"symbol","title":"ReducerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerProtocol"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerProtocol"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/forEach(_:action:_:file:fileID:line:)":{"role":"symbol","title":"forEach(_:action:_:file:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ElementState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElementAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"IdentifiedArray","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementAction"},{"kind":"text","text":")>, () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_ForEachReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/forEach(_:action:_:file:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducerprotocol\/foreach(_:action:_:file:fileid:line:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/reduce(into:action:)-8yinq":{"defaultImplementations":1,"role":"symbol","title":"reduce(into:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectTask","preciseIdentifier":"s:22ComposableArchitecture10EffectTaska"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Evolves the current state of the reducer to the next state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/reduce(into:action:)-8yinq","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducerprotocol\/reduce(into:action:)-8yinq"},"#For-each-reducers":{"title":"For-each reducers","titleInlineContent":[{"type":"text","text":"For-each reducers"}],"type":"link","identifier":"#For-each-reducers","url":"#For-each-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingToTheReducerProtocol":{"role":"article","title":"Migrating to the reducer protocol","abstract":[{"type":"text","text":"Learn how to migrate existing applications to use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":", in both Swift 5.7 and"},{"type":"text","text":" "},{"type":"text","text":"Swift 5.6."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingtothereducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"role":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/composablearchitecture\/scope"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AnyReducer":{"deprecated":true,"role":"symbol","title":"AnyReducer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyReducer"}],"abstract":[{"type":"text","text":"This API has been soft-deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Read "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingToTheReducerProtocol"},{"type":"text","text":" for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AnyReducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyReducer"}],"url":"\/documentation\/composablearchitecture\/anyreducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/environment":{"role":"symbol","title":"environment","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"environment"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Environment"}],"abstract":[{"type":"text","text":"The current environment."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/environment","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/teststore\/environment"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/dependencies":{"role":"symbol","title":"dependencies","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependencies"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV"}],"abstract":[{"type":"text","text":"The current dependencies of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/dependencies"},"#Embedding-old-reducer-values-in-a-new-reducer-conformance":{"title":"Embedding old reducer values in a new reducer conformance","titleInlineContent":[{"type":"text","text":"Embedding old reducer values in a new reducer conformance"}],"type":"link","identifier":"#Embedding-old-reducer-values-in-a-new-reducer-conformance","url":"#Embedding-old-reducer-values-in-a-new-reducer-conformance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol/body-swift.property-7foai":{"conformance":{"constraints":[{"type":"codeVoice","code":"_Body"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Body","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP4Bodya"}],"abstract":[{"type":"text","text":"A non-existent body."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol\/body-swift.property-7foai","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducerprotocol\/body-swift.property-7foai"},"#Stores":{"title":"Stores","titleInlineContent":[{"type":"text","text":"Stores"}],"type":"link","identifier":"#Stores","url":"#Stores"},"#Migration-using-Swift-56":{"title":"Migration using Swift 5.6","titleInlineContent":[{"type":"text","text":"Migration using Swift 5.6"}],"type":"link","identifier":"#Migration-using-Swift-56","url":"#Migration-using-Swift-56"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"role":"article","title":"Testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/testing"}}}