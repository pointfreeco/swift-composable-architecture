{"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"text":" ","type":"text"},{"text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs","type":"text"},{"text":" ","type":"text"},{"text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest","type":"text"},{"text":" ","type":"text"},{"text":"APIs, and this article contains some tips for doing so.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Using-the-Reducer-macro","type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Using-case-key-paths"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Receiving-test-store-actions","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Moving-off-of-TaskResult","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Identified-actions","isActive":true}]}]}]},{"text":"Using the @Reducer macro","type":"heading","level":3,"anchor":"Using-the-Reducer-macro"},{"type":"paragraph","inlineContent":[{"text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":". It is called ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":", and to migrate existing code one only needs to annotate","type":"text"},{"text":" ","type":"text"},{"text":"their type with ","type":"text"},{"type":"codeVoice","code":"@Reducer"},{"text":":","type":"text"}]},{"syntax":"diff","type":"codeListing","code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of","type":"text"},{"text":" ","type":"text"},{"text":"reducer composition, such as case key paths (see guides below). See the documentation of","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" to see everything that macro adds to your feature’s reducer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also technically drop the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" conformance:"}]},{"syntax":"diff","type":"codeListing","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break."},{"type":"text","text":" "},{"type":"text","text":"See the documentation of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","isActive":true,"type":"reference"},{"type":"text","text":" for more gotchas on using the "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro."}]},{"text":"Using case key paths","type":"heading","level":3,"anchor":"Using-case-key-paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 we soft-deprecated many APIs that take the "},{"code":"CasePath","type":"codeVoice"},{"type":"text","text":" type in favor of APIs that take"},{"type":"text","text":" "},{"type":"text","text":"what is known as a "},{"code":"CaseKeyPath","type":"codeVoice"},{"type":"text","text":". Both of these types come from our "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do"},{"type":"text","text":" "},{"type":"text","text":"so with structs."}]},{"type":"paragraph","inlineContent":[{"text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths","type":"text"},{"text":" ","type":"text"},{"text":"that massively improved the ergonomics of using case paths. We introduced the ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro","type":"text"},{"text":" ","type":"text"},{"text":"for automatically deriving case paths so that we could stop using runtime reflection, and we","type":"text"},{"text":" ","type":"text"},{"text":"introduced a way of using key paths to describe case paths. And so the old ","type":"text"},{"type":"codeVoice","code":"CasePath"},{"text":" type has been","type":"text"},{"text":" ","type":"text"},{"text":"deprecated, and the new ","type":"text"},{"type":"codeVoice","code":"CaseKeyPath"},{"text":" type has taken its place.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This means that previously when you would use APIs involving case paths you would have to use the","type":"text"},{"text":" ","type":"text"},{"code":"\/","type":"codeVoice"},{"text":" prefix operator to derive the case path. For example:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You now get to shorten that into a far simpler, more familiar key path syntax:"}]},{"syntax":"swift","type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" conformances with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro:"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"Which automatically applies the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro to the feature’s ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum among other","type":"text"},{"text":" ","type":"text"},{"text":"things:","type":"text"}]},{"syntax":"diff","type":"codeListing","code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the feature’s "},{"type":"codeVoice","code":"State"},{"type":"text","text":" is an enum, "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" will also be applied, along with"},{"type":"text","text":" "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":":"}]},{"syntax":"diff","type":"codeListing","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be","type":"text"},{"text":" ","type":"text"},{"text":"useful when scoping a store’s state to a specific case:","type":"text"}]},{"syntax":"diff","type":"codeListing","code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"To form a case key path for any other enum, you must apply the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro explicitly:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]},{"type":"paragraph","inlineContent":[{"text":"And to access its associated values, you must also apply the ","type":"text"},{"code":"@dynamicMemberLookup","type":"codeVoice"},{"text":" attributes:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"]},{"type":"paragraph","inlineContent":[{"text":"Anywhere you previously used the ","type":"text"},{"code":"\/","type":"codeVoice"},{"text":" prefix operator for case paths you should now be able to use","type":"text"},{"text":" ","type":"text"},{"text":"key path syntax, so long as all of the enums involved are ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you encounter any problems, create a "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"reference","isActive":true},{"type":"text","text":" on the Composable Architecture"},{"type":"text","text":" "},{"type":"text","text":"repo."}]},{"text":"Receiving test store actions","type":"heading","level":3,"anchor":"Receiving-test-store-actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The power of case key paths and the "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro has made it possible to massively simplify"},{"type":"text","text":" "},{"type":"text","text":"how one asserts on actions received in a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"type":"text","text":". Instead of constructing the concrete action"},{"type":"text","text":" "},{"type":"text","text":"received from an effect like this:"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…you can use key path syntax to describe the nesting of action cases that is received:"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(\\.child.presented.response.success)"]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Case key path syntax requires that every nested action is "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":". Reducer actions"},{"type":"text","text":" "},{"type":"text","text":"are typically "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" automatically via the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, but other enums must be"},{"type":"text","text":" "},{"type":"text","text":"explicitly annotated:"}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]}]},{"type":"paragraph","inlineContent":[{"text":"And in the case of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"text":" you can even omit the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"path component:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(\\.child.response.success)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This does not assert on the "},{"type":"emphasis","inlineContent":[{"text":"data","type":"text"}]},{"type":"text","text":" received in the action, but typically that is already covered"},{"type":"text","text":" "},{"type":"text","text":"by the state assertion made inside the trailing closure of "},{"type":"codeVoice","code":"receive"},{"type":"text","text":". And if you use this style of"},{"type":"text","text":" "},{"type":"text","text":"action receiving exclusively, you can even stop conforming your action types to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"There are a few advanced situations to be aware of. When receiving an action that involves an","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"text":" (more information below in ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","isActive":true},{"text":"), then","type":"text"},{"text":" ","type":"text"},{"text":"you can use the subscript ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","isActive":true},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"receive a particular action for an element:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(\\.rows[id: 0].response.success)"]},{"type":"paragraph","inlineContent":[{"text":"And the same goes for ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true,"type":"reference"},{"text":" too:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(\\.path[id: 0].response.success)"]},{"text":"Moving off of TaskResult","type":"heading","level":3,"anchor":"Moving-off-of-TaskResult"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 of the library, the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" was soft-deprecated and eventually will be fully"},{"type":"text","text":" "},{"type":"text","text":"deprecated and then removed. The original rationale for the introduction of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" was to"},{"type":"text","text":" "},{"type":"text","text":"make an equatable-friendly version of "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" for when the error produced was "},{"type":"codeVoice","code":"any Error"},{"type":"text","text":", which is"},{"type":"text","text":" "},{"type":"text","text":"not equatable. And the reason to want an equatable-friendly result is so that the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" type in"},{"type":"text","text":" "},{"type":"text","text":"reducers can be equatable, and the reason for "},{"inlineContent":[{"type":"text","text":"that"}],"type":"emphasis"},{"type":"text","text":" is to make it possible to test actions"},{"type":"text","text":" "},{"type":"text","text":"emitted by effects."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically in tests, when one wants to assert that the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" received an action you must"},{"type":"text","text":" "},{"type":"text","text":"specify a concrete action:"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" uses the equatable conformance of "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" to confirm that you are asserting that"},{"type":"text","text":" "},{"type":"text","text":"the store received the correct action."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this becomes verbose when testing deeply nested features, which is common in integration"},{"type":"text","text":" "},{"type":"text","text":"tests:"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"However, with the introduction of ","type":"text"},{"overridingTitle":"case key paths","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"case key paths"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"text":" we greatly improved the","type":"text"},{"text":" ","type":"text"},{"text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the","type":"text"},{"text":" ","type":"text"},{"text":"case of the enum you expect to receive, and you can even omit the associated data from the action","type":"text"},{"text":" ","type":"text"},{"text":"since typically that is covered in the state assertion:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And this syntax does not require the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to be equatable since we are only asserting that"},{"type":"text","text":" "},{"type":"text","text":"the case of the action was received. We are not testing the data in the action."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We feel that with this better syntax there is less of a reason to have "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" and so we"},{"type":"text","text":" "},{"type":"text","text":"do plan on removing it eventually. If you have an important use case for "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" that you"},{"type":"text","text":" "},{"type":"text","text":"think merits it being in the library, please "},{"overridingTitle":"open a discussion","type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","overridingTitleInlineContent":[{"text":"open a discussion","type":"text"}],"isActive":true},{"type":"text","text":"."}]},{"text":"Identified actions","type":"heading","level":3,"anchor":"Identified-actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 of the library we introduced the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"type":"text","text":" type which makes it more"},{"type":"text","text":" "},{"type":"text","text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would"},{"type":"text","text":" "},{"type":"text","text":"have a case in your "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum for a particular row that holds the ID of the state being acted"},{"type":"text","text":" "},{"type":"text","text":"upon as well as the action:"}]},{"syntax":"swift","type":"codeListing","code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"]},{"type":"paragraph","inlineContent":[{"text":"This can be updated to hold onto ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"reference","isActive":true},{"text":" instead of those piece of data directly in the","type":"text"},{"text":" ","type":"text"},{"text":"case:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"]},{"type":"paragraph","inlineContent":[{"text":"And in the reducer, instead of invoking","type":"text"},{"text":" ","type":"text"},{"code":"Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","type":"codeVoice"},{"text":" with a case path using the","type":"text"},{"text":" ","type":"text"},{"code":"\/","type":"codeVoice"},{"text":" prefix operator:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"]},{"type":"paragraph","inlineContent":[{"text":"…you will instead use key path syntax to determine which case of the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum holds the","type":"text"},{"text":" ","type":"text"},{"text":"identified action:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"type":"text","text":" "},{"type":"text","text":"type-inference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One last change you will need to make is anywhere you are destructuring the old-style action you"},{"type":"text","text":" "},{"type":"text","text":"will need to insert a "},{"type":"codeVoice","code":".element"},{"type":"text","text":" layer:"}]},{"syntax":"diff","type":"codeListing","code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"]}],"kind":"content"}],"metadata":{"roleHeading":"Article","role":"article","title":"Migrating to 1.4","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.4"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","interfaceLanguage":"swift"},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","title":"Store","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"abstract":[],"kind":"section","title":"Identified actions","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"title":"StackAction","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StackAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/stackaction","kind":"symbol","navigatorTitle":[{"text":"StackAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"title":"Migrating to 1.5","url":"\/documentation\/composablearchitecture\/migratingto1.5","kind":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"code":"Store\/scope(state:action:)-90255","type":"codeVoice"},{"text":" operation on ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" ","type":"text"},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"title":"dependency(_:)","kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","title":"TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"url":"\/documentation\/composablearchitecture\/teststore","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"url":"\/documentation\/composablearchitecture\/migratingto1.17.1","abstract":[{"type":"text","text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable"},{"text":" ","type":"text"},{"text":"Architecture has been updated to extend support to this new version.","type":"text"}],"title":"Migrating to 1.17.1","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.16","role":"article","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy used with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","title":"Migrating to 1.16"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"url":"\/documentation\/composablearchitecture\/reducer()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","role":"symbol","type":"topic","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"text":" protocol for a type.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"title":"Reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"url":"\/documentation\/composablearchitecture\/presentationaction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","title":"PresentationAction","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.19":{"url":"\/documentation\/composablearchitecture\/migratingto1.19","role":"article","title":"Migrating to 1.19","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","type":"topic","kind":"article","abstract":[{"type":"text","text":"Store internals have been rewritten for performance and future features, and are now compatible with"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s "},{"code":"@StateObject","type":"codeVoice"},{"type":"text","text":" property wrapper."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"title":"Migrating to 1.7","url":"\/documentation\/composablearchitecture\/migratingto1.7","kind":"article","type":"topic","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"text":" ","type":"text"},{"text":"APIs such as ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"text":", and more.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","role":"article","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9","title":"Migrating to 1.9","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"method on ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":" which gives a succinct syntax for sending actions with case key paths, and","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"text":" method for overriding dependencies.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdentifiedAction","kind":"identifier"}],"title":"IdentifiedAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","url":"\/documentation\/composablearchitecture\/identifiedaction","kind":"symbol","navigatorTitle":[{"text":"IdentifiedAction","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"type":"topic","title":"subscript(id:)","url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","kind":"symbol","role":"symbol","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:13CasePathsCore03AnyA4PathV","text":"AnyCasePath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","url":"\/documentation\/composablearchitecture\/migratingto1.17","abstract":[{"text":"The ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" property wrapper and related tools have been extracted to their own","type":"text"},{"text":" ","type":"text"},{"text":"library so that they can be used in non-Composable Architecture applications. This a","type":"text"},{"text":" ","type":"text"},{"text":"backwards compatible change, but some new deprecations have been introduced.","type":"text"}],"role":"article","kind":"article","type":"topic","title":"Migrating to 1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","deprecated":true,"title":"ForEachStore","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","title":"IfLetStore","role":"symbol","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","title":"Gotchas","url":"\/documentation\/composablearchitecture\/reducer#Gotchas","abstract":[],"kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","type":"codeVoice"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","role":"article","title":"Migrating to 1.6","url":"\/documentation\/composablearchitecture\/migratingto1.6","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"role":"symbol","type":"topic","title":"Effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"url":"\/documentation\/composablearchitecture\/migratingto1.12","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","title":"Migrating to 1.12","type":"topic","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}],"role":"article","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"url":"\/documentation\/composablearchitecture\/taskresult","abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":".","type":"text"}],"deprecated":true,"title":"TaskResult","type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","title":"Reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"role":"symbol"},"#Moving-off-of-TaskResult":{"type":"link","identifier":"#Moving-off-of-TaskResult","title":"Moving off of TaskResult","titleInlineContent":[{"type":"text","text":"Moving off of "},{"type":"codeVoice","code":"TaskResult"}],"url":"#Moving-off-of-TaskResult"},"#Using-case-key-paths":{"type":"link","identifier":"#Using-case-key-paths","title":"Using case key paths","titleInlineContent":[{"text":"Using case key paths","type":"text"}],"url":"#Using-case-key-paths"},"#Receiving-test-store-actions":{"type":"link","identifier":"#Receiving-test-store-actions","title":"Receiving test store actions","titleInlineContent":[{"type":"text","text":"Receiving test store actions"}],"url":"#Receiving-test-store-actions"},"#Using-the-Reducer-macro":{"type":"link","identifier":"#Using-the-Reducer-macro","title":"Using the @Reducer macro","titleInlineContent":[{"text":"Using the @Reducer macro","type":"text"}],"url":"#Using-the-Reducer-macro"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"title":"Migrating to 1.14","url":"\/documentation\/composablearchitecture\/migratingto1.14","type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","abstract":[{"text":"The ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" type is now officially ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":" isolated.","type":"text"}],"role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}],"type":"topic","deprecated":true,"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","title":"WithViewStore","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}]},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","title":"discussion","titleInlineContent":[{"type":"text","text":"discussion"}],"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"kind":"article","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"property wrapper, and the "},{"code":"appStorage","type":"codeVoice"},{"type":"text","text":" and "},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":" persistence strategies."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.10","title":"Migrating to 1.10"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"kind":"article","title":"Migration guides","role":"collectionGroup","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","abstract":[{"text":"Learn how to upgrade your application to the newest version of the Composable Architecture.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migrationguides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.15","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"type":"text","text":"concurrency with no warnings or errors."}],"title":"Migrating to 1.15","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"url":"\/documentation\/composablearchitecture\/migratingto1.8","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","role":"article","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro, including automatic","type":"text"},{"text":" ","type":"text"},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"kind":"article","title":"Migrating to 1.8"},"http://github.com/pointfreeco/swift-case-paths":{"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","title":"CasePaths","titleInlineContent":[{"text":"CasePaths","type":"text"}],"url":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"kind":"symbol","title":"PresentationAction.presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" presentation state.","type":"text"}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"abstract":[{"text":"Update your code to use the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"text":" ","type":"text"},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.11","role":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","title":"Migrating to 1.11","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.18":{"role":"article","title":"Migrating to 1.18","kind":"article","abstract":[{"type":"text","text":"Stores now automatically cancel their in-flight effects when they deallocate. And another UIKit"},{"type":"text","text":" "},{"type":"text","text":"navigation helper has been introduced."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","url":"\/documentation\/composablearchitecture\/migratingto1.18"},"#Identified-actions":{"type":"link","identifier":"#Identified-actions","title":"Identified actions","titleInlineContent":[{"type":"text","text":"Identified actions"}],"url":"#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"kind":"article","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"text":" ","type":"text"},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"title":"Migrating to 1.13","url":"\/documentation\/composablearchitecture\/migratingto1.13","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","type":"topic"}}}