{"topicSections":[{"anchor":"Creating-a-test-store","title":"Creating a test store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:withDependencies:fileID:file:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreOf"]},{"title":"Configuring a test store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/useMainSerialExecutor"],"anchor":"Configuring-a-test-store"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:assert:fileID:file:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-8zqxk","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-35638","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:fileID:file:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:fileID:file:line:column:)-klnc","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/isDismissed","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"],"title":"Testing a reducer","anchor":"Testing-a-reducer"},{"anchor":"Skipping-actions-and-effects","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:fileID:file:line:column:)"],"title":"Skipping actions and effects"},{"title":"Accessing state","abstract":[{"text":"While the most common way of interacting with a test store’s state is via its","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic"},{"type":"text","text":" methods, you may also access it"},{"type":"text","text":" "},{"type":"text","text":"directly throughout a test."}],"anchor":"Accessing-state","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state"]},{"title":"Supporting types","anchor":"Supporting-types","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreOf"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations"],"anchor":"Deprecations","title":"Deprecations"},{"anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-8ujht","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/withDependencies(_:operation:)-988rh","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/withExhaustivity(_:operation:)-3fqeg"],"title":"Instance Methods"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"sections":[],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/s8SendableP"],"type":"conformsTo","kind":"relationships"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","kind":"attribute","text":"MainActor"},{"text":" ","kind":"text"},{"kind":"attribute","text":"@preconcurrency"},{"text":" ","kind":"text"},{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"},{"kind":"text","text":"<"},{"text":"State","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Action","kind":"genericParameter"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"This object aids in writing expressive and exhaustive tests for features built in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture. It allows you to send a sequence of actions to the store, and each step"},{"text":" ","type":"text"},{"type":"text","text":"of the way you must assert exactly how state changed, and how effect emissions were fed back"},{"text":" ","type":"text"},{"type":"text","text":"into the system."}]},{"type":"paragraph","inlineContent":[{"text":"See the dedicated ","type":"text"},{"text":"doc:Testing","type":"text"},{"type":"text","text":" article for detailed information on testing."}]},{"type":"heading","text":"Exhaustive testing","level":2,"anchor":"Exhaustive-testing"},{"inlineContent":[{"text":"By default, ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":" requires you to exhaustively prove how your feature evolves from"},{"type":"text","text":" "},{"type":"text","text":"sending use actions and receiving actions from effects. There are multiple ways the test store"},{"type":"text","text":" "},{"type":"text","text":"forces you to do this:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After each action is sent you must describe precisely how the state changed from before the"},{"text":" ","type":"text"},{"text":"action was sent to after it was sent.","type":"text"}]},{"inlineContent":[{"text":"If even the smallest piece of data differs the test will fail. This guarantees that you are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"proving you know precisely how the state of the system changes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sending an action can sometimes cause an effect to be executed, and if that effect sends an"},{"text":" ","type":"text"},{"text":"action back into the system, you ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" explicitly assert that you expect to receive that"},{"type":"text","text":" "},{"type":"text","text":"action from the effect, "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"text":" you must assert how state changed as a result.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to send another action before you have handled all effect actions, the test will"},{"text":" ","type":"text"},{"type":"text","text":"fail. This guarantees that you do not accidentally forget about an effect action, and that"},{"type":"text","text":" "},{"text":"the sequence of steps you are describing will mimic how the application behaves in reality.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All effects must complete by the time the test case has finished running, and all effect"},{"type":"text","text":" "},{"text":"actions must be asserted on.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If at the end of the assertion there is still an in-flight effect running or an unreceived","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"action, the assertion will fail. This helps exhaustively prove that you know what effects"},{"text":" ","type":"text"},{"type":"text","text":"are in flight and forces you to prove that effects will not cause any future changes to your"},{"type":"text","text":" "},{"type":"text","text":"state."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, given a simple counter reducer:"}]},{"code":["@Reducer","struct Counter {","  struct State: Equatable {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can assert against its behavior over time:"}]},{"syntax":"swift","code":["@MainActor","struct CounterTests {","  @Test","  func basics() async {","    let store = TestStore(","      \/\/ Given: a counter state of 0","      initialState: Counter.State(count: 0),","    ) {","      Counter()","    }","","    \/\/ When: the increment button is tapped","    await store.send(.incrementButtonTapped) {","      \/\/ Then: the count should be 1","      $0.count = 1","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note that in the trailing closure of ","type":"text"},{"type":"codeVoice","code":".send(.incrementButtonTapped)"},{"text":" we are given a single","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mutable value of the state before the action was sent, and it is our job to mutate the value to"},{"text":" ","type":"text"},{"text":"match the state after the action was sent. In this case the ","type":"text"},{"code":"count","type":"codeVoice"},{"type":"text","text":" field changes to "},{"code":"1","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the change made in the closure does not reflect reality, you will get a test failure with a"},{"type":"text","text":" "},{"type":"text","text":"nicely formatted failure message letting you know exactly what went wrong:"}]},{"code":["await store.send(.incrementButtonTapped) {","  $0.count = 42","}"],"type":"codeListing","syntax":"swift"},{"name":"❌ Failure","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A state change does not match expectation: …"}]},{"code":[" TestStoreFailureTests.State(","-   count: 42","+   count: 1"," )"],"type":"codeListing","syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"(Expected: −, Actual: +)"}]}],"style":"note"},{"inlineContent":[{"text":"For a more complex example, consider the following bare-bones search feature that uses a clock","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and cancel token to debounce requests:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Search {","  struct State: Equatable {","    var query = \"\"","    var results: [String] = []","  }","","  enum Action {","    case queryChanged(String)","    case searchResponse(Result<[String], any Error>)","  }","","  @Dependency(\\.apiClient) var apiClient","  @Dependency(\\.continuousClock) var clock","  private enum CancelID { case search }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case let .queryChanged(query):","        state.query = query","        return .run { send in","          try await self.clock.sleep(for: 0.5)","","          await send(.searchResponse(Result { try await self.apiClient.search(query) }))","        }","        .cancellable(id: CancelID.search, cancelInFlight: true)","","      case let .searchResponse(.success(results)):","        state.results = results","        return .none","","      case .searchResponse(.failure):","        \/\/ Do error handling here.","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be fully tested by overriding the "},{"type":"codeVoice","code":"apiClient"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"continuousClock"},{"type":"text","text":" dependencies with"},{"text":" ","type":"text"},{"text":"values that are fully controlled and deterministic:","type":"text"}]},{"syntax":"swift","code":["\/\/ Create a test clock to control the timing of effects","let clock = TestClock()","","let store = TestStore(initialState: Search.State()) {","  Search()","} withDependencies: {","  \/\/ Override the clock dependency with the test clock","  $0.continuousClock = clock","","  \/\/ Simulate a search response with one item","  $0.apiClient.search = { _ in","    [\"Composable Architecture\"]","  }",")","","\/\/ Change the query","await store.send(.searchFieldChanged(\"c\") {","  \/\/ Assert that state updates accordingly","  $0.query = \"c\"","}","","\/\/ Advance the clock by enough to get past the debounce","await clock.advance(by: 0.5)","","\/\/ Assert that the expected response is received","await store.receive(\\.searchResponse.success) {","  $0.results = [\"Composable Architecture\"]","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This test is proving that when the search query changes some search responses are delivered and"},{"type":"text","text":" "},{"type":"text","text":"state updates accordingly."}],"type":"paragraph"},{"inlineContent":[{"text":"If we did not assert that the ","type":"text"},{"type":"codeVoice","code":"searchResponse"},{"text":" action was received, we would get the following","type":"text"},{"type":"text","text":" "},{"type":"text","text":"test failure:"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"The store received 1 unexpected action after this one: …"}],"type":"paragraph"},{"code":["Unhandled actions: [","  [0]: Search.Action.searchResponse","]"],"syntax":null,"type":"codeListing"}],"style":"note","type":"aside","name":"❌ Failure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This helpfully lets us know that we have no asserted on everything that happened in the feature,"},{"type":"text","text":" "},{"type":"text","text":"which could be hiding a bug from us."}]},{"type":"paragraph","inlineContent":[{"text":"Or if we had sent another action before handling the effect’s action we would have also gotten","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a test failure:"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Must handle 1 received action before sending an action: …","type":"text"}]},{"type":"codeListing","syntax":null,"code":["Unhandled actions: [","  [0]: Search.Action.searchResponse","]"]}],"name":"❌ Failure","type":"aside"},{"inlineContent":[{"type":"text","text":"All of these types of failures help you prove that you know exactly how your feature evolves as"},{"type":"text","text":" "},{"type":"text","text":"actions are sent into the system. If the library did not produce a test failure in these"},{"type":"text","text":" "},{"text":"situations it could be hiding subtle bugs in your code. For example, when the user clears the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"search query you probably expect that the results are cleared and no search request is executed"},{"type":"text","text":" "},{"type":"text","text":"since there is no query. This can be done like so:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await store.send(.queryChanged(\"\")) {","  $0.query = \"\"","  $0.results = []","}","","\/\/ No need to perform `store.receive` since we do not expect a search","\/\/ effect to execute."]},{"inlineContent":[{"text":"But, if in the future a bug is introduced causing a search request to be executed even when the","type":"text"},{"text":" ","type":"text"},{"text":"query is empty, you will get a test failure because a new effect is being created that is not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"being asserted on. This is the power of exhaustive testing."}],"type":"paragraph"},{"anchor":"Non-exhaustive-testing","text":"Non-exhaustive testing","level":2,"type":"heading"},{"inlineContent":[{"text":"While exhaustive testing can be powerful, it can also be a nuisance, especially when testing how","type":"text"},{"text":" ","type":"text"},{"text":"many features integrate together. This is why sometimes you may want to selectively test in a","type":"text"},{"text":" ","type":"text"},{"text":"non-exhaustive style.","type":"text"}],"type":"paragraph"},{"name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"The concept of “non-exhaustive test store” was first introduced by","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/www.merowing.info","type":"reference"},{"text":" in a ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/vimeo.com\/751173570","type":"reference"},{"text":", and then later became integrated into the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"core library."}]}],"type":"aside","style":"tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Test stores are exhaustive by default, which means you must assert on every state change, and"},{"type":"text","text":" "},{"type":"text","text":"how ever effect feeds data back into the system, and you must make sure that all effects"},{"type":"text","text":" "},{"type":"text","text":"complete before the test is finished. To turn off exhaustivity you can set "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"to "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","type":"reference"},{"type":"text","text":". When that is done the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":"’s behavior changes:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The trailing closures of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-8zqxk"},{"text":" no longer need to assert on all","type":"text"},{"type":"text","text":" "},{"text":"state changes. They can assert on any subset of changes, and only if they make an incorrect","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mutation will a test failure be reported."}]}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","type":"reference"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-8zqxk"},{"type":"text","text":" methods are allowed to be"},{"text":" ","type":"text"},{"text":"called even when actions have been received from effects that have not been asserted on yet.","type":"text"},{"type":"text","text":" "},{"text":"Any pending actions will be cleared.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Tests are allowed to finish with unasserted, received actions and in-flight effects. No test"},{"type":"text","text":" "},{"text":"failures will be reported.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Non-exhaustive stores can be configured to report skipped assertions by configuring","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)"},{"text":". When set to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" the test store will have the"},{"type":"text","text":" "},{"type":"text","text":"added behavior that any unasserted change causes a grey, informational box to appear next to"},{"text":" ","type":"text"},{"text":"each assertion detailing the changes that were not asserted against. This allows you to see what","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"information you are choosing to ignore without causing a test failure. It can be useful in"},{"type":"text","text":" "},{"text":"tracking down bugs that happen in production but that aren’t currently detected in tests.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This style of testing is most useful for testing the integration of multiple features where you","type":"text"},{"type":"text","text":" "},{"text":"want to focus on just a certain slice of the behavior. Exhaustive testing can still be important","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use for leaf node features, where you truly do want to assert on everything happening inside"},{"text":" ","type":"text"},{"type":"text","text":"the feature."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have a tab-based application where the 3rd tab is a login screen. The"},{"type":"text","text":" "},{"type":"text","text":"user can fill in some data on the screen, then tap the “Submit” button, and then a series of"},{"type":"text","text":" "},{"type":"text","text":"events happens to  log the user in. Once the user is logged in, the 3rd tab switches from a"},{"text":" ","type":"text"},{"type":"text","text":"login screen to a profile screen, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" the selected tab switches to the first tab, which is an"},{"type":"text","text":" "},{"type":"text","text":"activity screen."}]},{"type":"paragraph","inlineContent":[{"text":"When writing tests for the login feature we will want to do that in the exhaustive style so that","type":"text"},{"type":"text","text":" "},{"text":"we can prove exactly how the feature would behave in production. But, suppose we wanted to write","type":"text"},{"text":" ","type":"text"},{"text":"an integration test that proves after the user taps the “Login” button that ultimately the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"selected tab switches to the first tab."}]},{"inlineContent":[{"type":"text","text":"In order to test such a complex flow we must test the integration of multiple features, which"},{"type":"text","text":" "},{"type":"text","text":"means dealing with complex, nested state and effects. We can emulate this flow in a test by"},{"type":"text","text":" "},{"type":"text","text":"sending actions that mimic the user logging in, and then eventually assert that the selected"},{"text":" ","type":"text"},{"text":"tab switched to activity:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(initialState: App.State()) {","  App()","}","","\/\/ 1️⃣ Emulate user tapping on submit button.","\/\/    (You can use case key path syntax to send actions to deeply nested features.)","await store.send(\\.login.submitButtonTapped) {","  \/\/ 2️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = true","  …","}","","\/\/ 3️⃣ Login feature performs API request to login, and","\/\/    sends response back into system.","await store.receive(\\.login.loginResponse.success) {","\/\/ 4️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = false","  …","}","","\/\/ 5️⃣ Login feature sends a delegate action to let parent","\/\/    feature know it has successfully logged in.","await store.receive(\\.login.delegate.didLogin) {","\/\/ 6️⃣ Assert how all of app state changes due to that action.","  $0.authenticatedTab = .loggedIn(","    Profile.State(...)","  )","  …","  \/\/ 7️⃣ *Finally* assert that the selected tab switches to activity.","  $0.selectedTab = .activity","}"]},{"inlineContent":[{"type":"text","text":"Doing this with exhaustive testing is verbose, and there are a few problems with this:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We need to be intimately knowledgeable in how the login feature works so that we can assert"},{"text":" ","type":"text"},{"text":"on how its state changes and how its effects feed data back into the system.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If the login feature were to change its logic we may get test failures here even though the","type":"text"},{"text":" ","type":"text"},{"text":"logic we are actually trying to test doesn’t really care about those changes.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"This test is very long, and so if there are other similar but slightly different flows we"},{"text":" ","type":"text"},{"text":"want to test we will be tempted to copy-and-paste the whole thing, leading to lots of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"duplicated, fragile tests."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Non-exhaustive testing allows us to test the high-level flow that we are concerned with, that of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"login causing the selected tab to switch to activity, without having to worry about what is"},{"type":"text","text":" "},{"type":"text","text":"happening inside the login feature. To do this, we can turn off "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"text":" in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the test store, and then just assert on what we are interested in:"}],"type":"paragraph"},{"type":"codeListing","code":["let store = TestStore(App.State()) {","  App()","}","store.exhaustivity = .off  \/\/ ⬅️","","await store.send(\\.login.submitButtonTapped)","await store.receive(\\.login.delegate.didLogin) {","  $0.selectedTab = .activity","}"],"syntax":"swift"},{"inlineContent":[{"text":"In particular, we did not assert on how the login’s state changed or how the login’s effects fed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"data back into the system. We just assert that when the “Submit” button is tapped that"},{"text":" ","type":"text"},{"type":"text","text":"eventually we get the "},{"type":"codeVoice","code":"didLogin"},{"text":" delegate action and that causes the selected tab to flip to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"activity. Now the login feature is free to make any change it wants to make without affecting"},{"text":" ","type":"text"},{"text":"this integration test.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Using ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","type":"reference","isActive":true},{"text":" for ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","type":"reference","isActive":true},{"type":"text","text":" causes all un-asserted changes to pass"},{"type":"text","text":" "},{"type":"text","text":"without any notification. If you would like to see what test failures are being suppressed"},{"text":" ","type":"text"},{"text":"without actually causing a failure, you can use ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","type":"reference","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(initialState: App.State()) {","  App()","}","store.exhaustivity = .off(showSkippedAssertions: true)  \/\/ ⬅️","","await store.send(\\.login.submitButtonTapped)","await store.receive(\\.login.delegate.didLogin) {","  $0.selectedTab = .profile","}"]},{"type":"paragraph","inlineContent":[{"text":"When this is run you will get grey, informational boxes on each assertion where some change","type":"text"},{"type":"text","text":" "},{"type":"text","text":"wasn’t fully asserted on:"}]},{"type":"aside","style":"note","name":"◽️ Expected failure","content":[{"type":"paragraph","inlineContent":[{"text":"A state change does not match expectation: …","type":"text"}]},{"syntax":"diff","code":["  App.State(","    authenticatedTab: .loggedOut(","      Login.State(","-       isLoading: false","+       isLoading: true,","        …","      )","    )","  )"],"type":"codeListing"},{"inlineContent":[{"text":"Skipped receiving .login(.loginResponse(.success))","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A state change does not match expectation: …"}],"type":"paragraph"},{"code":["  App.State(","-   authenticatedTab: .loggedOut(…)","+   authenticatedTab: .loggedIn(","+     Profile.State(…)","+   ),","    …","  )"],"type":"codeListing","syntax":"diff"},{"inlineContent":[{"type":"text","text":"(Expected: −, Actual: +)"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The test still passes, and none of these notifications are test failures. They just let you know"},{"text":" ","type":"text"},{"text":"what things you are not explicitly asserting against, and can be useful to see when tracking","type":"text"},{"text":" ","type":"text"},{"text":"down bugs that happen in production but that aren’t currently detected in tests.","type":"text"}]}],"kind":"content"}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/teststore"]}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"symbolKind":"class","role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"roleHeading":"Class","externalID":"s:22ComposableArchitecture9TestStoreC"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/useMainSerialExecutor":{"role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/usemainserialexecutor","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"useMainSerialExecutor"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","kind":"symbol","title":"useMainSerialExecutor","abstract":[{"text":"Serializes all async work to the main thread for the lifetime of the test store.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/useMainSerialExecutor"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off":{"kind":"symbol","abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"title":"off","type":"topic","url":"\/documentation\/composablearchitecture\/exhaustivity\/off","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"off"},{"text":": ","kind":"text"},{"text":"Exhaustivity","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/withExhaustivity(_:operation:)-3fqeg":{"abstract":[{"text":"Overrides the store’s exhaustivity for a given operation.","type":"text"}],"role":"symbol","title":"withExhaustivity(_:operation:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/withExhaustivity(_:operation:)-3fqeg","url":"\/documentation\/composablearchitecture\/teststore\/withexhaustivity(_:operation:)-3fqeg","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withExhaustivity"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"keyword","text":"sending "},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"abstract":[{"text":"Asserts an action was received matching a case path with a specific payload, and asserts how","type":"text"},{"type":"text","text":" "},{"text":"the state changes.","type":"text"}],"title":"receive(_:_:timeout:assert:fileID:file:line:column:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"receive"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha","text":"_SendableCaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/timeout":{"role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/timeout","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"timeout","kind":"identifier"},{"text":": ","kind":"text"},{"text":"UInt64","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt64V"}],"type":"topic","kind":"symbol","title":"timeout","abstract":[{"type":"text","text":"The default timeout used in all methods that take an optional timeout."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipInFlightEffects(strict:fileID:file:line:column:)":{"abstract":[{"type":"text","text":"Cancels any currently in-flight effects."}],"role":"symbol","title":"skipInFlightEffects(strict:fileID:file:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipInFlightEffects(strict:fileID:file:line:column:)","url":"\/documentation\/composablearchitecture\/teststore\/skipinflighteffects(strict:fileid:file:line:column:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"skipInFlightEffects","kind":"identifier"},{"kind":"text","text":"("},{"text":"strict","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"kind":"symbol"},"https://vimeo.com/751173570":{"title":"conference talk","identifier":"https:\/\/vimeo.com\/751173570","url":"https:\/\/vimeo.com\/751173570","type":"link","titleInlineContent":[{"type":"text","text":"conference talk"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8f2pl":{"title":"send(_:assert:fileID:file:line:column:)","abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8f2pl","type":"topic","kind":"symbol"},"https://www.merowing.info":{"title":"Krzysztof Zabłocki","identifier":"https:\/\/www.merowing.info","url":"https:\/\/www.merowing.info","type":"link","titleInlineContent":[{"type":"text","text":"Krzysztof Zabłocki"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"title":"TestStore","kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-35638":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"receive(_:timeout:assert:fileID:file:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-35638","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-35638","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"receive"},{"kind":"text","text":"(("},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", "},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:s8DurationV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"type":"topic","abstract":[{"type":"text","text":"Asserts an action was received from an effect that matches a predicate, and asserts how the"},{"text":" ","type":"text"},{"text":"state changes.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/init(initialState:reducer:withDependencies:fileID:file:line:column:)":{"role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/init(initialstate:reducer:withdependencies:fileid:file:line:column:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"text":"initialState","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"attribute","text":"@autoclosure "},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"reducer","kind":"externalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"R"},{"text":", ","kind":"text"},{"text":"withDependencies","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","title":"init(initialState:reducer:withDependencies:fileID:file:line:column:)","abstract":[{"type":"text","text":"Creates a test store with an initial state and a reducer powering its runtime."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:withDependencies:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/assert(_:fileID:file:line:column:)":{"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"type":"text","text":"Assert against the current state of the store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:fileID:file:line:column:)","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/assert(_:fileid:file:line:column:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"assert","kind":"identifier"},{"kind":"text","text":"(("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":")","kind":"text"}],"title":"assert(_:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/withDependencies(_:operation:)-988rh":{"title":"withDependencies(_:operation:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withDependencies","kind":"identifier"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"sending ","kind":"keyword"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/teststore\/withdependencies(_:operation:)-988rh","abstract":[{"type":"text","text":"Overrides the store’s dependencies for a given operation."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/withDependencies(_:operation:)-988rh"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/finish(timeout:fileID:file:line:column:)-klnc":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/finish(timeout:fileid:file:line:column:)-klnc","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"kind":"text","text":"("},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:s8DurationV"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Suspends until all in-flight effects have finished, or until it times out."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:fileID:file:line:column:)-klnc","role":"symbol","title":"finish(timeout:fileID:file:line:column:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","type":"topic","kind":"symbol","title":"Exhaustivity.off(showSkippedAssertions:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"off","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"showSkippedAssertions"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}]},"https://www.merowing.info/exhaustive-testing-in-tca/":{"title":"blog post","identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","url":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","type":"link","titleInlineContent":[{"text":"blog post","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"role":"symbol","abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"type":"topic","title":"send(_:assert:fileID:file:line:column:)","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreDeprecations":{"type":"topic","title":"Deprecations","url":"\/documentation\/composablearchitecture\/teststoredeprecations","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Review unsupported test store APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations"},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-8ujht":{"abstract":[{"text":"Asserts an action was received matching a case path and asserts how the state changes.","type":"text"}],"role":"symbol","title":"receive(_:timeout:assert:fileID:file:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-8ujht","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-8ujht","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt64","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt64V"},{"text":"?, ","kind":"text"},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:_:assert:fileID:file:line:column:)":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"send(_:_:assert:fileID:file:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:assert:fileID:file:line:column:)","url":"\/documentation\/composablearchitecture\/teststore\/send(_:_:assert:fileid:file:line:column:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier","text":"TestStoreTask"}],"type":"topic","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/dependencies":{"role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/dependencies","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependencies","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues","kind":"typeIdentifier"}],"type":"topic","kind":"symbol","title":"dependencies","abstract":[{"type":"text","text":"The current dependencies of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipReceivedActions(strict:fileID:file:line:column:)":{"kind":"symbol","abstract":[{"type":"text","text":"Clears the queue of received actions from effects."}],"type":"topic","title":"skipReceivedActions(strict:fileID:file:line:column:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"skipReceivedActions","kind":"identifier"},{"kind":"text","text":"("},{"text":"strict","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)","url":"\/documentation\/composablearchitecture\/teststore\/skipreceivedactions(strict:fileid:file:line:column:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/state":{"abstract":[{"type":"text","text":"The current state of the test store."}],"role":"symbol","title":"state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","url":"\/documentation\/composablearchitecture\/teststore\/state","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"text":"State","kind":"typeIdentifier"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreOf":{"role":"symbol","url":"\/documentation\/composablearchitecture\/teststoreof","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStoreOf","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"TestStoreOf","kind":"identifier"}],"title":"TestStoreOf","abstract":[{"text":"A convenience type alias for referring to a test store of a given reducer’s domain.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreOf"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"url":"\/documentation\/composablearchitecture\/teststoretask","kind":"symbol","navigatorTitle":[{"text":"TestStoreTask","kind":"identifier"}],"title":"TestStoreTask","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TestStoreTask","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"The type returned from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"text":" that represents the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lifecycle of the effect started from sending an action."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/isDismissed":{"role":"symbol","abstract":[{"type":"text","text":"Returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the store’s feature has been dismissed."}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"isDismissed","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"type":"topic","title":"isDismissed","url":"\/documentation\/composablearchitecture\/teststore\/isdismissed","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/isDismissed"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"kind":"symbol","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Exhaustivity","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","title":"exhaustivity","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-53wic":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV","text":"Duration"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-53wic","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic","title":"receive(_:timeout:assert:fileID:file:line:column:)","kind":"symbol","abstract":[{"text":"Asserts an action was received matching a case path and asserts how the state changes.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-8zqxk":{"type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-8zqxk","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-8zqxk","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"receive","kind":"identifier"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"receive(_:timeout:assert:fileID:file:line:column:)"}}}