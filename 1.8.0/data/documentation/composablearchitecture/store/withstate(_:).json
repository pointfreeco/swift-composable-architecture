{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withState"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"body"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"body","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes the current state of the store as its sole argument. If"},{"type":"text","text":" "},{"type":"text","text":"the closure has a return value, that value is also used as the return value of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"withState"},{"type":"text","text":" method. The state argument reflects the current state of the store only for the"},{"type":"text","text":" "},{"type":"text","text":"duration of the closureâ€™s execution, and is only observable over time, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"type":"text","text":" by SwiftUI, if"},{"type":"text","text":" "},{"type":"text","text":"it conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The return value, if any, of the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" closure."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A lightweight way of accessing store state when state is not observable and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"unavailable."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/store\/withstate(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Calls the given closure with a snapshot of the current state of the store."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withState"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"}],"title":"withState(_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:22ComposableArchitecture5StoreC9withStateyqd__qd__xXElF","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"]]},"seeAlsoSections":[{"title":"Accessing state","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/withState(_:)":{"role":"symbol","title":"withState(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withState"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Calls the given closure with a snapshot of the current state of the store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/withstate(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState":{"role":"symbol","title":"ObservableState","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObservableState"}],"url":"\/documentation\/composablearchitecture\/observablestate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/state-1qxwl":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"state","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"}],"abstract":[{"type":"text","text":"Direct access to state in the store when "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/state-1qxwl"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/subscript(dynamicMember:)-655ef":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"subscript(dynamicMember:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/subscript(dynamicmember:)-655ef"}}}