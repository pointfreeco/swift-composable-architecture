{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.4"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"roleHeading":"Article","title":"Migrating to 1.4","modules":[{"name":"ComposableArchitecture"}],"role":"article"},"abstract":[{"text":"Update your code to make use of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"text":" ","type":"text"},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"text":" ","type":"text"},{"text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest","type":"text"},{"type":"text","text":" "},{"text":"APIs, and this article contains some tips for doing so.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"identifier":"#Using-the-Reducer-macro","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Using-case-key-paths"}]}]},{"content":[{"inlineContent":[{"identifier":"#Receiving-test-store-actions","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Moving-off-of-TaskResult","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"#Identified-actions","type":"reference","isActive":true}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Using-the-Reducer-macro","text":"Using the @Reducer macro","level":3,"type":"heading"},{"inlineContent":[{"text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"text":". It is called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":", and to migrate existing code one only needs to annotate"},{"type":"text","text":" "},{"type":"text","text":"their type with "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of"},{"text":" ","type":"text"},{"type":"text","text":"reducer composition, such as case key paths (see guides below). See the documentation of"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" to see everything that macro adds to your feature’s reducer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also technically drop the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" conformance:"}]},{"syntax":"diff","type":"codeListing","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"]},{"inlineContent":[{"type":"text","text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break."},{"type":"text","text":" "},{"text":"See the documentation of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","type":"reference"},{"type":"text","text":" for more gotchas on using the "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro."}],"type":"paragraph"},{"text":"Using case key paths","type":"heading","anchor":"Using-case-key-paths","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 we soft-deprecated many APIs that take the "},{"code":"CasePath","type":"codeVoice"},{"text":" type in favor of APIs that take","type":"text"},{"type":"text","text":" "},{"type":"text","text":"what is known as a "},{"type":"codeVoice","code":"CaseKeyPath"},{"type":"text","text":". Both of these types come from our "},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true},{"type":"text","text":" "},{"text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so with structs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths"},{"type":"text","text":" "},{"text":"that massively improved the ergonomics of using case paths. We introduced the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro"},{"type":"text","text":" "},{"text":"for automatically deriving case paths so that we could stop using runtime reflection, and we","type":"text"},{"type":"text","text":" "},{"text":"introduced a way of using key paths to describe case paths. And so the old ","type":"text"},{"code":"CasePath","type":"codeVoice"},{"type":"text","text":" type has been"},{"text":" ","type":"text"},{"type":"text","text":"deprecated, and the new "},{"type":"codeVoice","code":"CaseKeyPath"},{"text":" type has taken its place.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that previously when you would use APIs involving case paths you would have to use the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator to derive the case path. For example:"}]},{"code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You now get to shorten that into a far simpler, more familiar key path syntax:"}]},{"type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" conformances with the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Feature {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Which automatically applies the ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro to the feature’s "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum among other"},{"text":" ","type":"text"},{"type":"text","text":"things:"}]},{"code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"],"type":"codeListing","syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the feature’s "},{"type":"codeVoice","code":"State"},{"type":"text","text":" is an enum, "},{"code":"@CasePathable","type":"codeVoice"},{"text":" will also be applied, along with","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"text":":","type":"text"}]},{"code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"],"syntax":"diff","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be","type":"text"},{"type":"text","text":" "},{"text":"useful when scoping a store’s state to a specific case:","type":"text"}]},{"syntax":"diff","code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"To form a case key path for any other enum, you must apply the ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro explicitly:"}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And to access its associated values, you must also apply the "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"text":" attributes:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"]},{"inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"type":"codeVoice","code":"\/"},{"text":" prefix operator for case paths you should now be able to use","type":"text"},{"type":"text","text":" "},{"text":"key path syntax, so long as all of the enums involved are ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you encounter any problems, create a "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"reference","isActive":true},{"text":" on the Composable Architecture","type":"text"},{"type":"text","text":" "},{"type":"text","text":"repo."}]},{"level":3,"text":"Receiving test store actions","type":"heading","anchor":"Receiving-test-store-actions"},{"inlineContent":[{"type":"text","text":"The power of case key paths and the "},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro has made it possible to massively simplify","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how one asserts on actions received in a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"text":". Instead of constructing the concrete action","type":"text"},{"text":" ","type":"text"},{"text":"received from an effect like this:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"…you can use key path syntax to describe the nesting of action cases that is received:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.presented.response.success)"]},{"content":[{"inlineContent":[{"type":"text","text":"Case key path syntax requires that every nested action is "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":". Reducer actions"},{"text":" ","type":"text"},{"text":"are typically ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" automatically via the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro, but other enums must be","type":"text"},{"text":" ","type":"text"},{"text":"explicitly annotated:","type":"text"}],"type":"paragraph"},{"code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"syntax":"swift","type":"codeListing"}],"style":"note","name":"Note","type":"aside"},{"inlineContent":[{"text":"And in the case of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" you can even omit the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},{"text":" ","type":"text"},{"type":"text","text":"path component:"}],"type":"paragraph"},{"syntax":"swift","code":["store.receive(\\.child.response.success)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This does not assert on the "},{"inlineContent":[{"type":"text","text":"data"}],"type":"emphasis"},{"type":"text","text":" received in the action, but typically that is already covered"},{"text":" ","type":"text"},{"type":"text","text":"by the state assertion made inside the trailing closure of "},{"type":"codeVoice","code":"receive"},{"text":". And if you use this style of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"action receiving exclusively, you can even stop conforming your action types to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few advanced situations to be aware of. When receiving an action that involves an"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"text":" (more information below in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions"},{"type":"text","text":"), then"},{"text":" ","type":"text"},{"text":"you can use the subscript ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"receive a particular action for an element:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.rows[id: 0].response.success)"]},{"inlineContent":[{"text":"And the same goes for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" too:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["store.receive(\\.path[id: 0].response.success)"]},{"type":"heading","text":"Moving off of TaskResult","anchor":"Moving-off-of-TaskResult","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 of the library, the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"text":" was soft-deprecated and eventually will be fully","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deprecated and then removed. The original rationale for the introduction of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"text":" was to","type":"text"},{"type":"text","text":" "},{"text":"make an equatable-friendly version of ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" for when the error produced was ","type":"text"},{"code":"any Error","type":"codeVoice"},{"type":"text","text":", which is"},{"text":" ","type":"text"},{"type":"text","text":"not equatable. And the reason to want an equatable-friendly result is so that the "},{"type":"codeVoice","code":"Action"},{"text":" type in","type":"text"},{"text":" ","type":"text"},{"text":"reducers can be equatable, and the reason for ","type":"text"},{"inlineContent":[{"type":"text","text":"that"}],"type":"emphasis"},{"type":"text","text":" is to make it possible to test actions"},{"text":" ","type":"text"},{"type":"text","text":"emitted by effects."}]},{"inlineContent":[{"text":"Typically in tests, when one wants to assert that the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" received an action you must"},{"type":"text","text":" "},{"type":"text","text":"specify a concrete action:"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" uses the equatable conformance of "},{"code":"Action","type":"codeVoice"},{"text":" to confirm that you are asserting that","type":"text"},{"type":"text","text":" "},{"text":"the store received the correct action.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, this becomes verbose when testing deeply nested features, which is common in integration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tests:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, with the introduction of "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"reference","overridingTitle":"case key paths","isActive":true,"overridingTitleInlineContent":[{"text":"case key paths","type":"text"}]},{"type":"text","text":" we greatly improved the"},{"text":" ","type":"text"},{"type":"text","text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the"},{"type":"text","text":" "},{"type":"text","text":"case of the enum you expect to receive, and you can even omit the associated data from the action"},{"text":" ","type":"text"},{"text":"since typically that is covered in the state assertion:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"]},{"inlineContent":[{"text":"And this syntax does not require the ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum to be equatable since we are only asserting that"},{"type":"text","text":" "},{"text":"the case of the action was received. We are not testing the data in the action.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We feel that with this better syntax there is less of a reason to have "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" and so we"},{"type":"text","text":" "},{"type":"text","text":"do plan on removing it eventually. If you have an important use case for "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" that you"},{"type":"text","text":" "},{"text":"think merits it being in the library, please ","type":"text"},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"reference","overridingTitle":"open a discussion","overridingTitleInlineContent":[{"text":"open a discussion","type":"text"}],"isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Identified-actions","text":"Identified actions","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"In version 1.4 of the library we introduced the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"reference","isActive":true},{"text":" type which makes it more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would"},{"type":"text","text":" "},{"type":"text","text":"have a case in your "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum for a particular row that holds the ID of the state being acted"},{"type":"text","text":" "},{"type":"text","text":"upon as well as the action:"}],"type":"paragraph"},{"syntax":"swift","code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be updated to hold onto "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"type":"text","text":" instead of those piece of data directly in the"},{"type":"text","text":" "},{"type":"text","text":"case:"}]},{"code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"And in the reducer, instead of invoking"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","isActive":true},{"type":"text","text":" with a case path using the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator:"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"…you will instead use key path syntax to determine which case of the "},{"type":"codeVoice","code":"Action"},{"text":" enum holds the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"identified action:"}],"type":"paragraph"},{"syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"type":"text","text":" "},{"text":"type-inference.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One last change you will need to make is anywhere you are destructuring the old-style action you"},{"text":" ","type":"text"},{"text":"will need to insert a ","type":"text"},{"code":".element","type":"codeVoice"},{"text":" layer:","type":"text"}]},{"type":"codeListing","syntax":"diff","code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"]}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"},"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"role":"symbol","title":"Store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"title":"TestStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","title":"ComposableArchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic"},"#Receiving-test-store-actions":{"title":"Receiving test store actions","type":"link","identifier":"#Receiving-test-store-actions","url":"#Receiving-test-store-actions","titleInlineContent":[{"type":"text","text":"Receiving test store actions"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","url":"\/documentation\/composablearchitecture\/presentationaction","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"kind":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"title":"PresentationAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"abstract":[{"text":"The ","type":"text"},{"code":".appStorage","type":"codeVoice"},{"type":"text","text":" strategy used with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" now uses key-value observing instead of"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NotificationCenter"},{"text":" when possible. Learn how this may affect your code.","type":"text"}],"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.16","title":"Migrating to 1.16","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.15","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","role":"article","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"type":"text","text":"concurrency with no warnings or errors."}],"kind":"article","title":"Migrating to 1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"role":"symbol","title":"IdentifiedAction","kind":"symbol","navigatorTitle":[{"text":"IdentifiedAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/identifiedaction","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"IdentifiedAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"topic","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:filePath:line:column:)-6zye8":{"role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ElementState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElementAction"},{"kind":"text","text":", "},{"text":"ID","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Element","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","text":"IdentifiedArray"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementState"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementAction"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"element"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier","text":"Reducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">\n"}],"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:filepath:line:column:)-6zye8","title":"forEach(_:action:element:fileID:filePath:line:column:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"topic","abstract":[],"title":"Effect","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"codeVoice","code":"withLock"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"type":"text","text":" "},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.11","title":"Migrating to 1.11","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","title":"Migration guides","url":"\/documentation\/composablearchitecture\/migrationguides","type":"topic","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","role":"symbol","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"kind":"symbol","title":"scope(state:action:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.17.1","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","role":"article","abstract":[{"type":"text","text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}],"kind":"article","title":"Migrating to 1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.5","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"kind":"article","title":"Migrating to 1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()","title":"Reducer()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":" protocol for a type."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","title":"Migrating to 1.10","url":"\/documentation\/composablearchitecture\/migratingto1.10","type":"topic","role":"article","kind":"article","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":" ","type":"text"},{"text":"property wrapper, and the ","type":"text"},{"type":"codeVoice","code":"appStorage"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":" persistence strategies."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","url":"\/documentation\/composablearchitecture\/migratingto1.13","role":"article","kind":"article","type":"topic","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"title":"Migrating to 1.13"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","role":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"method on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"text":" method for overriding dependencies.","type":"text"}],"kind":"article","title":"Migrating to 1.9"},"http://github.com/pointfreeco/swift-case-paths":{"title":"CasePaths","type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","titleInlineContent":[{"type":"text","text":"CasePaths"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"title":"PresentationAction.presented(_:)","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"presented"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","role":"symbol","abstract":[{"type":"text","text":"An action sent to the associated, non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" presentation state."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","role":"symbol","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"title":"dependency(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"dependency","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"title":"Gotchas","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","url":"\/documentation\/composablearchitecture\/reducer#Gotchas","abstract":[],"kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","title":"Migrating to 1.17","url":"\/documentation\/composablearchitecture\/migratingto1.17","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"text":" ","type":"text"},{"text":"library so that they can be used in non-Composable Architecture applications. This a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","title":"Migrating to 1.12","url":"\/documentation\/composablearchitecture\/migratingto1.12","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"title":"WithViewStore","role":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","role":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":" _: ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths03AnyA4PathV","text":"AnyCasePath"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"title":"subscript(id:)","url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","abstract":[],"type":"topic"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"title":"discussion","type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","titleInlineContent":[{"text":"discussion","type":"text"}]},"#Using-the-Reducer-macro":{"title":"Using the @Reducer macro","identifier":"#Using-the-Reducer-macro","type":"link","url":"#Using-the-Reducer-macro","titleInlineContent":[{"type":"text","text":"Using the @Reducer macro"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"type":"topic","url":"\/documentation\/composablearchitecture\/foreachstore","kind":"symbol","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ForEachStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","deprecated":true,"title":"ForEachStore","role":"symbol","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.14","title":"Migrating to 1.14","role":"article","kind":"article","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" type is now officially "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" isolated."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"abstract":[],"kind":"section","type":"topic","title":"Identified actions","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions"},"#Identified-actions":{"title":"Identified actions","type":"link","identifier":"#Identified-actions","url":"#Identified-actions","titleInlineContent":[{"text":"Identified actions","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"deprecated":true,"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"url":"\/documentation\/composablearchitecture\/taskresult","kind":"symbol","abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" "},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"type":"text","text":" "},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"title":"TaskResult","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","role":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"type":"topic","title":"IfLetStore","deprecated":true,"kind":"symbol"},"#Moving-off-of-TaskResult":{"title":"Moving off of TaskResult","identifier":"#Moving-off-of-TaskResult","type":"link","url":"#Moving-off-of-TaskResult","titleInlineContent":[{"type":"text","text":"Moving off of "},{"code":"TaskResult","type":"codeVoice"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.6","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"text":" ","type":"text"},{"code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","type":"codeVoice"},{"type":"text","text":" method when you need to"},{"text":" ","type":"text"},{"type":"text","text":"assert on the payload inside an action received."}],"kind":"article","title":"Migrating to 1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","abstract":[{"text":"A wrapper type for actions that can be presented in a navigation stack.","type":"text"}],"url":"\/documentation\/composablearchitecture\/stackaction","title":"StackAction","role":"symbol","kind":"symbol","type":"topic"},"#Using-case-key-paths":{"title":"Using case key paths","identifier":"#Using-case-key-paths","type":"link","url":"#Using-case-key-paths","titleInlineContent":[{"type":"text","text":"Using case key paths"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro, including automatic"},{"text":" ","type":"text"},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"title":"Migrating to 1.8","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","role":"article","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"text":"APIs such as ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":", and more."}],"kind":"article","title":"Migrating to 1.7"}}}