{"seeAlsoSections":[{"generated":true,"anchor":"State-management","title":"State management","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/reducer"]}],"sections":[],"metadata":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}],"externalID":"s:22ComposableArchitecture7ReducerP","roleHeading":"Protocol","title":"Reducer","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"protocol","role":"symbol","navigatorTitle":[{"text":"Reducer","kind":"identifier"}]},"kind":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"topicSections":[{"anchor":"Implementing-a-reducer","title":"Implementing a reducer","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]},{"anchor":"Composing-reducers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers"],"title":"Composing reducers"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:filePath:line:column:)-2r2pn","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],"title":"Embedding child features","anchor":"Embedding-child-features"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional"],"title":"Supporting reducers","anchor":"Supporting-reducers"},{"title":"Reducer modifiers","anchor":"Reducer-modifiers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/transformDependency(_:transform:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/signpost(_:log:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerOf"],"anchor":"Supporting-types","title":"Supporting types"},{"title":"Deprecations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations"],"anchor":"Deprecations"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:fileID:filePath:line:column:)-9blhe"],"anchor":"Instance-Methods","title":"Instance Methods","generated":true}],"relationshipsSections":[{"title":"Inherited By","kind":"relationships","type":"inheritedBy","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol describes how to evolve the current state of an application to the next"},{"text":" ","type":"text"},{"text":"state, given an action, and describes what ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any. Types that conform to this protocol represent the domain, logic and behavior for a feature."},{"type":"text","text":" "},{"type":"text","text":"Conformances to "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" can be written by hand, but the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" can make your reducers"},{"type":"text","text":" "},{"type":"text","text":"more concise and more powerful."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Conforming-to-the-Reducer-protocol","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Using-the-Reducer-macro","isActive":true}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"identifier":"#CasePathable-and-dynamicMemberLookup-enums","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Automatic-fulfillment-of-reducer-requirements","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Destination-and-path-reducers","type":"reference","isActive":true}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Navigating-to-non-reducer-features","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"#Synthesizing-protocol-conformances-on-State-and-Action","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Nested-enum-reducers","isActive":true}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#Gotchas","type":"reference"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Autocomplete","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Preview-and-enum-reducers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#CI-build-failures","isActive":true,"type":"reference"}]}]}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"},{"text":"Conforming to the Reducer protocol","level":2,"anchor":"Conforming-to-the-Reducer-protocol","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The bare minimum of conforming to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol is to provide a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","isActive":true},{"type":"text","text":" type"},{"type":"text","text":" "},{"text":"that represents the state your feature needs to do its job, a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","isActive":true},{"text":" type that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represents the actions users can perform in your feature (as well as actions that effects can"},{"type":"text","text":" "},{"type":"text","text":"feed back into the system), and a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","type":"reference","isActive":true},{"text":" property that compose your feature","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"together with any other features that are needed (such as for navigation)."}]},{"inlineContent":[{"type":"text","text":"As a very simple example, a “counter” feature could model its state as a struct holding an integer:"}],"type":"paragraph"},{"code":["struct CounterFeature: Reducer {","  @ObservableState","  struct State {","    var count = 0","  }","}"],"syntax":"swift","type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" to "},{"type":"codeVoice","code":"State"},{"text":" here so that the view can automatically","type":"text"},{"text":" ","type":"text"},{"text":"observe state changes. In future versions of the library this macro will be automatically applied","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"text":" macro.","type":"text"}]}],"name":"Note","type":"aside"},{"inlineContent":[{"text":"The actions would be just two cases for tapping an increment or decrement button:","type":"text"}],"type":"paragraph"},{"code":["struct CounterFeature: Reducer {","  \/\/ ...","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The logic of your feature is implemented by mutating the feature’s current state when an action"},{"type":"text","text":" "},{"type":"text","text":"comes into the system. This is most easily done by constructing a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","isActive":true},{"text":" inside the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"text":" of your reducer:","type":"text"}],"type":"paragraph"},{"code":["struct CounterFeature: Reducer {","  \/\/ ...","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","      case .incrementButtonTapped:","        state.count += 1  ","        return .none","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","type":"reference"},{"text":" reducer’s first responsibility is to mutate the feature’s current state given an","type":"text"},{"type":"text","text":" "},{"text":"action. Its second responsibility is to return effects that will be executed asynchronously and feed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"their data back into the system. Currently "},{"type":"codeVoice","code":"Feature"},{"text":" does not need to run any effects, and so","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","isActive":true,"type":"reference"},{"text":" is returned.","type":"text"}]},{"inlineContent":[{"type":"text","text":"If the feature does need to do effectful work, then more would need to be done. For example, suppose"},{"type":"text","text":" "},{"text":"the feature has the ability to start and stop a timer, and with each tick of the timer the ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" ","type":"text"},{"type":"text","text":"will be incremented. That could be done like so:"}],"type":"paragraph"},{"syntax":"swift","code":["struct CounterFeature: Reducer {","  @ObservableState","  struct State {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","    case startTimerButtonTapped","    case stopTimerButtonTapped","    case timerTick","  }","  enum CancelID { case timer }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return .none","","      case .startTimerButtonTapped:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","        .cancellable(CancelID.timer)","","      case .stopTimerButtonTapped:","        return .cancel(CancelID.timer)","","      case .timerTick:","        state.count += 1","        return .none","      }","    }","  }","}"],"type":"codeListing"},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"This sample emulates a timer by performing an infinite loop with a ","type":"text"},{"type":"codeVoice","code":"Task.sleep"},{"text":" inside. This","type":"text"},{"text":" ","type":"text"},{"text":"is simple to do, but is also inaccurate since small imprecisions can accumulate. It would be","type":"text"},{"text":" ","type":"text"},{"text":"better to inject a clock into the feature so that you could use its ","type":"text"},{"type":"codeVoice","code":"timer"},{"text":" method. Read the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"type":"text","text":" and "},{"text":"doc:Testing","type":"text"},{"text":" articles for more information.","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"That is the basics of implementing a feature as a conformance to "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Using-the-Reducer-macro","type":"heading","level":2,"text":"Using the @Reducer macro"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you technically can conform to the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"text":" protocol directly, as we did above, the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro can automate many aspects of implementing features for you. At a bare minimum,"},{"type":"text","text":" "},{"text":"all you have to do is annotate your reducer with ","type":"text"},{"type":"codeVoice","code":"@Reducer"},{"text":" and you can even drop the ","type":"text"},{"type":"codeVoice","code":"Reducer"},{"text":" ","type":"text"},{"type":"text","text":"conformance:"}]},{"code":["+@Reducer","-struct CounterFeature: Reducer {","+struct CounterFeature {","   @ObservableState","   struct State {","     var count = 0","   }","   enum Action {","     case decrementButtonTapped","     case incrementButtonTapped","   }","   var body: some ReducerOf<Self> {","     Reduce { state, action in","       switch action {","       case .decrementButtonTapped:","         state.count -= 1","         return .none","       case .incrementButtonTapped:","         state.count += 1  ","         return .none","       }","     }","   }"," }"],"type":"codeListing","syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a number of things the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro does for you:","type":"text"}]},{"level":3,"text":"@CasePathable and @dynamicMemberLookup enums","type":"heading","anchor":"CasePathable-and-dynamicMemberLookup-enums"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro automatically applies the "},{"isActive":true,"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swift-case-paths\/main\/documentation\/casepaths\/casepathable()"},{"text":" macro to your","type":"text"},{"text":" ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum:"}]},{"syntax":"diff","type":"codeListing","code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"type":"text","text":" are a tool that bring the power and ergonomics of key paths to enum"},{"text":" ","type":"text"},{"type":"text","text":"cases, and they are a vital tool for composing reducers together."}]},{"type":"paragraph","inlineContent":[{"text":"In particular, having this macro applied to your ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum will allow you to use key path","type":"text"},{"type":"text","text":" "},{"type":"text","text":"syntax for specifying enum cases in various APIs in the library, such as"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"reference","isActive":true},{"type":"text","text":", and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","isActive":true},{"text":" of your feature is an enum, which is useful for modeling a feature","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that can be one of multiple mutually exclusive values, the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" will apply the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro, as well as ","type":"text"},{"code":"@dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will allow you to use key path syntax for specifying case paths to the "},{"type":"codeVoice","code":"State"},{"text":"’s cases, as well","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as allow you to use dot-chaining syntax for optionally extracting a case from the state. This can be"},{"type":"text","text":" "},{"type":"text","text":"useful when using the operators that come with the library that allow for driving navigation from an"},{"text":" ","type":"text"},{"text":"enum of options:","type":"text"}]},{"syntax":"swift","code":[".sheet(","  item: $store.scope(state: \\.destination?.editForm, action: \\.destination.editForm)",") { store in","  FormView(store: store)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax "},{"code":"state: \\.destination?.editForm","type":"codeVoice"},{"type":"text","text":" is only possible due to both "},{"code":"@dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" being applied to the ","type":"text"},{"type":"codeVoice","code":"State"},{"text":" enum.","type":"text"}]},{"type":"heading","text":"Automatic fulfillment of reducer requirements","level":3,"anchor":"Automatic-fulfillment-of-reducer-requirements"},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro will automatically fill in any ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol requirements that you"},{"type":"text","text":" "},{"text":"leave off. For example, something as simple as this compiles:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"@Reducer","type":"codeVoice"},{"text":" macro will automatically insert an empty ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"text":" struct, an empty","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","type":"reference","isActive":true},{"text":" enum, and an empty ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true,"type":"reference"},{"text":". This effectively means that","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" is a logicless, behaviorless, inert reducer."}]},{"inlineContent":[{"type":"text","text":"Having these requirements automatically fulfilled for you can be handy for slowly filling them in"},{"type":"text","text":" "},{"text":"with their real implementations. For example, this ","type":"text"},{"code":"Feature","type":"codeVoice"},{"type":"text","text":" reducer could be integrated in a parent"},{"text":" ","type":"text"},{"text":"domain using the library’s navigation tools, all without having implemented any of the domain yet.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Then, once we are ready we can start implementing the real logic and behavior of the feature."}],"type":"paragraph"},{"anchor":"Destination-and-path-reducers","level":3,"text":"Destination and path reducers","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"There is a common pattern in the Composable Architecture of representing destinations a feature can","type":"text"},{"type":"text","text":" "},{"text":"navigate to as a reducer that operates on enum state, with a case for each feature that can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigated to. This is explained in great detail in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation"},{"type":"text","text":" and"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation"},{"text":" articles.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This form of domain modeling can be very powerful, but also incur a bit of boilerplate. For example,"},{"text":" ","type":"text"},{"text":"if a feature can navigate to 3 other features, then one might have a ","type":"text"},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" reducer like the"},{"text":" ","type":"text"},{"text":"following:","type":"text"}]},{"code":["@Reducer","struct Destination {","  @ObservableState","  enum State {","    case add(FormFeature.State)","    case detail(DetailFeature.State)","    case edit(EditFeature.State)","  }","  enum Action {","    case add(FormFeature.Action)","    case detail(DetailFeature.Action)","    case edit(EditFeature.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.add, action: \\.add) {","      FormFeature()","    }","    Scope(state: \\.detail, action: \\.detail) {","      DetailFeature()","    }","    Scope(state: \\.edit, action: \\.edit) {","      EditFeature()","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"It’s not the worst code in the world, but it is 24 lines with a lot of repetition, and if we need to","type":"text"},{"type":"text","text":" "},{"text":"add a new destination we must add a case to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference","isActive":true},{"text":" enum, a case to the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","type":"reference","isActive":true},{"text":" enum, and a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" to the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro is now capable of generating all of this code for you from the following"},{"text":" ","type":"text"},{"type":"text","text":"simple declaration"}],"type":"paragraph"},{"type":"codeListing","code":["@Reducer","enum Destination {","  case add(FormFeature)","  case detail(DetailFeature)","  case edit(EditFeature)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"24 lines of code has become 6. The ","type":"text"},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro can now be applied to an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enum"}]},{"text":" where each case","type":"text"},{"text":" ","type":"text"},{"text":"holds onto the reducer that governs the logic and behavior for that case. Further, when using the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:)","isActive":true},{"text":" operator with this style of ","type":"text"},{"type":"codeVoice","code":"Destination"},{"text":" enum reducer you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"completely leave off the trailing closure as it can be automatically inferred:"}]},{"type":"codeListing","code":[" Reduce { state, action in","   \/\/ Core feature logic"," }"," .ifLet(\\.$destination, action: \\.destination)","-{","-  Destination()","-}"],"syntax":"diff"},{"type":"paragraph","inlineContent":[{"text":"This pattern also works for ","type":"text"},{"code":"Path","type":"codeVoice"},{"type":"text","text":" reducers, which is common when dealing with"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation"},{"type":"text","text":", and in that case you can leave off the trailing closure of the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","isActive":true},{"type":"text","text":" operator:"}]},{"type":"codeListing","syntax":"diff","code":["Reduce { state, action in","  \/\/ Core feature logic","}",".forEach(\\.path, action: \\.path)","-{","-  Path()","-}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, for "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducers in particular, the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro also helps you reduce"},{"text":" ","type":"text"},{"text":"boilerplate when using the initializer","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","type":"reference"},{"type":"text","text":" that comes with the library."},{"type":"text","text":" "},{"type":"text","text":"In the last trailing closure you can use the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","type":"reference","isActive":true},{"text":" computed property to switch on the","type":"text"},{"type":"text","text":" "},{"code":"Path.State","type":"codeVoice"},{"text":" enum and extract out a store for each case:","type":"text"}]},{"code":["NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","  \/\/ Root view","} destination: { store in","  switch store.case {","  case let .add(store):","    AddView(store: store)","  case let .detail(store):","    DetailView(store: store)","  case let .edit(store):","    EditView(store: store)","  }","}"],"type":"codeListing","syntax":"swift"},{"text":"Navigating to non-reducer features","type":"heading","anchor":"Navigating-to-non-reducer-features","level":4},{"inlineContent":[{"text":"There are many times that you want to present or navigate to a feature that is not modeled with a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture reducer. This can happen with legacy features that are not built with the"},{"text":" ","type":"text"},{"type":"text","text":"Composable Architecture, or with features that are very simple and do not need a fully built"},{"type":"text","text":" "},{"text":"reducer.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In those cases you can use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()","isActive":true},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()"},{"text":" macros to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"annotate cases that are not powered by reducers. See the documentation for those macros for more"},{"type":"text","text":" "},{"text":"details.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"As an example, suppose that you have a feature that can navigate to multiple features, all of","type":"text"},{"text":" ","type":"text"},{"text":"which are Composable Architecture features except for one:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","enum Destination {","  case add(AddItemFeature)","  case edit(EditItemFeature)","  @ReducerCaseIgnored","  case item(Item)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this situation the "},{"code":".item","type":"codeVoice"},{"text":" case holds onto a plain item and not a full reducer, and for that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"reason we have to ignore it from some of "},{"code":"@Reducer","type":"codeVoice"},{"text":"’s macro expansion.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Then, to present a view from this case one can do:","type":"text"}]},{"syntax":"swift","code":[".sheet(item: $store.scope(state: \\.destination?.item, action: \\.destination.item)) { store in","  ItemView(item: store.withState { $0 })","}"],"type":"codeListing"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","isActive":true},{"type":"text","text":" is necessary because the value held inside the "},{"code":".item","type":"codeVoice"},{"type":"text","text":" case"},{"type":"text","text":" "},{"text":"does not have the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro applied, nor should it. And so using "},{"type":"codeVoice","code":"withState"},{"text":" ","type":"text"},{"text":"is a way to get access to the state in the store without any observation taking place.","type":"text"}]}],"style":"note"},{"level":4,"anchor":"Synthesizing-protocol-conformances-on-State-and-Action","text":"Synthesizing protocol conformances on State and Action","type":"heading"},{"inlineContent":[{"text":"Since the ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"text":" types are generated automatically for you when using ","type":"text"},{"type":"codeVoice","code":"@Reducer"},{"text":" on an","type":"text"},{"type":"text","text":" "},{"text":"enum, you must extend these types yourself to synthesize conformances of ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"etc."}]},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","enum Destination {","  \/\/ ...","}","extension Destination.State: Equatable {}"],"type":"codeListing"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift <6 the above extension causes a compiler error due to a bug in Swift."}]},{"type":"paragraph","inlineContent":[{"text":"To work around this compiler bug, the library provides a version of the ","type":"text"},{"type":"codeVoice","code":"@Reducer"},{"text":" macro that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"takes two "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance","type":"reference","isActive":true},{"text":" arguments, which allow you to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"describe the protocols you want to attach to the "},{"type":"codeVoice","code":"State"},{"text":" or ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" types:","type":"text"}]},{"code":["@Reducer(state: .equatable, .sendable, action: .sendable)","enum Destination {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"}],"style":"note","name":"Note"},{"anchor":"Nested-enum-reducers","type":"heading","level":4,"text":"Nested enum reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There may be times when an enum reducer may want to nest another enum reducer. To do so, the parent"},{"type":"text","text":" "},{"type":"text","text":"enum reducer must specify the child’s "},{"type":"codeVoice","code":"Body"},{"type":"text","text":" associated value and "},{"type":"codeVoice","code":"body"},{"type":"text","text":" static property explicitly:"}]},{"syntax":"swift","code":["@Reducer","enum Modal { \/* ... *\/ }","","@Reducer","enum Destination {","  case modal(Modal.Body = Modal.body)","}"],"type":"codeListing"},{"text":"Gotchas","type":"heading","level":3,"anchor":"Gotchas"},{"anchor":"Autocomplete","type":"heading","text":"Autocomplete","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" can break autocompletion in the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" of the reducer. This is a known"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/apple\/swift\/issues\/69477"},{"type":"text","text":", and it can generally be worked around by"},{"type":"text","text":" "},{"type":"text","text":"providing additional type hints to the compiler:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Adding an explicit "},{"type":"codeVoice","code":"Reducer"},{"text":" conformance in addition to the macro application can restore","type":"text"},{"type":"text","text":" "},{"type":"text","text":"autocomplete throughout the "},{"code":"body","type":"codeVoice"},{"text":" of the reducer:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":[" @Reducer","-struct Feature {","+struct Feature: Reducer {"]}]},{"content":[{"inlineContent":[{"type":"text","text":"Adding explicit generics to instances of "},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" can restore autocomplete"},{"type":"text","text":" "},{"text":"inside the ","type":"text"},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":":"}],"type":"paragraph"},{"code":[" var body: some Reducer<State, Action> {","-  Reduce { state, action in","+  Reduce<State, Action> { state, action in"],"type":"codeListing","syntax":"diff"}]}]},{"anchor":"Preview-and-enum-reducers","text":"#Preview and enum reducers","level":4,"type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"code":"#Preview","type":"codeVoice"},{"type":"text","text":" macro is not capable of seeing the expansion of any macros since it is a macro"},{"text":" ","type":"text"},{"type":"text","text":"itself. This means that when using destination and path reducers (see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Destination-and-path-reducers"},{"type":"text","text":" above) you cannot construct the cases of the state"},{"text":" ","type":"text"},{"text":"enum inside ","type":"text"},{"code":"#Preview","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(","        destination: .edit(EditFeature.State())  \/\/ 🛑","      )","    ) {","      Feature()","    }","  )","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":".edit"},{"text":" case is not usable from within ","type":"text"},{"code":"#Preview","type":"codeVoice"},{"text":" since it is generated by the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"macro."}],"type":"paragraph"},{"inlineContent":[{"text":"The workaround is to move the view to a helper that be compiled outside of a macro, and then use it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inside the macro:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["#Preview {","  preview","}","private var preview: some View {","  FeatureView(","    store: Store(","      initialState: Feature.State(","        destination: .edit(EditFeature.State())","      )","    ) {","      Feature()","    }","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a computed property, free function, or even a dedicated view if you want. You can also"},{"type":"text","text":" "},{"type":"text","text":"use the old, non-macro style of previews by using a "},{"code":"PreviewProvider","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature_Previews: PreviewProvider {","  static var previews: some  View {","    FeatureView(","      store: Store(","        initialState: Feature.State(","          destination: .edit(EditFeature.State())","        )","      ) {","        Feature()","      }","    )","  }","}"]},{"text":"Error: External macro implementation … could not be found","anchor":"Error-External-macro-implementation--could-not-be-found","type":"heading","level":4},{"inlineContent":[{"type":"text","text":"When integrating with the Composable Architecture, one may encounter the following error:"}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"External macro implementation type ‘ComposableArchitectureMacros.ReducerMacro’ could not be","type":"text"},{"text":" ","type":"text"},{"text":"found for macro ‘Reducer()’","type":"text"}]}],"name":"Error"},{"inlineContent":[{"text":"This error can show up when the macro has not yet been enabled, which is a separate error that","type":"text"},{"type":"text","text":" "},{"text":"should be visible from Xcode’s Issue navigator.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Sometimes, however, this error will still emit due to an Xcode bug in which a custom build"},{"type":"text","text":" "},{"type":"text","text":"configuration name is being used in the project. In general, using a build configuration other than"},{"type":"text","text":" "},{"type":"text","text":"“Debug” or “Release” can trigger upstream build issues with Swift packages, and we recommend only"},{"type":"text","text":" "},{"text":"using the default “Debug” and “Release” build configuration names to avoid the above issue and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"others."}],"type":"paragraph"},{"type":"heading","text":"CI build failures","anchor":"CI-build-failures","level":4},{"inlineContent":[{"type":"text","text":"When testing your code on an external CI server you may run into errors such as the following:"}],"type":"paragraph"},{"name":"Error","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CasePathsMacros Target ‘CasePathsMacros’ must be enabled before it can be used."}]},{"inlineContent":[{"type":"text","text":"ComposableArchitectureMacros Target ‘ComposableArchitectureMacros’ must be enabled before it can"},{"text":" ","type":"text"},{"text":"be used.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can fix this in one of two ways. You can write a default to the CI machine that allows Xcode to"},{"type":"text","text":" "},{"text":"skip macro validation:","type":"text"}]},{"type":"codeListing","syntax":"shell","code":["defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES"]},{"type":"paragraph","inlineContent":[{"text":"Or if you are invoking ","type":"text"},{"code":"xcodebuild","type":"codeVoice"},{"text":" directly in your CI scripts, you can pass the","type":"text"},{"type":"text","text":" "},{"code":"-skipMacroValidation","type":"codeVoice"},{"type":"text","text":" flag to "},{"type":"codeVoice","code":"xcodebuild"},{"type":"text","text":" when building your project:"}]},{"type":"codeListing","code":["xcodebuild -skipMacroValidation …"],"syntax":"shell"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"https://github.com/apple/swift/issues/69477":{"url":"https:\/\/github.com\/apple\/swift\/issues\/69477","type":"link","title":"issue","titleInlineContent":[{"type":"text","text":"issue"}],"identifier":"https:\/\/github.com\/apple\/swift\/issues\/69477"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_SynthesizedConformance":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"_SynthesizedConformance"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"_SynthesizedConformance"}],"url":"\/documentation\/composablearchitecture\/_synthesizedconformance","role":"symbol","abstract":[{"type":"text","text":"A description of a protocol conformance to synthesize on the State and Action types generated by"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro.","type":"text"}],"type":"topic","title":"_SynthesizedConformance","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance","deprecated":true},"#CasePathable-and-dynamicMemberLookup-enums":{"identifier":"#CasePathable-and-dynamicMemberLookup-enums","type":"link","titleInlineContent":[{"type":"text","text":"@CasePathable and @dynamicMemberLookup enums"}],"url":"#CasePathable-and-dynamicMemberLookup-enums","title":"@CasePathable and @dynamicMemberLookup enums"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","kind":"symbol","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"title":"Scope","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scope"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","role":"symbol","url":"\/documentation\/composablearchitecture\/scope","abstract":[{"text":"Embeds a child reducer in a parent domain.","type":"text"}]},"#Synthesizing-protocol-conformances-on-State-and-Action":{"identifier":"#Synthesizing-protocol-conformances-on-State-and-Action","type":"link","titleInlineContent":[{"type":"text","text":"Synthesizing protocol conformances on State and Action"}],"url":"#Synthesizing-protocol-conformances-on-State-and-Action","title":"Synthesizing protocol conformances on State and Action"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","type":"topic","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"title":"dependency(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerOf":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerOf","kind":"symbol","abstract":[{"text":"A convenience for constraining a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"text":" conformance.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ReducerOf","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducerof","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerOf"}],"title":"ReducerOf"},"#Nested-enum-reducers":{"identifier":"#Nested-enum-reducers","type":"link","titleInlineContent":[{"type":"text","text":"Nested enum reducers"}],"url":"#Nested-enum-reducers","title":"Nested enum reducers"},"#Using-the-Reducer-macro":{"url":"#Using-the-Reducer-macro","type":"link","title":"Using the @Reducer macro","titleInlineContent":[{"type":"text","text":"Using the @Reducer macro"}],"identifier":"#Using-the-Reducer-macro"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:)":{"title":"forEach(_:action:)","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:)","abstract":[{"text":"A special overload of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","isActive":true,"type":"reference"},{"type":"text","text":" for enum"},{"text":" ","type":"text"},{"type":"text","text":"reducers."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"text":"StackAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>) -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":">\n","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EmptyReducer":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","title":"EmptyReducer","navigatorTitle":[{"kind":"identifier","text":"EmptyReducer"}],"abstract":[{"type":"text","text":"A reducer that does nothing."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmptyReducer"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/emptyreducer","role":"symbol"},"#Preview-and-enum-reducers":{"url":"#Preview-and-enum-reducers","type":"link","title":"#Preview and enum reducers","titleInlineContent":[{"type":"text","text":"#Preview and enum reducers"}],"identifier":"#Preview-and-enum-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Optional":{"type":"topic","url":"\/documentation\/composablearchitecture\/swift\/optional","fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Sq","kind":"identifier","text":"Optional"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional","navigatorTitle":[{"kind":"identifier","text":"Optional"}],"conformance":{"constraints":[{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"Optional","abstract":[],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/reduce","title":"Reduce","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":" function."}],"role":"symbol","navigatorTitle":[{"text":"Reduce","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reduce","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"abstract":[{"type":"text","text":"Drives a navigation stack with a store."}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Root","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"State","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"path"},{"text":": ","kind":"text"},{"text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":">, ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">>>, "},{"kind":"externalParam","text":"root"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":", ","kind":"text"},{"text":"destination","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"title":"init(path:root:destination:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"role":"symbol","title":"Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseEphemeral()":{"url":"\/documentation\/composablearchitecture\/reducercaseephemeral()","abstract":[{"type":"text","text":"Marks the case of an enum reducer as holding onto “ephemeral” state."}],"title":"ReducerCaseEphemeral()","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReducerCaseEphemeral","kind":"identifier"},{"kind":"text","text":"()"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"text":"any reducer.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement","title":"Dependencies"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"required":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","title":"Action","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference","isActive":true},{"text":" of the reducer to change","type":"text"},{"type":"text","text":" "},{"text":"and\/or kick off a side ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":" that can communicate with the outside world.","type":"text"}],"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Action"}],"url":"\/documentation\/composablearchitecture\/reducer\/action"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"kind":"symbol","navigatorTitle":[{"text":"ReducerBuilder","kind":"identifier"}],"title":"ReducerBuilder","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"ReducerBuilder","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","url":"\/documentation\/composablearchitecture\/reducerbuilder","abstract":[{"type":"text","text":"A result builder for combining reducers into a single reducer by running each, one after the"},{"type":"text","text":" "},{"text":"other, and merging their effects.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseReducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer","abstract":[{"text":"A reducer represented by multiple enum cases.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/casereducer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CaseReducer"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"CaseReducer","kind":"identifier"}],"title":"CaseReducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerDeprecations":{"type":"topic","abstract":[{"text":"Review unsupported reducer APIs and their replacements.","type":"text"}],"title":"Deprecations","url":"\/documentation\/composablearchitecture\/reducerdeprecations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerDeprecations","role":"collectionGroup","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/case":{"url":"\/documentation\/composablearchitecture\/store\/case","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","abstract":[{"type":"text","text":"A destructurable view of a store on a collection of cases."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":": ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16CaseReducerStateP0eD0Qa","text":"StateReducer"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11CaseReducerP0C5ScopeQa","text":"CaseScope"}],"role":"symbol","type":"topic","title":"case","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CaseReducerState"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"State.StateReducer.Action"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"text":">\n","kind":"text"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"title":"ifLet(_:action:destination:fileID:filePath:line:column:)","kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:filepath:line:column:)-4ub6q","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:_:)":{"kind":"symbol","title":"dependency(_:_:)","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Sets the dependency value of the specified key path to the given value.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:_:)"},"#Gotchas":{"url":"#Gotchas","title":"Gotchas","type":"link","titleInlineContent":[{"type":"text","text":"Gotchas"}],"identifier":"#Gotchas"},"https://swiftpackageindex.com/pointfreeco/swift-case-paths/main/documentation/casepaths/casepathable()":{"url":"https:\/\/swiftpackageindex.com\/pointfreeco\/swift-case-paths\/main\/documentation\/casepaths\/casepathable()","title":"@CasePathable","type":"link","titleInlineContent":[{"type":"codeVoice","code":"@CasePathable"}],"identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swift-case-paths\/main\/documentation\/casepaths\/casepathable()"},"#CI-build-failures":{"url":"#CI-build-failures","type":"link","title":"CI build failures","titleInlineContent":[{"text":"CI build failures","type":"text"}],"identifier":"#CI-build-failures"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:filePath:line:column:)-6zye8":{"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:filepath:line:column:)-6zye8","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ElementState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ElementAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ID","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Element"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"IdentifiedArray","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ElementState"},{"kind":"text","text":">>, "},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","kind":"typeIdentifier","text":"IdentifiedAction"},{"kind":"text","text":"<"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ElementAction","kind":"typeIdentifier"},{"kind":"text","text":">>, "},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","text":"Action"},{"text":">\n","kind":"text"}],"title":"forEach(_:action:element:fileID:filePath:line:column:)","type":"topic","abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Destination-and-path-reducers":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Destination-and-path-reducers","title":"Destination and path reducers","abstract":[],"kind":"section","url":"\/documentation\/composablearchitecture\/reducer#Destination-and-path-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"url":"\/documentation\/composablearchitecture\/observablestate()","title":"ObservableState()","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation":{"url":"\/documentation\/composablearchitecture\/stackbasednavigation","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","kind":"article","role":"article","type":"topic","title":"Stack-based navigation","abstract":[{"type":"text","text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to"},{"text":" ","type":"text"},{"text":"model your domains, how to integrate features, how to test your features, and more.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb":{"kind":"symbol","title":"forEach(_:action:destination:fileID:filePath:line:column:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"StackState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"text":"destination","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","kind":"typeIdentifier","text":"Reducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":">\n"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:filepath:line:column:)-9svqb","abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in","type":"text"},{"type":"text","text":" "},{"text":"parent state.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/_printChanges(_:)":{"abstract":[{"type":"text","text":"Enhances a reducer with debug logging of received actions and state mutations for the given"},{"type":"text","text":" "},{"text":"printer.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/_printChanges(_:)","title":"_printChanges(_:)","url":"\/documentation\/composablearchitecture\/reducer\/_printchanges(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"_printChanges","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_ReducerPrinter","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":">?) -> ","kind":"text"},{"text":"_PrintChangesReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"kind":"symbol"},"#Conforming-to-the-Reducer-protocol":{"url":"#Conforming-to-the-Reducer-protocol","title":"Conforming to the Reducer protocol","type":"link","titleInlineContent":[{"type":"text","text":"Conforming to the Reducer protocol"}],"identifier":"#Conforming-to-the-Reducer-protocol"},"#Automatic-fulfillment-of-reducer-requirements":{"url":"#Automatic-fulfillment-of-reducer-requirements","type":"link","title":"Automatic fulfillment of reducer requirements","titleInlineContent":[{"text":"Automatic fulfillment of reducer requirements","type":"text"}],"identifier":"#Automatic-fulfillment-of-reducer-requirements"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/transformDependency(_:transform:)":{"abstract":[{"text":"Transform a reducer’s dependency value at the specified key path with the given function.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/transformDependency(_:transform:)","title":"transformDependency(_:transform:)","url":"\/documentation\/composablearchitecture\/reducer\/transformdependency(_:transform:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"transformDependency"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier","text":"DependencyValues"},{"kind":"text","text":", "},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"transform"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:fileID:filePath:line:column:)-9blhe":{"url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:fileid:filepath:line:column:)-9blhe","abstract":[],"deprecated":true,"type":"topic","title":"ifLet(_:action:fileID:filePath:line:column:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:fileID:filePath:line:column:)-9blhe","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"PresentationState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths03AnyA4PathV","text":"AnyCasePath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","kind":"typeIdentifier","text":"PresentationAction"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":">\n","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"url":"\/documentation\/composablearchitecture\/navigation","title":"Navigation","type":"topic","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/onChange(of:_:)":{"abstract":[{"type":"text","text":"Adds a reducer to run when this reducer changes the given value in state."}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","title":"onChange(of:_:)","url":"\/documentation\/composablearchitecture\/reducer\/onchange(of:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"onChange","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"kind":"text","text":", "},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", ("},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":") -> ","kind":"text"},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":", ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol"},"#Navigating-to-non-reducer-features":{"url":"#Navigating-to-non-reducer-features","title":"Navigating to non-reducer features","type":"link","titleInlineContent":[{"type":"text","text":"Navigating to non-reducer features"}],"identifier":"#Navigating-to-non-reducer-features"},"http://github.com/pointfreeco/swift-case-paths":{"url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"link","title":"Case paths","titleInlineContent":[{"text":"Case paths","type":"text"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/signpost(_:log:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/signpost(_:log:)","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"signpost","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"log","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"OSLog","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)OS_os_log"},{"kind":"text","text":") -> "},{"text":"_SignpostReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Instruments a reducer with"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/os\/logging\/recording_performance_data"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/signpost(_:log:)","title":"signpost(_:log:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","title":"none","role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"none"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"text":" ","type":"text"},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"url":"\/documentation\/composablearchitecture\/effect\/none"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:)":{"title":"ifLet(_:action:)","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"text":"PresentationState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">>) -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"abstract":[{"text":"A special overload of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"reference"},{"type":"text","text":" for enum"},{"type":"text","text":" "},{"type":"text","text":"reducers."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:)","role":"symbol"},"https://developer.apple.com/documentation/os/logging/recording_performance_data":{"identifier":"https:\/\/developer.apple.com\/documentation\/os\/logging\/recording_performance_data","type":"link","titleInlineContent":[{"type":"text","text":"signposts"}],"url":"https:\/\/developer.apple.com\/documentation\/os\/logging\/recording_performance_data","title":"signposts"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","title":"Reducer()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for a type.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/withState(_:)":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","url":"\/documentation\/composablearchitecture\/store\/withstate(_:)","type":"topic","title":"withState(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withState"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Calls the given closure with a snapshot of the current state of the store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation":{"kind":"article","url":"\/documentation\/composablearchitecture\/treebasednavigation","type":"topic","title":"Tree-based navigation","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","abstract":[{"text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"how to model your domains, how to integrate features, how to test your features, and more."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"type":"topic","role":"symbol","title":"BindingReducer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingReducer","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","kind":"symbol","navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}],"abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers":{"title":"CombineReducers","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CombineReducers","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","url":"\/documentation\/composablearchitecture\/combinereducers","navigatorTitle":[{"kind":"identifier","text":"CombineReducers"}],"abstract":[{"type":"text","text":"Combines multiple reducers into a single reducer."}],"role":"symbol","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:then:fileID:filePath:line:column:)-2r2pn":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:filePath:line:column:)-2r2pn","title":"ifLet(_:action:then:fileID:filePath:line:column:)","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"WrappedState"},{"text":", ","kind":"text"},{"text":"WrappedAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"WrappedState"},{"kind":"text","text":"?>, "},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"WrappedAction"},{"text":">, ","kind":"text"},{"text":"then","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">\n","kind":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:then:fileid:filepath:line:column:)-2r2pn","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"type":"topic","abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"text":" ","type":"text"},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"kind":"article","url":"\/documentation\/composablearchitecture\/sharingstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","title":"Sharing state","role":"article"},"#Autocomplete":{"identifier":"#Autocomplete","type":"link","titleInlineContent":[{"text":"Autocomplete","type":"text"}],"url":"#Autocomplete","title":"Autocomplete"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"kind":"symbol","role":"symbol","title":"State","type":"topic","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"State"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","url":"\/documentation\/composablearchitecture\/reducer\/state","abstract":[{"type":"text","text":"A type that holds the current state of the reducer."}],"required":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d":{"title":"ifCaseLet(_:action:then:fileID:filePath:line:column:)","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d","url":"\/documentation\/composablearchitecture\/reducer\/ifcaselet(_:action:then:fileid:filepath:line:column:)-7sg8d","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on a case of parent enum state."}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifCaseLet","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"CaseState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"CaseAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Case"},{"kind":"text","text":">("},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":", ","kind":"text"},{"text":"CaseState","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"text":"CaseAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"then"},{"text":": () -> ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_IfCaseLetReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Case","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","kind":"symbol","required":true,"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","text":"Body","kind":"typeIdentifier"}],"defaultImplementations":2,"abstract":[{"text":"The content and behavior of a reducer that is composed from other reducers.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","title":"body"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseIgnored()":{"url":"\/documentation\/composablearchitecture\/reducercaseignored()","title":"ReducerCaseIgnored()","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReducerCaseIgnored","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()","abstract":[{"type":"text","text":"Marks the case of an enum reducer as “ignored”, and as such will not compose the case’s domain"},{"text":" ","type":"text"},{"type":"text","text":"into the rest of the reducer besides state."}],"kind":"symbol"},"#Destination-and-path-reducers":{"identifier":"#Destination-and-path-reducers","type":"link","titleInlineContent":[{"type":"text","text":"Destination and path reducers"}],"url":"#Destination-and-path-reducers","title":"Destination and path reducers"}}}