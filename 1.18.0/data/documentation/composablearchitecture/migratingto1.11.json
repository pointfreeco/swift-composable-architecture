{"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"abstract":[{"type":"text","text":"Update your code to use the new "},{"code":"withLock","type":"codeVoice"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"type":"text","text":" "},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"metadata":{"roleHeading":"Article","title":"Migrating to 1.11","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.11"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"text":" ","type":"text"},{"type":"text","text":"simplify the library, and make it more powerful. This version of the library introduced 2 new"},{"type":"text","text":" "},{"text":"APIs and deprecated 1 API.","type":"text"}],"type":"paragraph"},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.10. See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","isActive":true},{"type":"text","text":" for more information."}]}],"type":"aside","style":"important"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"#Mutating-shared-state-concurrently","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Supplying-mock-read-only-state-to-previews"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Migrating-to-1112","isActive":true}],"type":"paragraph"}]}]},{"anchor":"Mutating-shared-state-concurrently","type":"heading","level":2,"text":"Mutating shared state concurrently"},{"inlineContent":[{"text":"Version 1.10 of the Composable Architecture introduced a powerful tool for","type":"text"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"sharing state"}],"type":"reference","isActive":true,"overridingTitle":"sharing state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"},{"text":" amongst your features. And you can mutate a piece of shared","type":"text"},{"text":" ","type":"text"},{"text":"state directly, as if it were just a normal property on a value type:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do."},{"text":" ","type":"text"},{"text":"However, because shared values are secretly references (that is how data is shared), it is possible","type":"text"},{"text":" ","type":"text"},{"text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to do this directly:"}],"type":"paragraph"},{"syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Now, ","type":"text"},{"code":"Shared","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":", and is technically thread-safe in that it will not crash when writing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to it from two different threads. However, allowing direct mutation does make the value susceptible"},{"text":" ","type":"text"},{"type":"text","text":"to race conditions. If you were to perform "},{"code":"count += 1","type":"codeVoice"},{"type":"text","text":" from 1,000 threads, it is possible for"},{"type":"text","text":" "},{"text":"the final value to not be 1,000.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We wanted the "},{"code":"@Shared","type":"codeVoice"},{"text":" type to be as ergonomic as possible, and that is why we make it directly","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mutable, but we should not be allowing these mutations to happen from asynchronous contexts. And so"},{"type":"text","text":" "},{"type":"text","text":"now the "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" setter has been marked unavailable from asynchronous contexts, with"},{"text":" ","type":"text"},{"type":"text","text":"a helpful message of how to fix:"}]},{"code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"To fix this deprecation you can use the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" method on the projected value of "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it","type":"text"},{"text":" ","type":"text"},{"text":"back in the reference.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically it is still possible to write code that has race conditions, such as this silly example:"}]},{"syntax":"swift","code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems"},{"type":"text","text":" "},{"type":"text","text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the"},{"type":"text","text":" "},{"type":"text","text":"shared state as possible in a single "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":". That will make sure that the full unit of work is"},{"type":"text","text":" "},{"text":"guarded by a lock.","type":"text"}]},{"text":"Supplying mock read-only state to previews","anchor":"Supplying-mock-read-only-state-to-previews","level":2,"type":"heading"},{"inlineContent":[{"text":"A new ","type":"text"},{"type":"codeVoice","code":"constant"},{"type":"text","text":" helper on "},{"code":"SharedReader","type":"codeVoice"},{"type":"text","text":" has been introduced to simplify supplying mock data to"},{"text":" ","type":"text"},{"text":"Xcode previews. It works like SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"Binding.constant"},{"type":"text","text":", but for shared references:"}],"type":"paragraph"},{"type":"codeListing","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"],"syntax":"swift"},{"text":"Migrating to 1.11.2","anchor":"Migrating-to-1112","type":"heading","level":2},{"inlineContent":[{"text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:","type":"text"}],"type":"paragraph"},{"anchor":"withLock-is-now-MainActor","level":3,"type":"heading","text":"`withLock` is now `@MainActor`"},{"inlineContent":[{"type":"text","text":"In "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","isActive":true,"type":"reference","overridingTitle":"version 1.11","overridingTitleInlineContent":[{"text":"version 1.11","type":"text"}]},{"type":"text","text":" of the library we deprecated mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, such as effects, and instead recommended using the new "},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"text":"Doing so made it possible to lock all mutations to the shared state and prevent race conditions (see","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"migration guide"}],"overridingTitle":"migration guide","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"inlineContent":[{"text":"However, this did leave open the possibility for deadlocks if shared state was read from and written","type":"text"},{"text":" ","type":"text"},{"text":"to on different threads. To fix this we have now restricted ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":", and so","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you will now need to "},{"code":"await","type":"codeVoice"},{"type":"text","text":" its usage:"}],"type":"paragraph"},{"code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"],"type":"codeListing","syntax":"diff"},{"inlineContent":[{"type":"text","text":"The compiler should suggest this fix-it for you."}],"type":"paragraph"},{"anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored","type":"heading","level":3,"text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the "},{"code":"@Shared","type":"codeVoice"},{"text":" property wrapper was first introduced, its dynamic member lookup was overloaded","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to automatically unwrap optionals for ergonomic purposes:"}]},{"type":"codeListing","syntax":"swift","code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This unfortunately made dynamic member lookup a little more difficult to understand:"}]},{"code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and required casting and other tricks to transform shared values into what one might expect."}]},{"type":"paragraph","inlineContent":[{"text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"removed entirely. Instead, you can use "},{"code":"Shared.init(_:)","type":"codeVoice"},{"type":"text","text":" to explicitly unwrap a shared optional"},{"type":"text","text":" "},{"text":"value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Disfavoring it does have the consequence of being source breaking in the case of "},{"code":"if let","type":"codeVoice"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"code":"guard let","type":"codeVoice"},{"type":"text","text":" expressions, where Swift does not select the optional overload automatically. To"},{"text":" ","type":"text"},{"type":"text","text":"migrate, use "},{"type":"codeVoice","code":"Shared.init(_:)"},{"type":"text","text":":"}]},{"type":"codeListing","code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"],"syntax":"diff"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"url":"\/documentation\/composablearchitecture\/migratingto1.4","abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"text":"paths in your features.","type":"text"}],"kind":"article","title":"Migrating to 1.4","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"type":"topic","url":"\/documentation\/composablearchitecture\/foreachstore","kind":"symbol","navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ForEachStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","deprecated":true,"title":"ForEachStore","role":"symbol","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","title":"Migrating to 1.17","url":"\/documentation\/composablearchitecture\/migratingto1.17","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"text":" ","type":"text"},{"text":"library so that they can be used in non-Composable Architecture applications. This a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","url":"\/documentation\/composablearchitecture\/migratingto1.13","role":"article","kind":"article","type":"topic","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"title":"Migrating to 1.13"},"#Supplying-mock-read-only-state-to-previews":{"title":"Supplying mock read-only state to previews","type":"link","url":"#Supplying-mock-read-only-state-to-previews","identifier":"#Supplying-mock-read-only-state-to-previews","titleInlineContent":[{"text":"Supplying mock read-only state to previews","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"codeVoice","code":"withLock"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"type":"text","text":" "},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.11","title":"Migrating to 1.11","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","title":"Migrating to 1.10","url":"\/documentation\/composablearchitecture\/migratingto1.10","type":"topic","role":"article","kind":"article","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":" ","type":"text"},{"text":"property wrapper, and the ","type":"text"},{"type":"codeVoice","code":"appStorage"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":" persistence strategies."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"abstract":[{"text":"The ","type":"text"},{"code":".appStorage","type":"codeVoice"},{"type":"text","text":" strategy used with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" now uses key-value observing instead of"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NotificationCenter"},{"text":" when possible. Learn how this may affect your code.","type":"text"}],"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.16","title":"Migrating to 1.16","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.5","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","role":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"kind":"article","title":"Migrating to 1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","role":"article","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"text":"APIs such as ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":", and more."}],"kind":"article","title":"Migrating to 1.7"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"role":"article","title":"Sharing state","url":"\/documentation\/composablearchitecture\/sharingstate","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","kind":"article","abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"type":"text","text":" "},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.15","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","role":"article","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"type":"text","text":"concurrency with no warnings or errors."}],"kind":"article","title":"Migrating to 1.15"},"#Migrating-to-1112":{"type":"link","title":"Migrating to 1.11.2","url":"#Migrating-to-1112","identifier":"#Migrating-to-1112","titleInlineContent":[{"text":"Migrating to 1.11.2","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.6","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"text":" ","type":"text"},{"code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","type":"codeVoice"},{"type":"text","text":" method when you need to"},{"text":" ","type":"text"},{"type":"text","text":"assert on the payload inside an action received."}],"kind":"article","title":"Migrating to 1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()","title":"Reducer()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":" protocol for a type."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"type":"topic","title":"IfLetStore","deprecated":true,"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"title":"TestStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","title":"Migrating to 1.12","url":"\/documentation\/composablearchitecture\/migratingto1.12","type":"topic","role":"article","kind":"article","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"role":"symbol","title":"Store","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"kind":"symbol"},"#Mutating-shared-state-concurrently":{"title":"Mutating shared state concurrently","type":"link","url":"#Mutating-shared-state-concurrently","identifier":"#Mutating-shared-state-concurrently","titleInlineContent":[{"text":"Mutating shared state concurrently","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","role":"symbol","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"title":"dependency(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"dependency","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","title":"Migration guides","url":"\/documentation\/composablearchitecture\/migrationguides","type":"topic","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.14","title":"Migrating to 1.14","role":"article","kind":"article","abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" type is now officially "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" isolated."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","role":"symbol","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"kind":"symbol","title":"scope(state:action:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro, including automatic"},{"text":" ","type":"text"},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"title":"Migrating to 1.8","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"title":"WithViewStore","role":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"text":" so that its state can be observed","type":"text"},{"type":"text","text":" "},{"text":"by a view builder.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.17.1","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","role":"article","abstract":[{"type":"text","text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}],"kind":"article","title":"Migrating to 1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","title":"ComposableArchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","role":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"method on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"text":" method for overriding dependencies.","type":"text"}],"kind":"article","title":"Migrating to 1.9"}}}