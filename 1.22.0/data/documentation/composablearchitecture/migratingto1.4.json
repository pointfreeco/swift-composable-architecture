{"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"],"generated":true}],"sections":[],"kind":"article","abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"type":"text","text":" "},{"type":"text","text":"APIs, and this article contains some tips for doing so."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Using-the-Reducer-macro","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Using-case-key-paths","type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Receiving-test-store-actions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Moving-off-of-TaskResult","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Identified-actions"}],"type":"paragraph"}]}]},{"anchor":"Using-the-Reducer-macro","type":"heading","level":3,"text":"Using the @Reducer macro"},{"inlineContent":[{"text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":". It is called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":", and to migrate existing code one only needs to annotate","type":"text"},{"text":" ","type":"text"},{"text":"their type with ","type":"text"},{"code":"@Reducer","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"]},{"inlineContent":[{"type":"text","text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of"},{"type":"text","text":" "},{"type":"text","text":"reducer composition, such as case key paths (see guides below). See the documentation of"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" to see everything that macro adds to your feature’s reducer."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can also technically drop the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" conformance:"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"]},{"inlineContent":[{"type":"text","text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break."},{"type":"text","text":" "},{"type":"text","text":"See the documentation of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas"},{"type":"text","text":" for more gotchas on using the "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro."}],"type":"paragraph"},{"anchor":"Using-case-key-paths","type":"heading","level":3,"text":"Using case key paths"},{"inlineContent":[{"type":"text","text":"In version 1.4 we soft-deprecated many APIs that take the "},{"type":"codeVoice","code":"CasePath"},{"type":"text","text":" type in favor of APIs that take"},{"type":"text","text":" "},{"type":"text","text":"what is known as a "},{"type":"codeVoice","code":"CaseKeyPath"},{"type":"text","text":". Both of these types come from our "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do"},{"type":"text","text":" "},{"type":"text","text":"so with structs."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths"},{"type":"text","text":" "},{"type":"text","text":"that massively improved the ergonomics of using case paths. We introduced the "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro"},{"type":"text","text":" "},{"type":"text","text":"for automatically deriving case paths so that we could stop using runtime reflection, and we"},{"type":"text","text":" "},{"type":"text","text":"introduced a way of using key paths to describe case paths. And so the old "},{"code":"CasePath","type":"codeVoice"},{"type":"text","text":" type has been"},{"type":"text","text":" "},{"type":"text","text":"deprecated, and the new "},{"code":"CaseKeyPath","type":"codeVoice"},{"type":"text","text":" type has taken its place."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means that previously when you would use APIs involving case paths you would have to use the"},{"type":"text","text":" "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator to derive the case path. For example:"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You now get to shorten that into a far simpler, more familiar key path syntax:"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" conformances with the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro:"}],"type":"paragraph"},{"code":["@Reducer","struct Feature {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Which automatically applies the ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro to the feature’s ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum among other","type":"text"},{"text":" ","type":"text"},{"text":"things:","type":"text"}],"type":"paragraph"},{"code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"],"syntax":"diff","type":"codeListing"},{"inlineContent":[{"text":"Further, if the feature’s ","type":"text"},{"code":"State","type":"codeVoice"},{"text":" is an enum, ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" will also be applied, along with","type":"text"},{"text":" ","type":"text"},{"code":"@dynamicMemberLookup","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"],"syntax":"diff","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be"},{"type":"text","text":" "},{"type":"text","text":"useful when scoping a store’s state to a specific case:"}],"type":"paragraph"},{"code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"],"syntax":"diff","type":"codeListing"},{"inlineContent":[{"type":"text","text":"To form a case key path for any other enum, you must apply the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro explicitly:"}],"type":"paragraph"},{"code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"And to access its associated values, you must also apply the ","type":"text"},{"code":"@dynamicMemberLookup","type":"codeVoice"},{"text":" attributes:","type":"text"}],"type":"paragraph"},{"code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator for case paths you should now be able to use"},{"type":"text","text":" "},{"type":"text","text":"key path syntax, so long as all of the enums involved are "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you encounter any problems, create a "},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true},{"type":"text","text":" on the Composable Architecture"},{"type":"text","text":" "},{"type":"text","text":"repo."}],"type":"paragraph"},{"anchor":"Receiving-test-store-actions","type":"heading","text":"Receiving test store actions","level":3},{"inlineContent":[{"text":"The power of case key paths and the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro has made it possible to massively simplify","type":"text"},{"text":" ","type":"text"},{"text":"how one asserts on actions received in a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":". Instead of constructing the concrete action","type":"text"},{"text":" ","type":"text"},{"text":"received from an effect like this:","type":"text"}],"type":"paragraph"},{"code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"…you can use key path syntax to describe the nesting of action cases that is received:"}],"type":"paragraph"},{"code":["store.receive(\\.child.presented.response.success)"],"syntax":"swift","type":"codeListing"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Case key path syntax requires that every nested action is "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":". Reducer actions"},{"type":"text","text":" "},{"type":"text","text":"are typically "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" automatically via the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, but other enums must be"},{"type":"text","text":" "},{"type":"text","text":"explicitly annotated:"}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]}],"type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"And in the case of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" you can even omit the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","isActive":true},{"type":"text","text":" "},{"type":"text","text":"path component:"}],"type":"paragraph"},{"code":["store.receive(\\.child.response.success)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This does not assert on the "},{"inlineContent":[{"text":"data","type":"text"}],"type":"emphasis"},{"type":"text","text":" received in the action, but typically that is already covered"},{"type":"text","text":" "},{"type":"text","text":"by the state assertion made inside the trailing closure of "},{"code":"receive","type":"codeVoice"},{"type":"text","text":". And if you use this style of"},{"type":"text","text":" "},{"type":"text","text":"action receiving exclusively, you can even stop conforming your action types to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"There are a few advanced situations to be aware of. When receiving an action that involves an","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"text":" (more information below in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions"},{"text":"), then","type":"text"},{"text":" ","type":"text"},{"text":"you can use the subscript ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"receive a particular action for an element:","type":"text"}],"type":"paragraph"},{"code":["store.receive(\\.rows[id: 0].response.success)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And the same goes for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" too:"}],"type":"paragraph"},{"code":["store.receive(\\.path[id: 0].response.success)"],"syntax":"swift","type":"codeListing"},{"anchor":"Moving-off-of-TaskResult","type":"heading","text":"Moving off of TaskResult","level":3},{"inlineContent":[{"text":"In version 1.4 of the library, the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"text":" was soft-deprecated and eventually will be fully","type":"text"},{"text":" ","type":"text"},{"text":"deprecated and then removed. The original rationale for the introduction of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"text":" was to","type":"text"},{"text":" ","type":"text"},{"text":"make an equatable-friendly version of ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" for when the error produced was ","type":"text"},{"type":"codeVoice","code":"any Error"},{"text":", which is","type":"text"},{"text":" ","type":"text"},{"text":"not equatable. And the reason to want an equatable-friendly result is so that the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" type in","type":"text"},{"text":" ","type":"text"},{"text":"reducers can be equatable, and the reason for ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"that","type":"text"}]},{"text":" is to make it possible to test actions","type":"text"},{"text":" ","type":"text"},{"text":"emitted by effects.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Typically in tests, when one wants to assert that the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" received an action you must"},{"type":"text","text":" "},{"type":"text","text":"specify a concrete action:"}],"type":"paragraph"},{"code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" uses the equatable conformance of "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" to confirm that you are asserting that"},{"type":"text","text":" "},{"type":"text","text":"the store received the correct action."}],"type":"paragraph"},{"inlineContent":[{"text":"However, this becomes verbose when testing deeply nested features, which is common in integration","type":"text"},{"text":" ","type":"text"},{"text":"tests:","type":"text"}],"type":"paragraph"},{"code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"However, with the introduction of ","type":"text"},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true,"overridingTitle":"case key paths","overridingTitleInlineContent":[{"text":"case key paths","type":"text"}],"type":"reference"},{"text":" we greatly improved the","type":"text"},{"text":" ","type":"text"},{"text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the","type":"text"},{"text":" ","type":"text"},{"text":"case of the enum you expect to receive, and you can even omit the associated data from the action","type":"text"},{"text":" ","type":"text"},{"text":"since typically that is covered in the state assertion:","type":"text"}],"type":"paragraph"},{"code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"And this syntax does not require the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum to be equatable since we are only asserting that","type":"text"},{"text":" ","type":"text"},{"text":"the case of the action was received. We are not testing the data in the action.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"We feel that with this better syntax there is less of a reason to have ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"text":" and so we","type":"text"},{"text":" ","type":"text"},{"text":"do plan on removing it eventually. If you have an important use case for ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"text":" that you","type":"text"},{"text":" ","type":"text"},{"text":"think merits it being in the library, please ","type":"text"},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","overridingTitleInlineContent":[{"type":"text","text":"open a discussion"}],"overridingTitle":"open a discussion","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Identified-actions","type":"heading","text":"Identified actions","level":3},{"inlineContent":[{"type":"text","text":"In version 1.4 of the library we introduced the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"type":"text","text":" type which makes it more"},{"type":"text","text":" "},{"type":"text","text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would"},{"type":"text","text":" "},{"type":"text","text":"have a case in your "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum for a particular row that holds the ID of the state being acted"},{"type":"text","text":" "},{"type":"text","text":"upon as well as the action:"}],"type":"paragraph"},{"code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This can be updated to hold onto "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"type":"text","text":" instead of those piece of data directly in the"},{"type":"text","text":" "},{"type":"text","text":"case:"}],"type":"paragraph"},{"code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"And in the reducer, instead of invoking","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8"},{"text":" with a case path using the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":" prefix operator:","type":"text"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"…you will instead use key path syntax to determine which case of the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum holds the","type":"text"},{"text":" ","type":"text"},{"text":"identified action:","type":"text"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"type":"text","text":" "},{"type":"text","text":"type-inference."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"One last change you will need to make is anywhere you are destructuring the old-style action you"},{"type":"text","text":" "},{"type":"text","text":"will need to insert a "},{"code":".element","type":"codeVoice"},{"type":"text","text":" layer:"}],"type":"paragraph"},{"code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"],"syntax":"diff","type":"codeListing"}],"kind":"content"}],"metadata":{"title":"Migrating to 1.4","role":"article","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.4"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"#Identified-actions":{"titleInlineContent":[{"text":"Identified actions","type":"text"}],"title":"Identified actions","url":"#Identified-actions","type":"link","identifier":"#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.17","role":"article","abstract":[{"text":"The ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" property wrapper and related tools have been extracted to their own","type":"text"},{"text":" ","type":"text"},{"text":"library so that they can be used in non-Composable Architecture applications. This a","type":"text"},{"text":" ","type":"text"},{"text":"backwards compatible change, but some new deprecations have been introduced.","type":"text"}],"title":"Migrating to 1.17","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"type":"topic","title":"TestStore","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"url":"\/documentation\/composablearchitecture\/taskresult","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":".","type":"text"}],"deprecated":true,"kind":"symbol","title":"TaskResult","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"type":"topic"},"#Using-case-key-paths":{"title":"Using case key paths","url":"#Using-case-key-paths","identifier":"#Using-case-key-paths","type":"link","titleInlineContent":[{"text":"Using case key paths","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","url":"\/documentation\/composablearchitecture\/migrationguides","role":"collectionGroup","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"title":"Migration guides","kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for a type."}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/composablearchitecture\/reducer()","title":"Reducer()","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","url":"\/documentation\/composablearchitecture\/migratingto1.9","role":"article","title":"Migrating to 1.9","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"codeVoice"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method on "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},{"type":"text","text":" method for overriding dependencies."}],"kind":"article","type":"topic"},"http://github.com/pointfreeco/swift-case-paths":{"titleInlineContent":[{"text":"CasePaths","type":"text"}],"title":"CasePaths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"role":"article","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"text":" ","type":"text"},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","title":"Migrating to 1.13","url":"\/documentation\/composablearchitecture\/migratingto1.13","type":"topic","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"url":"\/documentation\/composablearchitecture\/migratingto1.12","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","kind":"article","title":"Migrating to 1.12","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}],"type":"topic"},"#Moving-off-of-TaskResult":{"title":"Moving off of TaskResult","url":"#Moving-off-of-TaskResult","identifier":"#Moving-off-of-TaskResult","type":"link","titleInlineContent":[{"text":"Moving off of ","type":"text"},{"code":"TaskResult","type":"codeVoice"}]},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"titleInlineContent":[{"text":"discussion","type":"text"}],"title":"discussion","url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"abstract":[],"title":"Identified actions","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","role":"collection","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.10","title":"Migrating to 1.10","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" "},{"type":"text","text":"property wrapper, and the "},{"type":"codeVoice","code":"appStorage"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":" persistence strategies."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"deprecated":true,"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"title":"WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" into a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"title":"PresentationAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","url":"\/documentation\/composablearchitecture\/presentationaction","type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"codeVoice","code":"Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","title":"Migrating to 1.5","url":"\/documentation\/composablearchitecture\/migratingto1.5","kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"title":"Migrating to 1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11","abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"type":"text","text":"contexts, rather than mutating the underlying wrapped value directly."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","kind":"article","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"title":"dependency(_:)","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"kind":"symbol","title":"Effect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"topic","navigatorTitle":[{"text":"IdentifiedAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/identifiedaction","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdentifiedAction","kind":"identifier"}],"role":"symbol","title":"IdentifiedAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"title":"subscript(id:)","type":"topic","fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":" _: ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AnyCasePath","preciseIdentifier":"s:13CasePathsCore03AnyA4PathV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"IdentifiedAction","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","role":"symbol","abstract":[],"kind":"symbol"},"#Receiving-test-store-actions":{"title":"Receiving test store actions","url":"#Receiving-test-store-actions","identifier":"#Receiving-test-store-actions","type":"link","titleInlineContent":[{"text":"Receiving test store actions","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"title":"PresentationAction.presented(_:)","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" presentation state.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","kind":"symbol","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"presented","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","title":"Store","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.19":{"type":"topic","kind":"article","title":"Migrating to 1.19","abstract":[{"text":"Store internals have been rewritten for performance and future features, and are now compatible with","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"@StateObject"},{"text":" property wrapper.","type":"text"}],"role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.19","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","title":"Migrating to 1.14","kind":"article","role":"article","abstract":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" type is now officially ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":" isolated.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.14"},"#Using-the-Reducer-macro":{"titleInlineContent":[{"text":"Using the @Reducer macro","type":"text"}],"title":"Using the @Reducer macro","url":"#Using-the-Reducer-macro","type":"link","identifier":"#Using-the-Reducer-macro"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"title":"Migrating to 1.7","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","kind":"article","abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":", and more."}],"url":"\/documentation\/composablearchitecture\/migratingto1.7","role":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy used with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"url":"\/documentation\/composablearchitecture\/migratingto1.16","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","role":"article","kind":"article","title":"Migrating to 1.16"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"title":"Migrating to 1.17.1","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","kind":"article","role":"article","type":"topic","abstract":[{"text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable","type":"text"},{"text":" ","type":"text"},{"text":"Architecture has been updated to extend support to this new version.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"kind":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","title":"IfLetStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"abstract":[],"title":"Gotchas","url":"\/documentation\/composablearchitecture\/reducer#Gotchas","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","type":"topic","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"title":"Migrating to 1.8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, including automatic"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"url":"\/documentation\/composablearchitecture\/migratingto1.8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.18":{"abstract":[{"text":"Stores now automatically cancel their in-flight effects when they deallocate. And another UIKit","type":"text"},{"text":" ","type":"text"},{"text":"navigation helper has been introduced.","type":"text"}],"kind":"article","type":"topic","title":"Migrating to 1.18","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.18"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"title":"StackAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/stackaction","navigatorTitle":[{"kind":"identifier","text":"StackAction"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","type":"topic","abstract":[{"text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict","type":"text"},{"text":" ","type":"text"},{"text":"concurrency with no warnings or errors.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.15","role":"article","title":"Migrating to 1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.6","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","kind":"article","title":"Migrating to 1.6","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"type":"codeVoice","code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"type":"topic","role":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/foreachstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"title":"ForEachStore","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}]}}}