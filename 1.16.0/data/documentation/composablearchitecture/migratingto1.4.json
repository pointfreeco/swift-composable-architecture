{"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"Migrating to 1.4","roleHeading":"Article","role":"article","modules":[{"name":"ComposableArchitecture"}]},"abstract":[{"type":"text","text":"Update your code to make use of the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro, and learn how to better leverage case key","type":"text"},{"text":" ","type":"text"},{"text":"paths in your features.","type":"text"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","interfaceLanguage":"swift"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.4"]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"type":"text","text":" "},{"text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"type":"text","text":" "},{"type":"text","text":"APIs, and this article contains some tips for doing so."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Using-the-Reducer-macro","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Using-case-key-paths","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Receiving-test-store-actions"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Moving-off-of-TaskResult","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Identified-actions","isActive":true,"type":"reference"}]}]}]},{"text":"Using the @Reducer macro","level":3,"anchor":"Using-the-Reducer-macro","type":"heading"},{"inlineContent":[{"type":"text","text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":". It is called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":", and to migrate existing code one only needs to annotate"},{"text":" ","type":"text"},{"text":"their type with ","type":"text"},{"code":"@Reducer","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"diff","code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of"},{"text":" ","type":"text"},{"type":"text","text":"reducer composition, such as case key paths (see guides below). See the documentation of"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" to see everything that macro adds to your feature’s reducer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also technically drop the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" conformance:"}]},{"syntax":"diff","type":"codeListing","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break."},{"type":"text","text":" "},{"type":"text","text":"See the documentation of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas"},{"text":" for more gotchas on using the ","type":"text"},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro."}]},{"level":3,"anchor":"Using-case-key-paths","type":"heading","text":"Using case key paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 we soft-deprecated many APIs that take the "},{"type":"codeVoice","code":"CasePath"},{"type":"text","text":" type in favor of APIs that take"},{"type":"text","text":" "},{"text":"what is known as a ","type":"text"},{"code":"CaseKeyPath","type":"codeVoice"},{"type":"text","text":". Both of these types come from our "},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do"},{"type":"text","text":" "},{"text":"so with structs.","type":"text"}]},{"inlineContent":[{"text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths","type":"text"},{"text":" ","type":"text"},{"text":"that massively improved the ergonomics of using case paths. We introduced the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro","type":"text"},{"text":" ","type":"text"},{"text":"for automatically deriving case paths so that we could stop using runtime reflection, and we","type":"text"},{"text":" ","type":"text"},{"text":"introduced a way of using key paths to describe case paths. And so the old ","type":"text"},{"code":"CasePath","type":"codeVoice"},{"type":"text","text":" type has been"},{"text":" ","type":"text"},{"text":"deprecated, and the new ","type":"text"},{"code":"CaseKeyPath","type":"codeVoice"},{"type":"text","text":" type has taken its place."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means that previously when you would use APIs involving case paths you would have to use the"},{"type":"text","text":" "},{"code":"\/","type":"codeVoice"},{"text":" prefix operator to derive the case path. For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"]},{"type":"paragraph","inlineContent":[{"text":"You now get to shorten that into a far simpler, more familiar key path syntax:","type":"text"}]},{"type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" conformances with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"Which automatically applies the "},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro to the feature’s ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum among other"},{"type":"text","text":" "},{"type":"text","text":"things:"}],"type":"paragraph"},{"code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"],"type":"codeListing","syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the feature’s "},{"type":"codeVoice","code":"State"},{"text":" is an enum, ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" will also be applied, along with"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":":"}]},{"syntax":"diff","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"],"type":"codeListing"},{"inlineContent":[{"text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be","type":"text"},{"text":" ","type":"text"},{"text":"useful when scoping a store’s state to a specific case:","type":"text"}],"type":"paragraph"},{"syntax":"diff","code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To form a case key path for any other enum, you must apply the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro explicitly:"}],"type":"paragraph"},{"code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And to access its associated values, you must also apply the "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":" attributes:"}],"type":"paragraph"},{"syntax":"swift","code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator for case paths you should now be able to use"},{"type":"text","text":" "},{"text":"key path syntax, so long as all of the enums involved are ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you encounter any problems, create a "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true,"type":"reference"},{"text":" on the Composable Architecture","type":"text"},{"type":"text","text":" "},{"type":"text","text":"repo."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Receiving-test-store-actions","text":"Receiving test store actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The power of case key paths and the "},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro has made it possible to massively simplify"},{"text":" ","type":"text"},{"type":"text","text":"how one asserts on actions received in a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":". Instead of constructing the concrete action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"received from an effect like this:"}]},{"syntax":"swift","code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"…you can use key path syntax to describe the nesting of action cases that is received:","type":"text"}]},{"syntax":"swift","code":["store.receive(\\.child.presented.response.success)"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Case key path syntax requires that every nested action is "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":". Reducer actions"},{"type":"text","text":" "},{"text":"are typically ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" automatically via the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"text":" macro, but other enums must be","type":"text"},{"type":"text","text":" "},{"text":"explicitly annotated:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]}],"style":"note","type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in the case of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"text":" you can even omit the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"path component:"}]},{"code":["store.receive(\\.child.response.success)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This does not assert on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"data"}]},{"type":"text","text":" received in the action, but typically that is already covered"},{"type":"text","text":" "},{"type":"text","text":"by the state assertion made inside the trailing closure of "},{"type":"codeVoice","code":"receive"},{"text":". And if you use this style of","type":"text"},{"text":" ","type":"text"},{"text":"action receiving exclusively, you can even stop conforming your action types to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are a few advanced situations to be aware of. When receiving an action that involves an"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"type":"text","text":" (more information below in "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","type":"reference","isActive":true},{"type":"text","text":"), then"},{"type":"text","text":" "},{"type":"text","text":"you can use the subscript "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","type":"reference"},{"text":" to","type":"text"},{"type":"text","text":" "},{"text":"receive a particular action for an element:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(\\.rows[id: 0].response.success)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And the same goes for "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference","isActive":true},{"type":"text","text":" too:"}],"type":"paragraph"},{"code":["store.receive(\\.path[id: 0].response.success)"],"syntax":"swift","type":"codeListing"},{"text":"Moving off of TaskResult","level":3,"anchor":"Moving-off-of-TaskResult","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 of the library, the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"type":"text","text":" was soft-deprecated and eventually will be fully"},{"type":"text","text":" "},{"type":"text","text":"deprecated and then removed. The original rationale for the introduction of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" was to"},{"text":" ","type":"text"},{"type":"text","text":"make an equatable-friendly version of "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" for when the error produced was "},{"type":"codeVoice","code":"any Error"},{"text":", which is","type":"text"},{"type":"text","text":" "},{"text":"not equatable. And the reason to want an equatable-friendly result is so that the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" type in","type":"text"},{"text":" ","type":"text"},{"text":"reducers can be equatable, and the reason for ","type":"text"},{"inlineContent":[{"text":"that","type":"text"}],"type":"emphasis"},{"type":"text","text":" is to make it possible to test actions"},{"type":"text","text":" "},{"text":"emitted by effects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically in tests, when one wants to assert that the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" received an action you must"},{"type":"text","text":" "},{"text":"specify a concrete action:","type":"text"}]},{"code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" uses the equatable conformance of ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" to confirm that you are asserting that"},{"type":"text","text":" "},{"type":"text","text":"the store received the correct action."}],"type":"paragraph"},{"inlineContent":[{"text":"However, this becomes verbose when testing deeply nested features, which is common in integration","type":"text"},{"text":" ","type":"text"},{"text":"tests:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, with the introduction of "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","overridingTitle":"case key paths","overridingTitleInlineContent":[{"type":"text","text":"case key paths"}]},{"text":" we greatly improved the","type":"text"},{"type":"text","text":" "},{"text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the","type":"text"},{"type":"text","text":" "},{"text":"case of the enum you expect to receive, and you can even omit the associated data from the action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"since typically that is covered in the state assertion:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"And this syntax does not require the ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum to be equatable since we are only asserting that"},{"type":"text","text":" "},{"text":"the case of the action was received. We are not testing the data in the action.","type":"text"}]},{"inlineContent":[{"type":"text","text":"We feel that with this better syntax there is less of a reason to have "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"text":" and so we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"do plan on removing it eventually. If you have an important use case for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" that you"},{"text":" ","type":"text"},{"text":"think merits it being in the library, please ","type":"text"},{"type":"reference","overridingTitle":"open a discussion","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"open a discussion"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Identified-actions","level":3,"text":"Identified actions","type":"heading"},{"inlineContent":[{"type":"text","text":"In version 1.4 of the library we introduced the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"text":" type which makes it more","type":"text"},{"type":"text","text":" "},{"text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would","type":"text"},{"text":" ","type":"text"},{"text":"have a case in your ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" enum for a particular row that holds the ID of the state being acted"},{"text":" ","type":"text"},{"type":"text","text":"upon as well as the action:"}],"type":"paragraph"},{"code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This can be updated to hold onto ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"type":"text","text":" instead of those piece of data directly in the"},{"text":" ","type":"text"},{"type":"text","text":"case:"}]},{"type":"codeListing","syntax":"swift","code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"]},{"type":"paragraph","inlineContent":[{"text":"And in the reducer, instead of invoking","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-3dw7i"},{"type":"text","text":" with a case path using the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator:"}]},{"type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"…you will instead use key path syntax to determine which case of the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum holds the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"identified action:"}]},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"type":"text","text":" "},{"text":"type-inference.","type":"text"}]},{"inlineContent":[{"type":"text","text":"One last change you will need to make is anywhere you are destructuring the old-style action you"},{"text":" ","type":"text"},{"text":"will need to insert a ","type":"text"},{"type":"codeVoice","code":".element"},{"type":"text","text":" layer:"}],"type":"paragraph"},{"type":"codeListing","code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"],"syntax":"diff"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"title":"IfLetStore","kind":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/ifletstore","role":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}]},"#Using-case-key-paths":{"type":"link","title":"Using case key paths","titleInlineContent":[{"type":"text","text":"Using case key paths"}],"url":"#Using-case-key-paths","identifier":"#Using-case-key-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"kind":"text","text":"("},{"text":"id","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","text":"ID"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"AnyCasePath","preciseIdentifier":"s:9CasePaths03AnyA4PathV"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"subscript(id:)","url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","abstract":[]},"#Moving-off-of-TaskResult":{"type":"link","title":"Moving off of TaskResult","titleInlineContent":[{"text":"Moving off of ","type":"text"},{"type":"codeVoice","code":"TaskResult"}],"url":"#Moving-off-of-TaskResult","identifier":"#Moving-off-of-TaskResult"},"#Identified-actions":{"type":"link","title":"Identified actions","titleInlineContent":[{"text":"Identified actions","type":"text"}],"url":"#Identified-actions","identifier":"#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" presentation state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","role":"symbol","type":"topic","title":"PresentationAction.presented(_:)","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha","kind":"typeIdentifier","text":"_SendableCaseKeyPath"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","title":"receive(_:_:timeout:assert:fileID:file:line:column:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Asserts an action was received matching a case path with a specific payload, and asserts how"},{"type":"text","text":" "},{"text":"the state changes.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"abstract":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" type is now officially "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" isolated."}],"title":"Migrating to 1.14","type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","role":"symbol","title":"scope(state:action:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"type":"topic","title":"Gotchas","url":"\/documentation\/composablearchitecture\/reducer#Gotchas","abstract":[],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Effect","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","navigatorTitle":[{"text":"FileStorageKey","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/filestoragekey","role":"symbol","title":"FileStorageKey","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileStorageKey","kind":"identifier"}],"abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","role":"article","title":"Migrating to 1.7","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"text":"APIs such as ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"type":"text","text":", and more."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskResult"}],"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"text":" ","type":"text"},{"type":"text","text":"untyped "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"."}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","title":"TaskResult"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"type":"topic","url":"\/documentation\/composablearchitecture\/appstoragekey","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AppStorageKey","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","role":"symbol","navigatorTitle":[{"text":"AppStorageKey","kind":"identifier"}],"abstract":[{"type":"text","text":"A type defining a user defaults persistence strategy."}],"title":"AppStorageKey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","role":"article","title":"Migrating to 1.11","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.11","abstract":[{"type":"text","text":"Update your code to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"reference","isActive":true},{"type":"text","text":" method for mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, rather than mutating the underlying wrapped value directly."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"url":"\/documentation\/composablearchitecture\/reducer()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","role":"symbol","title":"Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol for a type.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","role":"article","title":"Migrating to 1.13","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.13","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","type":"topic","deprecated":true,"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}],"url":"\/documentation\/composablearchitecture\/foreachstore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"title":"ForEachStore","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"title":"dependency(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dependency"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","title":"Migrating to 1.8","role":"article","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro, including automatic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"url":"\/documentation\/composablearchitecture\/migratingto1.8"},"#Using-the-Reducer-macro":{"type":"link","title":"Using the @Reducer macro","titleInlineContent":[{"text":"Using the @Reducer macro","type":"text"}],"url":"#Using-the-Reducer-macro","identifier":"#Using-the-Reducer-macro"},"#Receiving-test-store-actions":{"type":"link","title":"Receiving test store actions","titleInlineContent":[{"type":"text","text":"Receiving test store actions"}],"url":"#Receiving-test-store-actions","identifier":"#Receiving-test-store-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"type":"topic","title":"Identified actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","abstract":[],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"StackAction","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"url":"\/documentation\/composablearchitecture\/stackaction","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"title":"StackAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"title":"TestStore","kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","kind":"symbol","type":"topic","abstract":[{"text":"A wrapper type for actions that can be presented in a list.","type":"text"}],"url":"\/documentation\/composablearchitecture\/identifiedaction","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentifiedAction"}],"navigatorTitle":[{"kind":"identifier","text":"IdentifiedAction"}],"title":"IdentifiedAction","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","role":"article","title":"Migrating to 1.6","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.6","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"title":"Migrating to 1.12","role":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}],"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.12"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"type":"topic","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/presentationaction","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"PresentationAction","kind":"identifier"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"role":"symbol","title":"PresentationAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},"http://github.com/pointfreeco/swift-case-paths":{"type":"link","title":"CasePaths","titleInlineContent":[{"text":"CasePaths","type":"text"}],"url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","title":"Migrating to 1.9","role":"article","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"type":"text","text":""},{"type":"text","text":" "},{"text":"method on ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"reference","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"url":"\/documentation\/composablearchitecture\/migratingto1.9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"role":"symbol","title":"Shared","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Shared","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","navigatorTitle":[{"text":"Shared","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"url":"\/documentation\/composablearchitecture\/shared"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"title":"Migration guides","role":"collectionGroup","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","abstract":[{"text":"Learn how to upgrade your application to the newest version of the Composable Architecture.","type":"text"}],"kind":"article","url":"\/documentation\/composablearchitecture\/migrationguides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","url":"\/documentation\/composablearchitecture\/store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","title":"Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","title":"Migrating to 1.5","role":"article","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"kind":"article","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"text":" ","type":"text"},{"text":"property wrapper, and the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","type":"reference","isActive":true},{"type":"text","text":" persistence strategies."}],"title":"Migrating to 1.10","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.10","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","title":"Migrating to 1.15","role":"article","type":"topic","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"text":"concurrency with no warnings or errors.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier","text":"TestStoreTask"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","title":"send(_:assert:fileID:file:line:column:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"type":"link","title":"discussion","titleInlineContent":[{"type":"text","text":"discussion"}],"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"kind":"symbol","type":"topic","title":"WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","role":"symbol","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)","role":"symbol","title":"withLock(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"type":"topic","kind":"symbol"}}}