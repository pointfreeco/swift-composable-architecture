{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"type":"text","text":" "},{"type":"text","text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored"},{"type":"text","text":" "},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"type":"text","text":" "},{"type":"text","text":"you will need to know how to prove to the compiler that your types are safe to use concurrently."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are 3 primary ways to create an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" in the library:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/task(priority:operation:catch:file:fileID:line:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:file:fileID:line:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/fireAndForget(priority:_:)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each of these constructors takes a "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":", asynchronous closure, which restricts the types of"},{"type":"text","text":" "},{"type":"text","text":"closures you can use for your effects. In particular, the closure can only capture "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" "},{"type":"text","text":"variables that are bound with "},{"type":"codeVoice","code":"let"},{"type":"text","text":". Mutable variables and non-"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" types are simply not"},{"type":"text","text":" "},{"type":"text","text":"allowed to be passed to "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two primary ways you will run into this restriction when building a feature in the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from"},{"type":"text","text":" "},{"type":"text","text":"within an effect."}]},{"anchor":"Accessing-state-in-an-effect","level":3,"type":"heading","text":"Accessing state in an effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reducers are executed with a mutable, "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" state variable, and such variables cannot be accessed"},{"type":"text","text":" "},{"type":"text","text":"from within "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures:"}]},{"type":"codeListing","syntax":"swift","code":["Reducer { state, action, environment in ","  switch action {","  case .buttonTapped:","    return .task {","      try await Task.sleep(nanoseconds: NSEC_PER_SEC)","      return .delayed(state.count) ","      \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is ","      \/\/    not allowed in concurrently-executing code","    }","","    …","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To work around this you must explicitly capture the state as an immutable value for the scope of the"},{"type":"text","text":" "},{"type":"text","text":"closure:"}]},{"type":"codeListing","syntax":"swift","code":["return .task { [state] in ","  try await Task.sleep(nanoseconds: NSEC_PER_SEC)","  return .delayed(state.count) \/\/ ✅","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also capture just the minimal parts of the state you need for the effect by binding a new"},{"type":"text","text":" "},{"type":"text","text":"variable name for the capture:"}]},{"type":"codeListing","syntax":"swift","code":["return .task { [count = state.count] in ","  try await Task.sleep(nanoseconds: NSEC_PER_SEC)","  return .delayed(count) \/\/ ✅","}"]},{"anchor":"Accessing-dependencies-in-an-effect","level":3,"type":"heading","text":"Accessing dependencies in an effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture, one designs an environment of dependencies that your feature needs to"},{"type":"text","text":" "},{"type":"text","text":"do its job. These are all the clients and objects that interact with the messy, unpredictable"},{"type":"text","text":" "},{"type":"text","text":"outside world, but provide an interface that is easy to control so that we can still write tests."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dependencies are typically accessed inside the effect, which means it must be "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", otherwise"},{"type":"text","text":" "},{"type":"text","text":"we will get the following warning (and error in Swift 6):"}]},{"type":"codeListing","syntax":"swift","code":["case .numberFactButtonTapped:","  return .task { [count = state.count] in","    await .numberFactResponse(","      TaskResult { try await environment.factClient.fetch(count) }","    )","    \/\/ ⚠️ Capture of 'environment' with non-sendable type 'AppEnvironment' ","    \/\/    in a `@Sendable` closure","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix this we need to make each dependency held in the environment "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":". This usually just"},{"type":"text","text":" "},{"type":"text","text":"means making sure that the interface type only holds onto "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" data, and in particular, any"},{"type":"text","text":" "},{"type":"text","text":"closure-based endpoints should be annotated as "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will restrict the kinds of closures that can be used when construct "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" values, thus"},{"type":"text","text":" "},{"type":"text","text":"making the entire "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" sendable itself."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/gettingreadyforswiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingReadyForSwiftConcurrency","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Getting ready for Swift concurrency","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"],"generated":true}],"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/GettingStarted":{"role":"article","title":"Getting started","abstract":[{"type":"text","text":"Learn how to integrate the Composable Architecture into your project and write your first"},{"type":"text","text":" "},{"type":"text","text":"application."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/gettingstarted"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" type encapsulates a unit of work that can be run in the outside world, and can"},{"type":"text","text":" "},{"type":"text","text":"feed data back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":". It is the perfect place to do side effects, such as network"},{"type":"text","text":" "},{"type":"text","text":"requests, saving\/loading from disk, creating timers, interacting with dependencies, and more."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect/task(priority:operation:catch:file:fileID:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"task(priority:operation:catch:file:fileID:line:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"task"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output","preciseIdentifier":"s:22ComposableArchitecture6EffectVAAs5NeverORs_rlE6Outputxmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output","preciseIdentifier":"s:22ComposableArchitecture6EffectVAAs5NeverORs_rlE6Outputxmfp"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work in an effect."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/task(priority:operation:catch:file:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/task(priority:operation:catch:file:fileid:line:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:file:fileID:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"run(priority:operation:catch:file:fileID:line:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output","preciseIdentifier":"s:22ComposableArchitecture6EffectVAAs5NeverORs_rlE6Outputxmfp"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output","preciseIdentifier":"s:22ComposableArchitecture6EffectVAAs5NeverORs_rlE6Outputxmfp"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit any number of times in an effect."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:file:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:file:fileid:line:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"role":"article","title":"Testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/testing"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect/fireAndForget(priority:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"fireAndForget(priority:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fireAndForget"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Creates an effect that executes some work in the real world that doesn’t need to feed data"},{"type":"text","text":" "},{"type":"text","text":"back into the store. If an error is thrown, the effect will complete and the error will be"},{"type":"text","text":" "},{"type":"text","text":"ignored."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/fireAndForget(priority:_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/fireandforget(priority:_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/performance"}}}