{"seeAlsoSections":[{"title":"View containers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"role":"symbol","title":"WithViewStore","roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"symbolKind":"struct","externalID":"s:22ComposableArchitecture13WithViewStoreV","modules":[{"name":"ComposableArchitecture"}],"platforms":[]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState"}]}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"topicSections":[{"title":"Creating a view","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l"]},{"title":"Debugging view updates","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body"]},{"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations"],"generated":true}],"variants":[{"paths":["\/documentation\/composablearchitecture\/withviewstore"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ViewState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Content"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This helper is an alternative to observing the view store manually on your view, which requires"},{"type":"text","text":" "},{"type":"text","text":"the boilerplate of a custom initializer."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to properly leverage the "},{"type":"codeVoice","code":"observe"},{"type":"text","text":" argument in order to observe"},{"type":"text","text":" "},{"type":"text","text":"only the state that your view needs to do its job. See the “Performance” section below for more"},{"type":"text","text":" "},{"type":"text","text":"information."}]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following view, which manually observes the store it is handed by constructing"},{"type":"text","text":" "},{"type":"text","text":"a view store in its initializer:"}]},{"type":"codeListing","syntax":"swift","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","  @ObservedObject var viewStore: ViewStoreOf<Profile>","","  init(store: StoreOf<Profile>) {","    self.store = store","    self.viewStore = ViewStore(store, observe: { $0 })","  }","","  var body: some View {","    Text(\"\\(self.viewStore.username)\")","    \/\/ ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…can be written more simply using "},{"type":"codeVoice","code":"WithViewStore"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Text(\"\\(viewStore.username)\")","      \/\/ ...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There may be times where the slightly more verbose style of observing a store is preferred"},{"type":"text","text":" "},{"type":"text","text":"instead of using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":":"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" wraps complex views the Swift compiler can quickly become bogged"},{"type":"text","text":" "},{"type":"text","text":"down, leading to degraded compiler performance and diagnostics. If you are experiencing"},{"type":"text","text":" "},{"type":"text","text":"such instability you should consider manually setting up observation with an"},{"type":"text","text":" "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" property as described above."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes you may want to observe the state in a store in a context that is not a view"},{"type":"text","text":" "},{"type":"text","text":"builder. In such cases "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" will not work since it is intended only for"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI views."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of this is interfacing with SwiftUI’s "},{"type":"codeVoice","code":"App"},{"type":"text","text":" protocol, which uses a separate"},{"type":"text","text":" "},{"type":"codeVoice","code":"@SceneBuilder"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"@ViewBuilder"},{"type":"text","text":". In this case you must use an "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","  let store = StoreOf<AppFeature>(\/* ... *\/)","  @ObservedObject var viewStore: ViewStore<SceneState, CommandAction>","","  struct SceneState: Equatable {","    \/\/ ...","    init(state: AppFeature.State) {","      \/\/ ...","    }","  }","","  init() {","    self.viewStore = ViewStore(","      self.store.scope(","        state: SceneState.init(state:)","        action: AppFeature.Action.scene","      )","    )","  }","","  var body: some Scene {","    WindowGroup {","      MyRootView()","    }","    .commands {","      CommandMenu(\"Help\") {","        Button(\"About \\(self.viewStore.appName)\") {","          self.viewStore.send(.aboutButtonTapped)","        }","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that it is highly discouraged for you to observe "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" of your root store’s state."},{"type":"text","text":" "},{"type":"text","text":"It is almost never needed and will cause many view recomputations leading to poor"},{"type":"text","text":" "},{"type":"text","text":"performance. This is why we construct a separate "},{"type":"codeVoice","code":"SceneState"},{"type":"text","text":" type that holds onto only the"},{"type":"text","text":" "},{"type":"text","text":"state that the view needs for rendering. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},{"type":"text","text":" for more information on this"},{"type":"text","text":" "},{"type":"text","text":"topic."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your view does not need access to any state in the store and only needs to be able to send"},{"type":"text","text":" "},{"type":"text","text":"actions, then you should consider not using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" at all. Instead, you can send"},{"type":"text","text":" "},{"type":"text","text":"actions directly to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" like so:"}]},{"type":"codeListing","syntax":"swift","code":["Button(\"Tap me\") {","  self.store.send(.buttonTapped)","}"]},{"anchor":"Performance","level":2,"type":"heading","text":"Performance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A common performance pitfall when using the library comes from constructing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":"s and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":"s. When constructed naively, using either view store’s initializer"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y"},{"type":"text","text":" or the SwiftUI helper "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", it  will observe"},{"type":"text","text":" "},{"type":"text","text":"every change to state in the store:"}]},{"type":"codeListing","syntax":"swift","code":["WithViewStore(self.store, observe: { $0 }) { viewStore in","  \/\/ This is executed for every action sent into the system","  \/\/ that causes self.store.state to change.","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most of the time this observes far too much state. A typical feature in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture holds onto not only the state the view needs to present UI, but also state that the"},{"type":"text","text":" "},{"type":"text","text":"feature only needs internally, as well as state of child features embedded in the feature."},{"type":"text","text":" "},{"type":"text","text":"Changes to the internal and child state should not cause the view’s body to re-compute since"},{"type":"text","text":" "},{"type":"text","text":"that state is not needed in the view."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if the root of our application was a tab view, then we could model that in state"},{"type":"text","text":" "},{"type":"text","text":"as a struct that holds each tab’s state as a property:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct AppFeature {","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the view only needs to construct the views for each tab, then no view store is even needed"},{"type":"text","text":" "},{"type":"text","text":"because we can pass scoped stores to each child feature view:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    \/\/ No need to observe state changes because the view does","    \/\/ not need access to the state.","    TabView {","      ActivityView(","        store: self.store","          .scope(state: \\.activity, action: \\.activity)","      )","      SearchView(","        store: self.store","          .scope(state: \\.search, action: \\.search)","      )","      ProfileView(","        store: self.store","          .scope(state: \\.profile, action: \\.profile)","      )","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" does not actually need to observe any state changes. This view will only be"},{"type":"text","text":" "},{"type":"text","text":"created a single time, whereas if we observed the store then it would re-compute every time a single"},{"type":"text","text":" "},{"type":"text","text":"thing changed in either the activity, search or profile child features."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If sometime in the future we do actually need some state from the store, we can start to observe"},{"type":"text","text":" "},{"type":"text","text":"only the bare essentials of state necessary for the view to do its job. For example, suppose that"},{"type":"text","text":" "},{"type":"text","text":"we need access to the currently selected tab in state:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct AppFeature {","  enum Tab { case activity, search, profile }","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","    var selectedTab: Tab","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we can observe this state so that we can construct a binding to "},{"type":"codeVoice","code":"selectedTab"},{"type":"text","text":" for the tab view:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      TabView(","        selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) })","      ) {","        ActivityView(","          store: self.store.scope(state: \\.activity, action: \\.activity)","        )","        .tag(AppFeature.Tab.activity)","        SearchView(","          store: self.store.scope(state: \\.search, action: \\.search)","        )","        .tag(AppFeature.Tab.search)","        ProfileView(","          store: self.store.scope(state: \\.profile, action: \\.profile)","        )","        .tag(AppFeature.Tab.profile)","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this style of state observation is terribly inefficient since "},{"type":"emphasis","inlineContent":[{"type":"text","text":"every"}]},{"type":"text","text":" change to"},{"type":"text","text":" "},{"type":"codeVoice","code":"AppFeature.State"},{"type":"text","text":" will cause the view to re-compute even though the only piece of state we"},{"type":"text","text":" "},{"type":"text","text":"actually care about is the "},{"type":"codeVoice","code":"selectedTab"},{"type":"text","text":". The reason we are observing too much state is because"},{"type":"text","text":" "},{"type":"text","text":"we use "},{"type":"codeVoice","code":"observe: { $0 }"},{"type":"text","text":" in the construction of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", which means the view"},{"type":"text","text":" "},{"type":"text","text":"store will observe all of state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To chisel away at the observed state you can provide a closure for that argument that plucks out"},{"type":"text","text":" "},{"type":"text","text":"the state the view needs. In this case the view only needs a single field:"}]},{"type":"codeListing","syntax":"swift","code":["WithViewStore(self.store, observe: \\.selectedTab) { viewStore in","  TabView(selection: viewStore.binding(send: { .tabSelected($0) }) {","    \/\/ ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the future, the view may need access to more state. For example, suppose "},{"type":"codeVoice","code":"Activity.State"},{"type":"text","text":" "},{"type":"text","text":"holds onto an "},{"type":"codeVoice","code":"unreadCount"},{"type":"text","text":" integer to represent how many new activities you have. There’s no"},{"type":"text","text":" "},{"type":"text","text":"need to observe "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" of "},{"type":"codeVoice","code":"Activity.State"},{"type":"text","text":" to get access to this one field. You can observe just"},{"type":"text","text":" "},{"type":"text","text":"the one field."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically you can do this by mapping your state into a tuple, but because tuples are not"},{"type":"text","text":" "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" you will need to provide an explicit "},{"type":"codeVoice","code":"removeDuplicates"},{"type":"text","text":" argument:"}]},{"type":"codeListing","syntax":"swift","code":["WithViewStore(","  self.store,","  observe: { (selectedTab: $0.selectedTab, unreadActivityCount: $0.activity.unreadCount) },","  removeDuplicates: ==",") { viewStore in","  TabView(selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) }) {","    ActivityView(","      store: self.store.scope(state: \\.activity, action: \\.activity)","    )","    .tag(AppFeature.Tab.activity)","    .badge(\"\\(viewStore.unreadActivityCount)\")","","    \/\/ ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, and recommended, you can introduce a lightweight, equatable "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" struct"},{"type":"text","text":" "},{"type":"text","text":"nested inside your view whose purpose is to transform the "},{"type":"codeVoice","code":"Store"},{"type":"text","text":"’s full state into the bare"},{"type":"text","text":" "},{"type":"text","text":"essentials of what the view needs:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  struct ViewState: Equatable {","    let selectedTab: AppFeature.Tab","    let unreadActivityCount: Int","    init(state: AppFeature.State) {","      self.selectedTab = state.selectedTab","      self.unreadActivityCount = state.activity.unreadCount","    }","  }","","  var body: some View {","    WithViewStore(self.store, observe: ViewState.init) { viewStore in","      TabView {","        ActivityView(","          store: self.store","            .scope(state: \\.activity, action: \\.activity)","        )","        .badge(\"\\(viewStore.unreadActivityCount)\")","","        \/\/ ...","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives you maximum flexibility in the future for adding new fields to "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" without"},{"type":"text","text":" "},{"type":"text","text":"making your view convoluted."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique for reducing view re-computations is most effective towards the root of your app"},{"type":"text","text":" "},{"type":"text","text":"hierarchy and least effective towards the leaf nodes of your app. Root features tend to hold"},{"type":"text","text":" "},{"type":"text","text":"lots of state that its view does not need, such as child features, and leaf features tend to"},{"type":"text","text":" "},{"type":"text","text":"only hold what’s necessary. If you are going to employ this technique you will get the most"},{"type":"text","text":" "},{"type":"text","text":"benefit by applying it to views closer to the root. At leaf features and views that need access"},{"type":"text","text":" "},{"type":"text","text":"to most of the state, it is fine to continue using "},{"type":"codeVoice","code":"observe: { $0 }"},{"type":"text","text":" to observe all of the state"},{"type":"text","text":" "},{"type":"text","text":"in the store."}]},{"anchor":"Overview","level":2,"type":"heading","text":"Overview"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"deprecated":true,"role":"symbol","title":"SwitchStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"}],"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"url":"\/documentation\/composablearchitecture\/switchstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/init(_:observe:)-3ak1y":{"conformance":{"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(_:observe:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"observe"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes a view store from a store which observes changes to state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/init(_:observe:)-3ak1y"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"deprecated":true,"role":"symbol","title":"CaseLet","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"abstract":[{"type":"text","text":"A view that handles a specific case of enum state in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CaseLet"}],"url":"\/documentation\/composablearchitecture\/caselet"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"deprecated":true,"role":"symbol","title":"IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"role":"collectionGroup","title":"Deprecations","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuideprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"deprecated":true,"role":"symbol","title":"NavigationLinkStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationLinkStore"}],"abstract":[{"type":"text","text":"A view that controls a navigation presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NavigationLinkStore"}],"url":"\/documentation\/composablearchitecture\/navigationlinkstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/_printChanges(_:)":{"role":"symbol","title":"_printChanges(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"_printChanges"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"WithViewStore","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Prints debug information to the console whenever the view is computed."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/withviewstore\/_printchanges(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/body":{"role":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Content"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/withviewstore\/body"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/View-Implementations":{"role":"collectionGroup","title":"View Implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/view-implementations"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"type":"unresolvable","title":"SwiftUI.View","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"role":"collectionGroup","title":"SwiftUI Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:content:file:line:)-8g15l":{"conformance":{"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Content"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(_:observe:content:file:line:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"observe"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"externalParam","text":"content"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewStore","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initializes a structure that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into an observable "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" in order"},{"type":"text","text":" "},{"type":"text","text":"to compute views from state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:content:file:line:)-8g15l"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"role":"article","title":"Performance","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/DynamicViewContent-Implementations":{"role":"collectionGroup","title":"DynamicViewContent Implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/dynamicviewcontent-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"role":"symbol","title":"NavigationStackStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationStackStore"}],"abstract":[{"type":"text","text":"A navigation stack that is driven by a store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"deprecated":true,"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://ComposableArchitecture/7SwiftUI18DynamicViewContentP":{"type":"unresolvable","title":"SwiftUI.DynamicViewContent","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"deprecated":true,"role":"symbol","title":"ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"deprecated":true,"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"}}}