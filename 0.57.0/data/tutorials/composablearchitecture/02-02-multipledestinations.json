{"variants":[{"paths":["\/tutorials\/composablearchitecture\/02-02-multipledestinations"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Multiple presentation destinations","chapter":"Navigation","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}]}]},{"kind":"tasks","tasks":[{"anchor":"Delete-contacts","title":"Delete contacts","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add a new feature to the contacts list that allows you to delete a contact, but first"},{"type":"text","text":" "},{"type":"text","text":"you must confirm deletion. We will implement the confirmation step using an alert. The tools"},{"type":"text","text":" "},{"type":"text","text":"that we used last section, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":", all work for presenting alerts"},{"type":"text","text":" "},{"type":"text","text":"from optional state too."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-02-01-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift that we worked in from the last section. Add a new action"},{"type":"text","text":" "},{"type":"text","text":"that will be sent when the delete button is tapped on a row in the contacts list."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the delete button is tapped we want to show an alert asking the user to confirm deletion"},{"type":"text","text":" "},{"type":"text","text":"of the contact."}]},{"code":"02-02-01-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a piece of optional "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" state to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" state. We will further use "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" as it allows us to describe all"},{"type":"text","text":" "},{"type":"text","text":"of the details of the alert in a manner that is test friendly since it is "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-01-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new case to the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"’s action that represents the actions that can"},{"type":"text","text":" "},{"type":"text","text":"happen in the alert. We will use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" for this."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The only choices in the alert are to cancel or confirm deletion, but we do not need"},{"type":"text","text":" "},{"type":"text","text":"to model the cancel action. That will be handled automatically for us."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have new state modeled in our domain for the presentation of the alert, we can"},{"type":"text","text":" "},{"type":"text","text":"properly implement the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" action."}]},{"code":"02-02-01-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the delete button is tapped we can populate the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state in order to ask the user"},{"type":"text","text":" "},{"type":"text","text":"to confirm deletion of the contact."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-01-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the alert’s logic into the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" by making another use of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)"},{"type":"text","text":" operator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-01-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Listen for when the confirmation action is sent in the alert, and at that time we can"},{"type":"text","text":" "},{"type":"text","text":"actually remove the element from the array."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to integrate the alert it the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" and implement all of its"},{"type":"text","text":" "},{"type":"text","text":"logic. Next we need to integrate the alert into the view. Just as the library ships a special"},{"type":"text","text":" "},{"type":"codeVoice","code":"sheet(store:)"},{"type":"text","text":" view modifier that is tuned specifically for"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"s, it also comes with a "},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" that serves a similar"},{"type":"text","text":" "},{"type":"text","text":"purpose."}]},{"code":"02-02-01-code-0006","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the "},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" view modifier to the "},{"type":"codeVoice","code":"ContactsView"},{"type":"text","text":", and hand it a store that is"},{"type":"text","text":" "},{"type":"text","text":"scoped to the alert domain."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-01-code-0007","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a button to each row of the contacts list in order to send the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" "},{"type":"text","text":"action to the view store."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the app in the preview to see that deletion works as expected. After tapping the trash"},{"type":"text","text":" "},{"type":"text","text":"icon, an alert shows, and if you confirm deletion the item is removed from the list."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"ch02-sub02-sec01-0000.mov"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ve now added a new feature, that of deleting a contact, but unfortunately our domain"},{"type":"text","text":" "},{"type":"text","text":"is not modeled as concisely as it could be."}]}]},{"anchor":"Improve-domain-modeling","title":"Improve domain modeling","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" can navigate to two possible destinations: either the “Add"},{"type":"text","text":" "},{"type":"text","text":"Contact” sheet or the delete alert. Importantly, it is not possible to be navigated to both"},{"type":"text","text":" "},{"type":"text","text":"destinations at once. However, that currently is possible since we are representing each of"},{"type":"text","text":" "},{"type":"text","text":"those destinations as optional pieces of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of invalid states explodes exponentially when you use optionals to represent"},{"type":"text","text":" "},{"type":"text","text":"features you can navigate to. For example, 2 optionals has 1 invalid state, but 3 optionals"},{"type":"text","text":" "},{"type":"text","text":"has 4 invalid states, and 4 optionals has 11 invalid states. This imprecise domain modeling"},{"type":"text","text":" "},{"type":"text","text":"leaks complexity into your application since you can never truly know which feature is being"},{"type":"text","text":" "},{"type":"text","text":"presented."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s see how to more concisely model our domains for navigating to multiple destinations."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-02-02-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a new reducer, called "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":", nested inside the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"reducer will hold the domain and logic for every feature that can be navigated to from"},{"type":"text","text":" "},{"type":"text","text":"the contacts feature."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" requirement as an enum because we want to express the fact that only"},{"type":"text","text":" "},{"type":"text","text":"one single destination can be active at a time, and enums are perfect for that."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case to the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" enum for each destination feature that can be navigated to, and"},{"type":"text","text":" "},{"type":"text","text":"hold onto that feature’s state. Right now this includes the "},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" and the"},{"type":"text","text":" "},{"type":"text","text":"alert."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" requirement as an enum."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case to the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum for each destination feature that can be navigated to, and"},{"type":"text","text":" "},{"type":"text","text":"hold onto that feature’s action."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-swift.property-8lumc"},{"type":"text","text":" of the reducer."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0006","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Compose all of the destination features together by using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" reducer to focus on the domain of a reducer. Typically"},{"type":"text","text":" "},{"type":"text","text":"you will need one "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" reducer for each destination except for"},{"type":"text","text":" "},{"type":"text","text":"alerts and confirmation dialogs since they do not have a reducer of their own."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0007","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two pieces of optional "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" with a"},{"type":"text","text":" "},{"type":"text","text":"single option pointed at "},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0008","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two action cases that held onto "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" "},{"type":"text","text":"with a single case that holds onto "},{"type":"codeVoice","code":"Destination.Action"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now our model is more concisely defined, and we have compile time guarantees that only"},{"type":"text","text":" "},{"type":"text","text":"one destination can be active at a time. But, also now have a lot of compiler errors we need"},{"type":"text","text":" "},{"type":"text","text":"to fix."}]},{"code":"02-02-02-code-0009","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of populating a piece of "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" optional state in order to drive navigation"},{"type":"text","text":" "},{"type":"text","text":"to that feature, we will now mutate "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" to point it to the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0010","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And when listening for actions happening in child domains we now need to destructure the"},{"type":"text","text":" "},{"type":"codeVoice","code":".destination(.presented(_))"},{"type":"text","text":" case, such as when the “Add Contact” feature tells us to"},{"type":"text","text":" "},{"type":"text","text":"save the contact."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0011","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And when the alert confirms deletion of the contact."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0012","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the state mutation for showing an alert to instead point the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" case."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0013","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":"s that were used at the bottom of the reducer with a single one that"},{"type":"text","text":" "},{"type":"text","text":"runs the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer whenever the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to convert two independent, imprecisely modeled optional values into a"},{"type":"text","text":" "},{"type":"text","text":"single optional enum, and we can now prove that only one destination can be active at a time."},{"type":"text","text":" "},{"type":"text","text":"All that is left is to update the view so that we can specify which case of the destination"},{"type":"text","text":" "},{"type":"text","text":"enum drives the sheet and alert."}]},{"code":"02-02-02-code-0014","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There is an additional overload of "},{"type":"codeVoice","code":"sheet(store:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" that takes two extra"},{"type":"text","text":" "},{"type":"text","text":"arguments: a state transformation for extracting a particular case from the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":" enum, and an action transformation for embedding a child action into"},{"type":"text","text":" "},{"type":"text","text":"a particular case of the "},{"type":"codeVoice","code":"Destination.Action"},{"type":"text","text":" enum."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0015","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The state transformation is responsible for taking a piece of "},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":", which"},{"type":"text","text":" "},{"type":"text","text":"is an enum, and extracting a particular case from it. We can do this by using a case path"},{"type":"text","text":" "},{"type":"text","text":"derived from the "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0016","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The action transformation is responsible for taking a child action in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" domain and embedding it into the "},{"type":"codeVoice","code":"Destination.Action"},{"type":"text","text":" enum. This can"},{"type":"text","text":" "},{"type":"text","text":"be done by using the case of the enum as a function."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-02-02-code-0017","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The same can be done for the "},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" view modifier."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That completes the refactor of the reducer and view to use a single piece of optional enum"},{"type":"text","text":" "},{"type":"text","text":"state instead using multiple optional values. The application works exactly as it did before,"},{"type":"text","text":" "},{"type":"text","text":"but now its domain is more concisely modeled."}]}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Testing presentation","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Multiple presentation destinations","categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"02-02-02-code-0006":{"syntax":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","    enum Action: Equatable {","      case addContact(AddContactFeature.Action)","      case alert(ContactsFeature.Action.Alert)","    }","    var body: some ReducerOf<Self> {","      Scope(state: \/State.addContact, action: \/Action.addContact) {","        AddContactFeature()","      }","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0006","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14}]},"02-02-01-code-0002":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-01-code-0002","type":"file","fileType":"swift","highlights":[{"line":10},{"line":13}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"role":"project","title":"Multiple presentation destinations","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"role":"pseudoSymbol","title":"Managing a timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"02-02-02-code-0010":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0010","type":"file","fileType":"swift","highlights":[{"line":25}]},"02-02-01-code-0006":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            Text(contact.name)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(","        state: \\.$addContact,","        action: { .addContact($0) }","      )","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(","        state: \\.$alert,","        action: { .alert($0) }","      )","    )","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-01-code-0006","type":"file","fileType":"swift","highlights":[{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39}]},"02-02-02-code-0005":{"syntax":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","    enum Action: Equatable {","      case addContact(AddContactFeature.Action)","      case alert(ContactsFeature.Action.Alert)","    }","    var body: some ReducerOf<Self> {","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0005","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","title":"Contact detail feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","title":"Testing the add contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"02-02-02-code-0014":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: ,","      action:","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: ,","      action:","    )","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0014","type":"file","fileType":"swift","highlights":[{"line":34},{"line":35},{"line":36},{"line":43},{"line":44},{"line":45}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"role":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/composablearchitecture\/scope"},"02-02-02-code-0011":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0011","type":"file","fileType":"swift","highlights":[{"line":29}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)":{"role":"symbol","title":"ifLet(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_PresentationReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:line:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"role":"pseudoSymbol","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","title":"PresentationAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"role":"pseudoSymbol","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail"},"02-02-02-code-0001":{"syntax":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0001","type":"file","fileType":"swift","highlights":[{"line":3},{"line":4}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"role":"project","title":"Your first presentation","estimatedTime":"30min","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"role":"article","title":"Navigation","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app"},"02-02-02-code-0013":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0013","type":"file","fileType":"swift","highlights":[{"line":46},{"line":47}]},"02-02-02-code-0002":{"syntax":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0002","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5}]},"02-02-02-code-0009":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0009","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21}]},"02-02-01-code-0004":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-01-code-0004","type":"file","fileType":"swift","highlights":[{"line":46}]},"02-02-02-code-0003":{"syntax":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","    enum Action: Equatable {","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0003","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8}]},"02-02-01-code-0001":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-01-code-0001","type":"file","fileType":"swift","highlights":[{"line":4},{"line":11},{"line":12}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","title":"Essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"02-02-02-code-0016":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: ,","      action:","    )","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0016","type":"file","fileType":"swift","highlights":[{"line":36}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-swift.property-8lumc":{"defaultImplementations":1,"role":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Body"}],"abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-swift.property-8lumc","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-swift.property-8lumc"},"02-02-02-code-0012":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0012","type":"file","fileType":"swift","highlights":[{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":42}]},"02-02-01-code-0000":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-01-code-0000","type":"file","fileType":"swift","highlights":[{"line":9},{"line":26},{"line":27},{"line":28}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","title":"Improve domain modeling","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"role":"pseudoSymbol","title":"Child-to-parent communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"role":"pseudoSymbol","title":"Testing effects","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","title":"PresentationState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"role":"pseudoSymbol","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"02-02-02-code-0008":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0008","type":"file","fileType":"swift","highlights":[{"line":9}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"role":"pseudoSymbol","title":"What is a side effect?","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect"},"02-02-02-code-0004":{"syntax":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","    enum State: Equatable {","      case addContact(AddContactFeature.State)","      case alert(AlertState<ContactsFeature.Action.Alert>)","    }","    enum Action: Equatable {","      case addContact(AddContactFeature.Action)","      case alert(ContactsFeature.Action.Alert)","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0004","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"02-02-02-code-0015":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action:","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: ,","      action:","    )","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0015","type":"file","fileType":"swift","highlights":[{"line":35}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"role":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture"},"02-02-02-code-0017":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.alert,","      action: ContactsFeature.Destination.Action.alert","    )","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0017","type":"file","fileType":"swift","highlights":[{"line":44},{"line":45}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"role":"pseudoSymbol","title":"Create a reducer","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"role":"project","title":"Adding side effects","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"02-02-01-code-0007":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStack {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(","        state: \\.$addContact,","        action: { .addContact($0) }","      )","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(","        state: \\.$alert,","        action: { .alert($0) }","      )","    )","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-01-code-0007","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}]},"02-02-01-code-0005":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-01-code-0005","type":"file","fileType":"swift","highlights":[{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"role":"pseudoSymbol","title":"Testing state changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"02-02-02-code-0007":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","","      case .alert:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \/Action.alert)","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0007","type":"file","fileType":"swift","highlights":[{"line":4}]},"02-02-01-code-0003":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    @PresentationState var addContact: AddContactFeature.State?","    @PresentationState var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action: Equatable {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","","      case .addContact:","        return .none","","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \/Action.addContact) {","      AddContactFeature()","    }","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-01-code-0003","type":"file","fileType":"swift","highlights":[{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","estimatedTime":"20min","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","title":"Testing your feature","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"02-02-02-code-0000":{"syntax":"swift","content":["extension ContactsFeature {","  struct Destination: Reducer {","  }","}"],"fileName":"ContactsFeatures.swift","identifier":"02-02-02-code-0000","type":"file","fileType":"swift","highlights":[]},"ch02-sub02-sec01-0000.mov":{"poster":null,"alt":null,"type":"video","identifier":"ch02-sub02-sec01-0000.mov","variants":[{"url":"\/videos\/ch02-sub02-sec01-0000.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"role":"project","title":"Testing presentation","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation"}}}