{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"projectedValue"},{"kind":"text","text":": `Self`"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" "},{"kind":"keyword","text":"set"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the projected value to derive bindings from a view store with properties annotated with"},{"type":"text","text":" "},{"type":"codeVoice","code":"@BindableState"},{"type":"text","text":". To get the "},{"type":"codeVoice","code":"projectedValue"},{"type":"text","text":", prefix the property with "},{"type":"codeVoice","code":"$"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["TextField(\"Display name\", text: viewStore.binding(\\.$displayName))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState"},{"type":"text","text":" for more details."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindablestate\/projectedvalue"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/projectedValue","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A projection that can be used to derive bindings from a view store."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"projectedValue"},{"kind":"text","text":": `Self`"}],"title":"projectedValue","roleHeading":"Instance Property","role":"symbol","symbolKind":"property","externalID":"s:22ComposableArchitecture13BindableStateV14projectedValueACyxGvp","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState"]]},"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI":{"role":"collectionGroup","title":"SwiftUI Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState/projectedValue":{"role":"symbol","title":"projectedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"projectedValue"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"A projection that can be used to derive bindings from a view store."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState\/projectedValue","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/bindablestate\/projectedvalue"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/BindableState":{"role":"symbol","title":"BindableState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableState"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly"},{"type":"text","text":" "},{"type":"text","text":"bindable in SwiftUI views."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableState"}],"url":"\/documentation\/composablearchitecture\/bindablestate"}}}