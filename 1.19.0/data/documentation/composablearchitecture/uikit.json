{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"inlineContent":[{"text":"While the Composable Architecture was designed with SwiftUI in mind, it comes with tools to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"integrate into application code written in UIKit."}],"type":"paragraph"}]}],"abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/uikit"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"sections":[],"topicSections":[{"title":"Combine integration","anchor":"Combine-integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"]}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"roleHeading":"API Collection","role":"collectionGroup","title":"UIKit Integration"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"],"generated":true,"anchor":"Integrations","title":"Integrations"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"title":"Adopting Swift concurrency","url":"\/documentation\/composablearchitecture\/swiftconcurrency","type":"topic","abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","kind":"article","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"role":"symbol","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"code":"nil","type":"codeVoice"},{"text":" or not, and","type":"text"},{"type":"text","text":" "},{"text":"whenever this condition changes for as long as the cancellable lives.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable"}],"type":"topic","title":"ifLet(then:else:)","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"role":"article","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"url":"\/documentation\/composablearchitecture\/observationbackport","type":"topic","title":"Observation backport","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"symbol","title":"ComposableArchitecture","type":"topic","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"role":"collectionGroup","type":"topic","title":"SwiftUI Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"url":"\/documentation\/composablearchitecture\/store\/publisher","type":"topic","abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"role":"symbol","title":"publisher","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"text":": ","kind":"text"},{"text":"StorePublisher","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"url":"\/documentation\/composablearchitecture\/viewstore\/publisher","deprecated":true,"type":"topic","abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"role":"symbol","title":"publisher","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"text":"StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","kind":"symbol"}}}