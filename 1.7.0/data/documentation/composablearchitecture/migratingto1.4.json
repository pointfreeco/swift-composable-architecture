{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"type":"text","text":" "},{"type":"text","text":"APIs, and this article contains some tips for doing so."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Using-the-Reducer-macro"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Using-case-key-paths"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Receiving-test-store-actions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Moving-off-of-TaskResult"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Identified-actions"}]}]}]},{"anchor":"Using-the-Reducer-macro","level":3,"type":"heading","text":"Using the @Reducer macro"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":". It is called "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":", and to migrate existing code one only needs to annotate"},{"type":"text","text":" "},{"type":"text","text":"their type with "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of"},{"type":"text","text":" "},{"type":"text","text":"reducer composition, such as case key paths (see guides below). See the documentation of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" to see everything that macro adds to your feature’s reducer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also technically drop the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" conformance:"}]},{"type":"codeListing","syntax":"diff","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break."},{"type":"text","text":" "},{"type":"text","text":"See the documentation of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()#Gotchas"},{"type":"text","text":" for more gotchas on using the "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro."}]},{"anchor":"Using-case-key-paths","level":3,"type":"heading","text":"Using case key paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 we soft-deprecated many APIs that take the "},{"type":"codeVoice","code":"CasePath"},{"type":"text","text":" type in favor of APIs that take"},{"type":"text","text":" "},{"type":"text","text":"what is known as a "},{"type":"codeVoice","code":"CaseKeyPath"},{"type":"text","text":". Both of these types come from our "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"type":"text","text":" "},{"type":"text","text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do"},{"type":"text","text":" "},{"type":"text","text":"so with structs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths"},{"type":"text","text":" "},{"type":"text","text":"that massively improved the ergonomics of using case paths. We introduced the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro"},{"type":"text","text":" "},{"type":"text","text":"for automatically deriving case paths so that we could stop using runtime reflection, and we"},{"type":"text","text":" "},{"type":"text","text":"introduced a way of using key paths to describe case paths. And so the old "},{"type":"codeVoice","code":"CasePath"},{"type":"text","text":" type has been"},{"type":"text","text":" "},{"type":"text","text":"deprecated, and the new "},{"type":"codeVoice","code":"CaseKeyPath"},{"type":"text","text":" type has taken its place."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that previously when you would use APIs involving case paths you would have to use the"},{"type":"text","text":" "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator to derive the case path. For example:"}]},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You now get to shorten that into a far simpler, more familiar key path syntax:"}]},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" conformances with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which automatically applies the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro to the feature’s "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum among other"},{"type":"text","text":" "},{"type":"text","text":"things:"}]},{"type":"codeListing","syntax":"diff","code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the feature’s "},{"type":"codeVoice","code":"State"},{"type":"text","text":" is an enum, "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" will also be applied."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To form a case key path for any other enum, you must apply the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro explicitly:"}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator for case paths you should now be able to use"},{"type":"text","text":" "},{"type":"text","text":"key path syntax, so long as all of the enums involved are "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you encounter any problems, create a "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},{"type":"text","text":" on the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture repo."}]},{"anchor":"Receiving-test-store-actions","level":3,"type":"heading","text":"Receiving test store actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The power of case key paths and the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro has made it possible to massively simplify"},{"type":"text","text":" "},{"type":"text","text":"how one asserts on actions received in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":". Instead of constructing the concrete action"},{"type":"text","text":" "},{"type":"text","text":"received from an effect like this:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…you can use key path syntax to describe the nesting of action cases that is received:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.presented.response.success)"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Case key path syntax requires that every nested action is "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":". Reducer actions"},{"type":"text","text":" "},{"type":"text","text":"are typically "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" automatically via the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, but other enums must be"},{"type":"text","text":" "},{"type":"text","text":"explicitly annotated:"}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in the case of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" you can even omit the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},{"type":"text","text":" "},{"type":"text","text":"path component:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.response.success)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This does not assert on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"data"}]},{"type":"text","text":" received in the action, but typically that is already covered"},{"type":"text","text":" "},{"type":"text","text":"by the state assertion made inside the trailing closure of "},{"type":"codeVoice","code":"receive"},{"type":"text","text":". And if you use this style of"},{"type":"text","text":" "},{"type":"text","text":"action receiving exclusively, you can even stop conforming your action types to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few advanced situations to be aware of. When receiving an action that involves an"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"type":"text","text":" (more information below in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions"},{"type":"text","text":"), then"},{"type":"text","text":" "},{"type":"text","text":"you can use the subscript "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"receive a particular action for an element:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.rows[id: 0].response.success)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And the same goes for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" too:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.path[id: 0].response.success)"]},{"anchor":"Moving-off-of-TaskResult","level":3,"type":"heading","text":"Moving off of TaskResult"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 of the library, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" was soft-deprecated and eventually will be fully"},{"type":"text","text":" "},{"type":"text","text":"deprecated and then removed. The original rationale for the introduction of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" was to"},{"type":"text","text":" "},{"type":"text","text":"make an equatable-friendly version of "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" for when the error produced was "},{"type":"codeVoice","code":"any Error"},{"type":"text","text":", which is"},{"type":"text","text":" "},{"type":"text","text":"not equatable. And the reason to want an equatable-friendly result is so that the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" type in"},{"type":"text","text":" "},{"type":"text","text":"reducers can be equatable, and the reason for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"type":"text","text":" is to make it possible to test actions"},{"type":"text","text":" "},{"type":"text","text":"emitted by effects."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically in tests, when one wants to assert that the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" received an action you must"},{"type":"text","text":" "},{"type":"text","text":"specify a concrete action:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" uses the equatable conformance of "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" to confirm that you are asserting that"},{"type":"text","text":" "},{"type":"text","text":"the store received the correct action."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this becomes verbose when testing deeply nested features, which is common in integration"},{"type":"text","text":" "},{"type":"text","text":"tests:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, with the introduction of "},{"overridingTitleInlineContent":[{"type":"text","text":"case key paths"}],"isActive":true,"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","overridingTitle":"case key paths"},{"type":"text","text":" we greatly improved the"},{"type":"text","text":" "},{"type":"text","text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the"},{"type":"text","text":" "},{"type":"text","text":"case of the enum you expect to receive, and you can even omit the associated data from the action"},{"type":"text","text":" "},{"type":"text","text":"since typically that is covered in the state assertion:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And this syntax does not require the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to be equatable since we are only asserting that"},{"type":"text","text":" "},{"type":"text","text":"the case of the action was received. We are not testing the data in the action."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We feel that with this better syntax there is less of a reason to have "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" and so we"},{"type":"text","text":" "},{"type":"text","text":"do plan on removing it eventually. If you have an important use case for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" that you"},{"type":"text","text":" "},{"type":"text","text":"think merits it being in the library, please "},{"overridingTitleInlineContent":[{"type":"text","text":"open a discussion"}],"isActive":true,"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","overridingTitle":"open a discussion"},{"type":"text","text":"."}]},{"anchor":"Identified-actions","level":3,"type":"heading","text":"Identified actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 of the library we introduced the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"type":"text","text":" type which makes it more"},{"type":"text","text":" "},{"type":"text","text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would"},{"type":"text","text":" "},{"type":"text","text":"have a case in your "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum for a particular row that holds the ID of the state being acted"},{"type":"text","text":" "},{"type":"text","text":"upon as well as the action:"}]},{"type":"codeListing","syntax":"swift","code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be updated to hold onto "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"type":"text","text":" instead of those piece of data directly in the"},{"type":"text","text":" "},{"type":"text","text":"case:"}]},{"type":"codeListing","syntax":"swift","code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in the reducer, instead of invoking "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:line:)-65nr1"},{"type":"text","text":" "},{"type":"text","text":"with a case path using the "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator:"}]},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…you will instead use key path syntax to determine which case of the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum holds the"},{"type":"text","text":" "},{"type":"text","text":"identified action:"}]},{"type":"codeListing","syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"type":"text","text":" "},{"type":"text","text":"type-inference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One last change you will need to make is anywhere you are destructuring the old-style action you"},{"type":"text","text":" "},{"type":"text","text":"will need to insert a "},{"type":"codeVoice","code":".element"},{"type":"text","text":" layer:"}]},{"type":"codeListing","syntax":"diff","code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.4"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Migrating to 1.4","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"seeAlsoSections":[{"title":"Migration guides","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"role":"symbol","title":"subscript(id:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"AnyCasePath","preciseIdentifier":"s:9CasePaths03AnyA4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"IdentifiedAction","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"deprecated":true,"role":"symbol","title":"ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore"},"#Moving-off-of-TaskResult":{"title":"Moving off of TaskResult","titleInlineContent":[{"type":"text","text":"Moving off of "},{"type":"codeVoice","code":"TaskResult"}],"type":"link","identifier":"#Moving-off-of-TaskResult","url":"#Moving-off-of-TaskResult"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"deprecated":true,"role":"symbol","title":"TaskResult","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"url":"\/documentation\/composablearchitecture\/taskresult"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"role":"article","title":"Migrating to 1.6","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:file:line:)-dkei"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method when you need to assert on the payload inside an action received."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"role":"article","title":"Migrating to 1.5","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.5"},"#Using-the-Reducer-macro":{"title":"Using the @Reducer macro","titleInlineContent":[{"type":"text","text":"Using the @Reducer macro"}],"type":"link","identifier":"#Using-the-Reducer-macro","url":"#Using-the-Reducer-macro"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:file:line:)-dkei":{"role":"symbol","title":"receive(_:_:timeout:assert:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:s8DurationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Asserts an action was received matching a case path with a specific payload, and asserts"},{"type":"text","text":" "},{"type":"text","text":"how the state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:file:line:)-dkei","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:file:line:)-dkei"},"#Identified-actions":{"title":"Identified actions","titleInlineContent":[{"type":"text","text":"Identified actions"}],"type":"link","identifier":"#Identified-actions","url":"#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"role":"symbol","title":"PresentationAction.presented(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"An action sent to the associated, non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)"},"#Using-case-key-paths":{"title":"Using case key paths","titleInlineContent":[{"type":"text","text":"Using case key paths"}],"type":"link","identifier":"#Using-case-key-paths","url":"#Using-case-key-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","title":"PresentationAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"deprecated":true,"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()#Gotchas":{"abstract":[],"title":"Gotchas","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()#Gotchas","url":"\/documentation\/composablearchitecture\/reducer()#Gotchas"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"title":"discussion","titleInlineContent":[{"type":"text","text":"discussion"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"deprecated":true,"role":"symbol","title":"IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"role":"article","title":"Migrating to 1.7","abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":", and more."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"role":"symbol","title":"StackAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"url":"\/documentation\/composablearchitecture\/stackaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"role":"symbol","title":"IdentifiedAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdentifiedAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IdentifiedAction"}],"url":"\/documentation\/composablearchitecture\/identifiedaction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"abstract":[],"title":"Identified actions","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:line:)-65nr1":{"role":"symbol","title":"forEach(_:action:element:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ElementState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ElementAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"IdentifiedArray","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyCasePath","preciseIdentifier":"s:9CasePaths03AnyA4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementAction"},{"kind":"text","text":")>, "},{"kind":"externalParam","text":"element"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_ForEachReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:line:)-65nr1","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:line:)-65nr1"},"#Receiving-test-store-actions":{"title":"Receiving test store actions","titleInlineContent":[{"type":"text","text":"Receiving test store actions"}],"type":"link","identifier":"#Receiving-test-store-actions","url":"#Receiving-test-store-actions"},"http://github.com/pointfreeco/swift-case-paths":{"title":"CasePaths","titleInlineContent":[{"type":"text","text":"CasePaths"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"}}}