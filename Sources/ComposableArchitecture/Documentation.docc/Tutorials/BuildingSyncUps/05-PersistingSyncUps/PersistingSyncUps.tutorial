@Tutorial(time: 5) {
  @Intro(title: "Persisting sync-ups") {
    Now that we have the ability to add and remove sync-ups from the application, let's add some 
    persistence. This will involve using the "shared state" tools from the library, such as
    `@Shared` and `fileStorage`.
  }
    
  @Section(title: "Persisting data to disk") {
    @ContentAndMedia {
      To persist state to an external system you must make use of the `@Shared` property wrapper
      with a persistence strategy.
    }
      
    @Steps {
      @Step {
        Go back to the SyncUpsList.swift file, and start by applying the `@Shared` property wrapper
        to the `syncUps` field.
        
        > Note: Our changes will not compile right now, but they will soon.
        
        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0001.swift, previousFile: PersistingSyncUps-01-code-0001-previous.swift)
      }
      
      This signifies that this value will be shared with other parts of the application. There are
      many ways to share state, such as explicitly passing it in from a parent feature, or 
      persisting it to an external system. See the dedicated article <doc:SharingState> for more
      information on all of the various strategies.
      
      @Step {
        Further customize the `@Shared` property wrapper with a persistence strategy. The library
        comes with a few strategies you can use, but the most appropriate here is `fileStorage`
        since we are trying to save a complex data structure.
        
        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0002.swift)
      }
      
      The `fileStorage` persistence strategy saves data to disk anytime the value in `@Shared`
      changes, but it spaces the saves out a bit so as to not thrash the file system with every
      single change.
      
      @Step {
        The `fileStorage` persistence strategy
        needs to be provided a URL for where to save the data. Add an extension to `URL` at the
        bottom of the file to define such a URL, and then provide it to the `.fileStorage` value.
        
        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0003.swift)
      }

      While the property is now compiling, there are several compiler errors where we were
      previously mutating the `syncUps` property, each with a diagnostic that tells us the changes
      we must make, which is to mutate through the projected value's `withLock` method.

      @Step {
        Update each direct mutation to use `withLock` on the projected value of the `syncUps`
        property, instead.
        
        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0004.swift)
        
        > Note: For more information on why `withLock` is required, see
        > [Mutating shared state](https://swiftpackageindex.com/pointfreeco/swift-sharing/main/documentation/sharing/mutatingsharedstate).
      }

      It is worth noting that `fileStorage` only
      works with `Codable` data types, and earlier in the tutorial when we added models to
      Models.swift we made them codable from the beginning.

      @Step {
        Before moving on, we can still make this better.
        It is possible to provide some type safety between the URL provided and the expected
        type of data to be stored on disk, and make usage more concise. See 
        [type-safe keys](<doc:SharingState#Type-safe-keys>) for more information.
        
        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0005.swift)
      }
            
      @Step {
        We have one more error in the preview of the `SyncUpsListView`. To prepare its list of
        sync-ups we can initialize a `@Shared` property to the `.syncUps` persistence strategy and
        provide a mock.
  
        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0006.swift, previousFile: PersistingSyncUps-01-code-0006-previous.swift)
      }

      With that last change the project should be compiling. To confirm that persistence works 
      we need to run the app in the simulator, but we haven't done that yet in this tutorial. 
      To do that we need to update the entry point of the app to use the `SyncUpsListView`.
      
      @Step {
        Go to SyncUpsApp.swift and update the root view to be a `NavigationStack` wrapping a 
        `SyncUpsListView`.
        
        > Note: We construct the ``ComposableArchitecture/Store`` as a static so that it is 
        initialized only one time, and so that it is not created while running Xcode previews.
        
        @Code(name: "SyncUpsApp.swift", file: PersistingSyncUps-01-code-0007.swift)
      }
      
      @Step {
        Run the app in the simulator, add a sync-up, and then relaunch the application to see that
        it restores the previously created sync-up. This shows that data is persisting.
        
        @Video(source: PersistingSyncUps-01-video-0008.mov)
      }
    }
  }
  
  @Section(title: "Testing persistence") {
    @ContentAndMedia {
      Testing state that is held in `@Shared` with `.fileStorage` persistence works 
      exactly like regular state without `@Shared`. The 
      ``ComposableArchitecture/TestStore`` forces you to exhaustively prove how all state changes.
    }
    
    @Steps {
      Before anything, we need to fix a few compiler errors. We'll start with the initialization
      of the sync-ups in the `deletion()` test.

      To provide a specific shared value to a test, we can do the same as we did in the preview,
      where we pointed the `@Shared` property wrapper to the `.syncUps` persistence strategy and
      provided a default.

      @Step {
        Go to `SyncUpsListTests.swift` and provide a default sync-ups value to the `@Shared`
        property wrapper that includes the sync-up we will delete.

        > Note: The `fileStorage` persistence strategy uses an internal dependency for changing how
        > files are written to the disk and loaded from disk. In tests the dependency will forgo any
        > interaction with the file system and instead write data to a `[URL: Data]` dictionary, and
        > load data from that dictionary. That emulates how the file system works, but without
        > persisting any data to the global file system.

        @Code(name: "SyncUpsListTests.swift", file: PersistingSyncUps-02-code-0001.swift, previousFile: PersistingSyncUps-02-code-0001-previous.swift)
      }

      @Step {
        Next, we need to update the way we mutate the sync-ups by using the `withLock` method on its 
        projected value.

        @Code(name: "SyncUpsListTests.swift", file: PersistingSyncUps-02-code-0002.swift)
      }

      With that, we should be in compiling order.

      @Step {
        Run the test suite to see that everything still passes. 
      }
      
      @Step {
        Make a change to the `addSyncUp` test to make an incorrect assertion.
        
        @Code(name: "SyncUpsListTests.swift", file: PersistingSyncUps-02-code-0003.swift)
      }
      
      @Step {
        Run the test suite again to see that you get a test failure with a message that tells you
        exactly what went wrong.
      }
      
      This shows that the exhaustive testing tools of the Composable Architecture continue to work
      exactly the same, even when dealing with globally shared state that is persisted to disk. Be
      sure to read the full article <doc:SharingState> for more information about shared state and
      persistence.
    }
  }
}
