{"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","interfaceLanguage":"swift"},"sections":[{"kind":"hero","content":[{"type":"paragraph","inlineContent":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"text":" ","type":"text"},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"text":" ","type":"text"},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"text":"fragile.","type":"text"}]}],"title":"Testing the add sync-up flow","estimatedTimeInMinutes":10,"chapter":"Presenting the sync-up form"},{"tasks":[{"title":"Adding a sync-up","anchor":"Adding-a-sync-up","stepsSection":[{"content":[{"inlineContent":[{"text":"These new tests will go in the SyncUpsListTests.swift file since we are testing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"integration of the list feature with the form feature. We already have one, very simple test"},{"type":"text","text":" "},{"text":"in this file for the deletion logic (code is currently omitted from the snippet). Add a new","type":"text"},{"type":"text","text":" "},{"type":"text","text":"test method for the flow of adding a sync-up."}],"type":"paragraph"}],"code":"TestingSyncUpFormPresentation-01-code-0001.swift","runtimePreview":null,"media":null,"type":"step","caption":[]},{"content":[{"inlineContent":[{"text":"As with every test in the Composable Architecture, we start by creating a","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" for the feature we are testing. We will start the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature in a state with no sync-ups."}],"type":"paragraph"}],"code":"TestingSyncUpFormPresentation-01-code-0002.swift","caption":[],"media":null,"runtimePreview":null,"type":"step"},{"code":"TestingSyncUpFormPresentation-01-code-0003.swift","runtimePreview":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user tapping on the “+” button in the top-right of the interface by sending the","type":"text"},{"type":"text","text":" "},{"code":"addSyncUpButtonTapped","type":"codeVoice"},{"type":"text","text":" action. When that action is sent we expect the "},{"type":"codeVoice","code":"addSyncUp"},{"text":" state to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"be populated, representing that the sheet should appear."}]}],"media":null},{"code":"TestingSyncUpFormPresentation-01-code-0004.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Run the test to see that unfortunately it fails.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"caption":[]},{"type":"paragraph","inlineContent":[{"text":"The problem is similar to what we encountered while writing tests for the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"feature. We are using an uncontrolled dependency in the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature for generating"},{"text":" ","type":"text"},{"type":"text","text":"UUIDs. We now need to control that dependency."}]},{"code":"TestingSyncUpFormPresentation-01-code-0005.swift","type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Go to SyncUpsList.swift and add a dependency on the UUID generator."}],"type":"paragraph"}],"caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"Use the controlled UUID generator rather than reaching out the global, uncontrolled UUID"},{"text":" ","type":"text"},{"text":"initializer.","type":"text"}],"type":"paragraph"}],"type":"step","code":"TestingSyncUpFormPresentation-01-code-0006.swift","media":null,"caption":[],"runtimePreview":null},{"code":"TestingSyncUpFormPresentation-01-code-0007.swift","type":"step","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to SyncUpsListTests.swift and override the "},{"code":"uuid","type":"codeVoice"},{"text":" dependency to be ","type":"text"},{"code":".incrementing","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This way we can predict what UUIDs will be generated by the feature in tests.","type":"text"}]}],"media":null},{"inlineContent":[{"text":"Now we can predict what UUIDs will be generated in the feature. The first time a UUID is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"created it will be 00000000-0000-0000-0000-000000000000. Then the next time it will be"},{"type":"text","text":" "},{"text":"00000000-0000-0000-0000-000000000001. And on, and on, and on…","type":"text"}],"type":"paragraph"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Update the assertion to confirm that the newly created ","type":"text"},{"type":"codeVoice","code":"SyncUp"},{"type":"text","text":" should have an ID that is"},{"type":"text","text":" "},{"text":"the UUID with all 0s.","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","code":"TestingSyncUpFormPresentation-01-code-0008.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the test passes with flying colors!"}]},{"type":"paragraph","inlineContent":[{"text":"But we also haven’t tested too much yet. We’ve just confirmed that when the user taps the “+”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that some state in the feature is populated. Let’s now emulate the user making some changes to"},{"type":"text","text":" "},{"type":"text","text":"the sync-up in the form, and then confirming the addition of the sync-up to the root list."}]},{"media":null,"type":"step","caption":[{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are using key path syntax to describe the nested action to send."}]}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user editing some details of the sync-up. To do this we need to send an action","type":"text"},{"type":"text","text":" "},{"text":"in the sync-up form’s domain, which can be done by sending a nested enum action that","type":"text"},{"type":"text","text":" "},{"text":"represents an action in the ","type":"text"},{"type":"codeVoice","code":"addSyncUp"},{"text":" domain.","type":"text"}]}],"code":"TestingSyncUpFormPresentation-01-code-0009.swift","runtimePreview":null},{"type":"step","runtimePreview":null,"caption":[],"media":null,"code":"TestingSyncUpFormPresentation-01-code-0010.swift","content":[{"inlineContent":[{"type":"text","text":"Inside the "},{"code":".addSyncUp","type":"codeVoice"},{"text":" case we can send any action in the ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":" domain. In","type":"text"},{"type":"text","text":" "},{"type":"text","text":"particular we know that the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" has a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":" "},{"text":"that was used to bind the ","type":"text"},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" to various UI controls in the view. We can send a binding"},{"type":"text","text":" "},{"type":"text","text":"action by chaining onto "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/binding(_:)"},{"type":"text","text":":"}],"type":"paragraph"}]},{"caption":[],"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Inside the "},{"code":".binding","type":"codeVoice"},{"type":"text","text":" case we can further chain onto any field in the feature’s state"},{"type":"text","text":" "},{"type":"text","text":"to update it. Construct a new "},{"type":"codeVoice","code":"SyncUp"},{"type":"text","text":" that represents the edits that are made by the user,"},{"text":" ","type":"text"},{"type":"text","text":"and assert on how we expect the state to change."}],"type":"paragraph"}],"code":"TestingSyncUpFormPresentation-01-code-0011.swift","media":null},{"inlineContent":[{"text":"Run the test to see that it passes!","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We have now emulated the user opening the “Add sync-up” sheet and making some edits to the"},{"type":"text","text":" "},{"type":"text","text":"sync-up. Let’s tie the knot by now emulating the user confirming to add the sync-up to the"},{"text":" ","type":"text"},{"text":"root list.","type":"text"}],"type":"paragraph"},{"media":null,"caption":[],"code":"TestingSyncUpFormPresentation-01-code-0012.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping on the “Add” button in the sheet."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Run the test to see that we get a failure.","type":"text"}]}],"code":"TestingSyncUpFormPresentation-01-code-0013.swift","runtimePreview":null,"type":"step","caption":[],"media":null},{"inlineContent":[{"text":"This is happening because when the addition of the sync-up is confirmed, the root","type":"text"},{"type":"text","text":" "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" feature mutates its state to add the sync-up, and it clears out the "},{"code":"addSyncUp","type":"codeVoice"},{"text":" ","type":"text"},{"text":"state in order to dismiss the sheet. The ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" forces us to"},{"type":"text","text":" "},{"type":"text","text":"assert on "},{"type":"emphasis","inlineContent":[{"text":"everything","type":"text"}]},{"type":"text","text":" happening in the feature so that if someday we accidentally remove"},{"type":"text","text":" "},{"text":"that dismissal logic we will instantly get a test failure.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Let’s now assert on that logic.","type":"text"}],"type":"paragraph"},{"caption":[],"media":null,"code":"TestingSyncUpFormPresentation-01-code-0014.swift","type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Assert that after the "},{"type":"codeVoice","code":"confirmAddButtonTapped"},{"text":" is sent that the root ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" feature"},{"type":"text","text":" "},{"text":"has updated its ","type":"text"},{"type":"codeVoice","code":"syncUps"},{"text":" array to have the newly edited sync-up, and it ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"’s out the"},{"text":" ","type":"text"},{"code":"addSyncUp","type":"codeVoice"},{"text":" state to represent dismissal of the sheet.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have a passing test, and it exercises the integration of two features. We have emulated"},{"type":"text","text":" "},{"text":"the full flow of a user bringing up the “New sync-up” sheet, making some changes, tapping","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“Add”, and proved that the new sheet was added to the list and the sheet was dismissed. As"},{"type":"text","text":" "},{"type":"text","text":"long as we have hooked everything up in the view properly, and as long as we trust SwiftUI to"},{"text":" ","type":"text"},{"text":"do its  job, we can be confident this feature works the way we expect.","type":"text"}]}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by testing the flow of adding a sync-up."}]}]}]},{"title":"Non-exhaustive testing","anchor":"Non-exhaustive-testing","stepsSection":[{"media":null,"caption":[],"code":"TestingSyncUpFormPresentation-02-code-0001.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add a new test method for testing the “Add sync-up” flow, but this time in a non-exhaustive","type":"text"},{"type":"text","text":" "},{"text":"manner.","type":"text"}]}]},{"caption":[{"type":"aside","content":[{"inlineContent":[{"text":"The default value of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","type":"reference","isActive":true},{"text":" is ","type":"text"},{"type":"codeVoice","code":".on"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so typically it does not need to be set."}],"type":"paragraph"}],"style":"note","name":"Note"}],"code":"TestingSyncUpFormPresentation-02-code-0002.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" just like we did before, but this time we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will set the store’s "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true,"type":"reference"},{"type":"text","text":" to "},{"type":"codeVoice","code":".off"},{"type":"text","text":". This"},{"type":"text","text":" "},{"text":"puts the test store in “non-exhaustive” mode.","type":"text"}]}],"type":"step","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"Emulate the user tapping the “+” button in the UI by sending the ","type":"text"},{"code":".addSyncUpButtonTapped","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"action."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Run the test to see that it passes.","type":"text"}]}],"code":"TestingSyncUpFormPresentation-02-code-0003.swift","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Already we can see a difference between non-exhaustive and exhaustive test stores. We are not"},{"type":"text","text":" "},{"type":"text","text":"specifying the trailing closure in"},{"type":"text","text":" "},{"type":"codeVoice","code":"ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"type":"text","text":" to assert on state"},{"type":"text","text":" "},{"text":"changes, yet the test will still pass.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A non-exhaustive store operates similarly to an exhaustive one, but with a few key"},{"text":" ","type":"text"},{"type":"text","text":"differences. In a non-exhaustive store, the "},{"type":"codeVoice","code":"$0"},{"type":"text","text":" handed to the trailing closure of"},{"text":" ","type":"text"},{"code":"ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","type":"codeVoice"},{"text":" is the state ","type":"text"},{"inlineContent":[{"type":"text","text":"after"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"the action has been processed, whereas in an exhaustive test store it is the state ","type":"text"},{"inlineContent":[{"text":"before","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means in non-exhaustive test stores you do not have make any mutations in the trailing"},{"text":" ","type":"text"},{"type":"text","text":"closure if you do not want to. And anything you "},{"inlineContent":[{"type":"text","text":"do"}],"type":"emphasis"},{"text":" set in the trailing closure must match","type":"text"},{"type":"text","text":" "},{"text":"what was already there in order for the test to pass. See the dedicated article","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing","type":"reference","isActive":true},{"text":" for more information.","type":"text"}],"type":"paragraph"},{"media":null,"runtimePreview":null,"code":"TestingSyncUpFormPresentation-02-code-0004.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that it passes."}]}],"content":[{"inlineContent":[{"type":"text","text":"Emulate the user making edits to the sync-up, but again do not provide a trailing closure."},{"type":"text","text":" "},{"type":"text","text":"We will not assert on how the state changes for this action."}],"type":"paragraph"}]},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that it passes."}]}],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Emulate the user tapping the “Add” button to confirm adding the sync-up. This time we will"},{"type":"text","text":" "},{"type":"text","text":"provide an assertion trailing closure, but we will only assert that the edited sync-up was"},{"type":"text","text":" "},{"text":"added to the root list.","type":"text"}],"type":"paragraph"}],"type":"step","code":"TestingSyncUpFormPresentation-02-code-0005.swift","runtimePreview":null},{"inlineContent":[{"text":"This test passes, and it proves at a very high level that when the user does the full “Add","type":"text"},{"text":" ","type":"text"},{"text":"sync-up” flow that a sync-up is added to the root list without asserting on every little","type":"text"},{"type":"text","text":" "},{"type":"text","text":"detail long the way."}],"type":"paragraph"},{"inlineContent":[{"text":"There is an alternate non-exhaustive mode called","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","isActive":true},{"type":"text","text":". The"},{"type":"text","text":" "},{"code":"showSkippedAssertions","type":"codeVoice"},{"text":" flag allows you to see what state you did not assert on without","type":"text"},{"type":"text","text":" "},{"type":"text","text":"failing the test suite. The default value is "},{"type":"codeVoice","code":"false"},{"text":", but it can be turned on explicitly.","type":"text"}],"type":"paragraph"},{"runtimePreview":null,"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Run the test to see that it passes, but that for any state we did not assert on we get a","type":"text"},{"text":" ","type":"text"},{"text":"grey informational box in Xcode letting us know what was skipped.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Put the test store in the alternate non-exhaustive mode."}]}],"code":"TestingSyncUpFormPresentation-02-code-0006.swift"},{"inlineContent":[{"text":"This mode of non-exhaustive testing can be great for debugging. Non-exhaustive testing has","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the downside that you can have a passing test that is secretly hiding a production bug since"},{"type":"text","text":" "},{"type":"text","text":"you are not asserting on "},{"type":"emphasis","inlineContent":[{"text":"everything","type":"text"}]},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are seeing a mysterious bug in the simulator or device that you have test coverage for,"},{"type":"text","text":" "},{"text":"then you can turn on ","type":"text"},{"code":"showSkippedAssertions","type":"codeVoice"},{"type":"text","text":" to get a view into what state you are not"},{"type":"text","text":" "},{"text":"asserting on and search for the bug there.","type":"text"}]}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The test we wrote in the previous section is incredibly powerful, but also a bit verbose. As"},{"text":" ","type":"text"},{"type":"text","text":"the features you test get more complex, and as you test the integration of more features, you"},{"text":" ","type":"text"},{"text":"may come to a point where you do not want to exhaustively assert on every little thing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"happening inside the features."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is where non-exhaustive testing is helpful. It allows you to write tests in the same"},{"text":" ","type":"text"},{"type":"text","text":"style as before, but you can choose what state you want to assert on, and you can ignore state"},{"type":"text","text":" "},{"type":"text","text":"that is not interesting to you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically you will have a mixture of exhaustive and non-exhaustive tests in your suite."},{"type":"text","text":" "},{"type":"text","text":"Exhaustive tests are a great default for testing leaf features, but every once in a while you"},{"text":" ","type":"text"},{"type":"text","text":"may want an exhaustive test on feature integrations. And then non-exhaustive tests are a great"},{"type":"text","text":" "},{"type":"text","text":"default for testing the integration of features, and may make sense every once in a while on"},{"type":"text","text":" "},{"text":"leaf features.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}],"kind":"tasks"},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","overridingTitle":"Get started","isActive":true,"type":"reference"},"kind":"callToAction","title":"Persisting sync-ups","abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"text":".","type":"text"}],"featuredEyebrow":"Tutorial"}],"metadata":{"category":"Building SyncUps","role":"project","categoryPathComponent":"BuildingSyncUps","title":"Testing the add sync-up flow"},"kind":"project","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form"]],"modules":[{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"task"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","kind":"task"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"task"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps"},"variants":[{"paths":["\/tutorials\/composablearchitecture\/testingsyncupformpresentation"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation","estimatedTime":"20min","kind":"project","role":"project","title":"Navigating to a sync-up detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","type":"topic"},"TestingSyncUpFormPresentation-01-code-0003.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0003.swift","fileType":"swift","type":"file","fileName":"SyncUpsListTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"type":"text","text":" "},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"text":"fragile.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","type":"section","title":"Non-exhaustive testing","kind":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing","role":"pseudoSymbol"},"TestingSyncUpFormPresentation-01-code-0007.swift":{"fileName":"SyncUpsListTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileType":"swift","syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0007.swift","highlights":[{"line":12},{"line":13}]},"TestingSyncUpFormPresentation-01-code-0006.swift":{"highlights":[{"line":26},{"line":27},{"line":28},{"line":58},{"line":59}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case confirmAddButtonTapped","    case discardButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(","          syncUp: SyncUp(id: uuid())","        )","        return .none","","      case .addSyncUp:","        return .none","","      case .confirmAddButtonTapped:","        guard let newSyncUp = state.addSyncUp?.syncUp","        else { return .none }","        state.addSyncUp = nil","        state.syncUps.append(newSyncUp)","        return .none","","      case .discardButtonTapped:","        state.addSyncUp = nil","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}","",""],"syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0006.swift","fileType":"swift","type":"file","fileName":"SyncUpsList.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"text":"feature to make things a little more interesting.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","title":"Sync-up form","type":"topic","kind":"project","url":"\/tutorials\/composablearchitecture\/syncupform","role":"project","estimatedTime":"15min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"role":"project","type":"topic","title":"Adding a meeting timer","url":"\/tutorials\/composablearchitecture\/implementingtimer","estimatedTime":"25min","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"abstract":[],"url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail","kind":"article","role":"article","title":"Navigating to sync-up detail","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"abstract":[{"text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one","type":"text"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"text":"to test new features as you add them, and in the future we will have much more complicated","type":"text"},{"type":"text","text":" "},{"text":"behavior to test.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test","kind":"section","role":"pseudoSymbol","title":"Writing your first test","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","type":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"url":"\/tutorials\/buildingsyncups\/new-sync-up-form","type":"topic","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","kind":"article","title":"New sync-up form","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"kind":"section","title":"Form focus: an approach","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"text":" ","type":"text"},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"text":" ","type":"text"},{"text":"updates the parent feature via a shared property. It’s about time we got some test","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","title":"Testing the edit flow","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project","title":"Create the SyncUps project","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"type":"section","title":"More concise domain modeling","kind":"section","abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync","type":"text"},{"type":"text","text":" "},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","title":"Create the sync-up detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"abstract":[{"text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"type":"text","text":"domain modeling, controlling dependencies, and testability."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","title":"Building SyncUps","type":"topic","kind":"overview","url":"\/tutorials\/buildingsyncups","role":"overview"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"text":" ","type":"text"},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","title":"A handy debugging tool","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","type":"section","title":"SyncUpsList feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail","type":"section","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"section","title":"Navigating to the detail","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","title":"Create a new feature","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"url":"\/tutorials\/composablearchitecture\/meetingnavigation","type":"topic","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","estimatedTime":"5min","kind":"project","title":"Navigating to a meeting","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"kind":"section","title":"Adding attendees","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","type":"section"},"TestingSyncUpFormPresentation-01-code-0009.swift":{"fileName":"SyncUpsListTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    await store.send(\\.addSyncUp…)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileType":"swift","syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0009.swift","highlights":[{"line":21},{"line":22}]},"TestingSyncUpFormPresentation-01-code-0008.swift":{"highlights":[{"line":17},{"line":18},{"line":19}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0008.swift","fileType":"swift","type":"file","fileName":"SyncUpsListTests.swift"},"TestingSyncUpFormPresentation-01-code-0014.swift":{"fileName":"SyncUpsListTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","","    await store.send(.confirmAddButtonTapped) {","      $0.addSyncUp = nil","      $0.syncUps = [editedSyncUp]","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileType":"swift","syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0014.swift","highlights":[{"line":34},{"line":35},{"line":36},{"line":37}]},"TestingSyncUpFormPresentation-02-code-0006.swift":{"highlights":[{"line":15}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off(showSkippedAssertions: true)","","    await store.send(.addSyncUpButtonTapped)","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)","","    await store.send(.confirmAddButtonTapped) {","      $0.syncUps = [editedSyncUp]","    }","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"syntax":"swift","identifier":"TestingSyncUpFormPresentation-02-code-0006.swift","fileType":"swift","type":"file","fileName":"SyncUpsListTests.swift"},"TestingSyncUpFormPresentation-01-code-0011.swift":{"fileName":"SyncUpsListTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileType":"swift","syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0011.swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps","kind":"section","role":"pseudoSymbol","type":"section","title":"A tour of SyncUps","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup","estimatedTime":"30min","kind":"project","role":"project","title":"Editing and deleting a sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","type":"topic"},"TestingSyncUpFormPresentation-01-code-0005.swift":{"highlights":[{"line":19},{"line":20},{"line":21}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case confirmAddButtonTapped","    case discardButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","        return .none","","      case .addSyncUp:","        return .none","","      case .confirmAddButtonTapped:","        guard let newSyncUp = state.addSyncUp?.syncUp","        else { return .none }","        state.addSyncUp = nil","        state.syncUps.append(newSyncUp)","        return .none","","      case .discardButtonTapped:","        state.addSyncUp = nil","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}"],"syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0005.swift","fileType":"swift","type":"file","fileName":"SyncUpsList.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction/binding(_:)":{"title":"binding(_:)","url":"\/documentation\/composablearchitecture\/bindableaction\/binding(_:)","abstract":[{"type":"text","text":"Embeds a binding action in this action type."}],"required":true,"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/binding(_:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"binding"},{"kind":"text","text":"("},{"text":"BindingAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14BindableActionP5StateQa","kind":"typeIdentifier","text":"State"},{"kind":"text","text":">) -> "},{"text":"Self","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"kind":"section","title":"Removing attendees","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early","type":"section","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"type":"text","text":" "},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","kind":"section","title":"Ending the meeting early","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence","type":"section","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"type":"text","text":" "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" and "},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","kind":"section","title":"Testing persistence","role":"pseudoSymbol"},"TestingSyncUpFormPresentation-01-code-0012.swift":{"highlights":[{"line":33},{"line":34}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","","    await store.send(.confirmAddButtonTapped)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0012.swift","fileType":"swift","type":"file","fileName":"SyncUpsListTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature","kind":"section","role":"pseudoSymbol","title":"Creating the app feature","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":" ","type":"text"},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"estimatedTime":"10min","kind":"project","title":"Testing the sync-up form","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view","kind":"section","role":"pseudoSymbol","title":"Creating the app view","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"off"},{"kind":"text","text":"("},{"kind":"externalParam","text":"showSkippedAssertions"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","title":"Exhaustivity.off(showSkippedAssertions:)"},"TestingSyncUpFormPresentation-02-code-0002.swift":{"fileName":"SyncUpsListTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileType":"swift","syntax":"swift","identifier":"TestingSyncUpFormPresentation-02-code-0002.swift","highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"url":"\/tutorials\/composablearchitecture\/recordmeetingfeature","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","abstract":[{"text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will","type":"text"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"estimatedTime":"5min","kind":"project","title":"The RecordMeeting feature","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"text":"to use Apple’s ","type":"text"},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"type":"text","text":" "},{"text":"in progress.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","title":"Adding a speech recognizer","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer","role":"project","estimatedTime":"10min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"kind":"section","title":"A basic timer","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"text":"feature to make things a little more interesting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach","kind":"section","role":"pseudoSymbol","title":"Form focus: a better approach","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"url":"\/tutorials\/buildingsyncups\/record-meeting","title":"Record meeting","abstract":[],"kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","type":"topic"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","title":"Presenting the sync-up form","type":"topic","kind":"article","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"abstract":[{"text":"We have now implemented a navigation stack at the root of our application, and integrated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"code":"SyncUpsList","type":"codeVoice"},{"text":" feature, the ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/testingnavigation","kind":"project","role":"project","estimatedTime":"10min","title":"Testing navigation","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingAction","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"topic","kind":"symbol","navigatorTitle":[{"text":"BindingAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingaction","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"title":"BindingAction"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","type":"topic","kind":"article","title":"Lists of sync-ups","url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","role":"symbol","kind":"symbol","abstract":[{"text":"The current exhaustivity level of the test store.","type":"text"}],"title":"exhaustivity","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","text":"Exhaustivity"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"url":"\/tutorials\/composablearchitecture\/syncupdetail","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync","type":"text"},{"text":" ","type":"text"},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}],"estimatedTime":"5min","kind":"project","title":"Sync-up detail","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"abstract":[{"text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one","type":"text"},{"text":" ","type":"text"},{"text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice","type":"text"},{"type":"text","text":" "},{"text":"to test new features as you add them, and in the future we will have much more complicated","type":"text"},{"type":"text","text":" "},{"text":"behavior to test.","type":"text"}],"title":"Testing the list of sync-ups","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups","estimatedTime":"5min","kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list","kind":"section","role":"pseudoSymbol","type":"section","title":"Adding a new sync-up to the list","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" feature has slowly become quite complex. It now handles two forms of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"text":"updates the parent feature via a shared property. It’s about time we got some test","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","title":"Testing the sync-up detail","type":"topic","kind":"project","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail","role":"project","estimatedTime":"10min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"title":"Integrating the feature domains together","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","kind":"section","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together","kind":"section","role":"pseudoSymbol","title":"Integrating the feature views together","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","type":"section"},"TestingSyncUpFormPresentation-01-code-0002.swift":{"syntax":"swift","type":"file","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"fileType":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0002.swift","highlights":[{"line":10},{"line":11},{"line":12}],"fileName":"SyncUpsListTests.swift"},"TestingSyncUpFormPresentation-02-code-0005.swift":{"fileName":"SyncUpsListTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addSyncUpButtonTapped)","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)","","    await store.send(.confirmAddButtonTapped) {","      $0.syncUps = [editedSyncUp]","    }","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileType":"swift","syntax":"swift","identifier":"TestingSyncUpFormPresentation-02-code-0005.swift","highlights":[{"line":28},{"line":29},{"line":30},{"line":31}]},"TestingSyncUpFormPresentation-02-code-0004.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addSyncUpButtonTapped)","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileName":"SyncUpsListTests.swift","syntax":"swift","identifier":"TestingSyncUpFormPresentation-02-code-0004.swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"kind":"project","title":"Lists of sync-ups","url":"\/tutorials\/composablearchitecture\/listsofsyncups","abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"type":"text","text":" "},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","estimatedTime":"10min","type":"topic"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"abstract":[],"url":"\/tutorials\/buildingsyncups\/sync-up-detail","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","title":"Sync-up detail","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"text":".","type":"text"}],"url":"\/tutorials\/composablearchitecture\/persistingsyncups","estimatedTime":"5min","kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","title":"Persisting sync-ups","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","title":"Deleting the sync-up","type":"section"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"abstract":[],"url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","title":"Persisting sync-ups to disk","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting","type":"section","abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"type":"text","text":" "},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","kind":"section","title":"Navigate to a meeting","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"abstract":[{"text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","title":"Editing the sync-up","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"estimatedTime":"10min","title":"Testing the add sync-up flow","type":"topic","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","kind":"project","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation"},"TestingSyncUpFormPresentation-02-code-0001.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileName":"SyncUpsListTests.swift","syntax":"swift","identifier":"TestingSyncUpFormPresentation-02-code-0001.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore","kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","title":"TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"TestingSyncUpFormPresentation-01-code-0013.swift":{"highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","","    await store.send(.confirmAddButtonTapped)","    \/\/ ❌ State was not expected to change, but a change occurred: …","    \/\/","    \/\/       SyncUpsList.State(","    \/\/     −   _addSyncUp: SyncUpForm.State(","    \/\/     −     _focus: .title,","    \/\/     −     _syncUp: SyncUp(","    \/\/     −       id: Tagged(rawValue: UUID(00000000-0000-0000-0000-000000000000)),","    \/\/     −       attendees: [","    \/\/     −         [0]: Attendee(","    \/\/     −           id: Tagged(rawValue: UUID(0C804547-B60D-48D5-A5CC-BBC16D1B2287)),","    \/\/     −           name: \"Blob\"","    \/\/     −         ),","    \/\/     −         [1]: Attendee(","    \/\/     −           id: Tagged(rawValue: UUID(70B92063-FE08-458F-9703-E2E627A88EDA)),","    \/\/     −           name: \"Blob Jr.\"","    \/\/     −         )","    \/\/     −       ],","    \/\/     −       duration: 5 minutes,","    \/\/     −       meetings: [],","    \/\/     −       theme: .bubblegum,","    \/\/     −       title: \"Point-Free morning sync\"","    \/\/     −     )","    \/\/     −   ),","    \/\/     +   _addSyncUp: nil,","    \/\/         _syncUps: [","    \/\/     +     [0]: SyncUp(","    \/\/     +       id: Tagged(rawValue: UUID(00000000-0000-0000-0000-000000000000)),","    \/\/     +       attendees: [","    \/\/     +         [0]: Attendee(","    \/\/     +           id: Tagged(rawValue: UUID(0C804547-B60D-48D5-A5CC-BBC16D1B2287)),","    \/\/     +           name: \"Blob\"","    \/\/     +         ),","    \/\/     +         [1]: Attendee(","    \/\/     +           id: Tagged(rawValue: UUID(70B92063-FE08-458F-9703-E2E627A88EDA)),","    \/\/     +           name: \"Blob Jr.\"","    \/\/     +         )","    \/\/     +       ],","    \/\/     +       duration: 5 minutes,","    \/\/     +       meetings: [],","    \/\/     +       theme: .bubblegum,","    \/\/     +       title: \"Point-Free morning sync\"","    \/\/     +     )","    \/\/         ]","    \/\/       )","    \/\/","    \/\/ (Expected: −, Actual: +)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0013.swift","fileType":"swift","type":"file","fileName":"SyncUpsListTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"kind":"project","title":"What is SyncUps?","url":"\/tutorials\/composablearchitecture\/whatissyncups","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"type":"text","text":" "},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","estimatedTime":"5min","type":"topic"},"TestingSyncUpFormPresentation-01-code-0010.swift":{"identifier":"TestingSyncUpFormPresentation-01-code-0010.swift","fileType":"swift","type":"file","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    await store.send(\\.addSyncUp.binding…)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","highlights":[{"line":22}]},"TestingSyncUpFormPresentation-01-code-0001.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileName":"SyncUpsListTests.swift","syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0001.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"type":"section","title":"Persisting data to disk","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Shared"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":"."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","title":"What is SyncUps?","type":"topic","kind":"article","url":"\/tutorials\/buildingsyncups\/what-is-syncups-","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"title":"Asking for speech recognition permission","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"section","abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"text":"audio, and then start a speech recognition task to live transcribe the meeting while it is","type":"text"},{"text":" ","type":"text"},{"text":"in progress.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up","title":"Deleting a sync-up","abstract":[{"text":"We have now implemented a navigation stack at the root of our application, and integrated","type":"text"},{"type":"text","text":" "},{"text":"3 features into the stack: the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" feature, the "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature, and the","type":"text"},{"type":"text","text":" "},{"code":"MeetingView","type":"codeVoice"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","title":"Presenting the sync-up form","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/presentingsyncupform","role":"project","estimatedTime":"10min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","title":"Adding a sync-up","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen","title":"The meeting screen","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"previous recorded meeting."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","type":"section","title":"Navigating to the record meeting feature","kind":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"abstract":[{"text":"We will create a new feature with the Composable Architecture that is capable of editing the","type":"text"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","title":"Sync-up form basics","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"role":"pseudoSymbol","type":"section","kind":"section","title":"Testing the timer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models","title":"Domain models","abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"type":"text","text":" "},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the app evolves."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA#Non-exhaustive-testing":{"url":"\/documentation\/composablearchitecture\/testingtca#Non-exhaustive-testing","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing","abstract":[],"title":"Non-exhaustive testing","type":"topic"},"TestingSyncUpFormPresentation-01-code-0004.swift":{"highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}],"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","    }","    \/\/ ❌ A state change does not match expectation: …","    \/\/","    \/\/       SyncUpsList.State(","    \/\/         _addSyncUp: SyncUpForm.State(","    \/\/           _focus: .title,","    \/\/           _syncUp: SyncUp(","    \/\/     −       id: Tagged(rawValue: UUID(46714C1B-449D-430C-9AE9-300BEF39D259))","    \/\/     +       id: Tagged(rawValue: UUID(29CEC58B-1FC1-443C-8178-D35C9CA062C1))","    \/\/             attendees: [],","    \/\/             duration: 5 minutes,","    \/\/             meetings: [],","    \/\/             theme: .bubblegum,","    \/\/             title: \"\"","    \/\/           )","    \/\/         ),","    \/\/         _syncUps: []","    \/\/       )","    \/\/","    \/\/ (Expected: −, Actual: +)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"syntax":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0004.swift","fileType":"swift","type":"file","fileName":"SyncUpsListTests.swift"},"TestingSyncUpFormPresentation-02-code-0003.swift":{"identifier":"TestingSyncUpFormPresentation-02-code-0003.swift","fileType":"swift","type":"file","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addSyncUpButtonTapped)","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","highlights":[{"line":16},{"line":17}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","title":"Controlling dependencies early","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early","role":"pseudoSymbol"}}}