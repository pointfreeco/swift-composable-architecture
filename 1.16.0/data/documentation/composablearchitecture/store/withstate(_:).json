{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"]]},"metadata":{"roleHeading":"Instance Method","symbolKind":"method","modules":[{"name":"ComposableArchitecture"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withState","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"role":"symbol","externalID":"s:22ComposableArchitecture5StoreC9withStateyqd__qd__xXElF","title":"withState(_:)"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"abstract":[{"type":"text","text":"Calls the given closure with a snapshot of the current state of the store."}],"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"@","kind":"attribute"},{"text":"MainActor","kind":"attribute","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withState","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"body"},{"kind":"text","text":": ("},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"A closure that takes the current state of the store as its sole argument. If","type":"text"},{"text":" ","type":"text"},{"text":"the closure has a return value, that value is also used as the return value of the","type":"text"},{"type":"text","text":" "},{"code":"withState","type":"codeVoice"},{"text":" method. The state argument reflects the current state of the store only for the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"duration of the closureâ€™s execution, and is only observable over time, "},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"type":"text","text":" by SwiftUI, if"},{"type":"text","text":" "},{"type":"text","text":"it conforms to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"body"}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"The return value, if any, of the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" closure."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"A lightweight way of accessing store state when state is not observable and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","isActive":true},{"text":" is","type":"text"},{"type":"text","text":" "},{"text":"unavailable.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef"],"generated":true,"title":"Accessing state","anchor":"Accessing-state"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store\/withstate(_:)"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/subscript(dynamicMember:)-655ef":{"role":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"dynamicMember"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"text":"Value","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","title":"subscript(dynamicMember:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"ObservableState"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef","abstract":[],"url":"\/documentation\/composablearchitecture\/store\/subscript(dynamicmember:)-655ef"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ObservableState"}],"abstract":[],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"ObservableState","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","title":"ObservableState","role":"symbol","url":"\/documentation\/composablearchitecture\/observablestate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/withState(_:)":{"title":"withState(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withState","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"}],"type":"topic","abstract":[{"type":"text","text":"Calls the given closure with a snapshot of the current state of the store."}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/withstate(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","url":"\/documentation\/composablearchitecture\/store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","title":"Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/state-1qxwl":{"title":"state","role":"symbol","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ObservableState","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"type":"text","text":"Direct access to state in the store when "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","type":"reference"},{"text":".","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"State"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/state-1qxwl"}}}