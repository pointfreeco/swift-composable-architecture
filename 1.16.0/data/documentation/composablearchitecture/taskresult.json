{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"],"anchor":"Representing-a-task-result","title":"Representing a task result"},{"anchor":"Converting-a-throwing-expression","title":"Converting a throwing expression","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"]},{"anchor":"Accessing-a-results-value","title":"Accessing a resultâ€™s value","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"]},{"title":"Transforming results","anchor":"Transforming-results","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)"]},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},"seeAlsoSections":[{"generated":true,"anchor":"Creating-an-effect","title":"Creating an effect","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf"]}],"relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"title":"Conforms To"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use 'Result', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.4#Moving-off-of-TaskResult","type":"text"}]}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskResult"},{"text":"<","kind":"text"},{"text":"Success","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"This type is needed because Swiftâ€™s concurrency tools can only express untyped errors, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"async"},{"text":" functions and ","type":"text"},{"type":"codeVoice","code":"AsyncSequence"},{"text":", and so their output can realistically only be bridged to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Result<_, any Error>"},{"text":". However, ","type":"text"},{"type":"codeVoice","code":"Result<_, any Error>"},{"type":"text","text":" is never "},{"code":"Equatable","type":"codeVoice"},{"text":" since ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" is not","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Equatable"},{"text":", and equatability is very important for testing in the Composable Architecture. By","type":"text"},{"type":"text","text":" "},{"text":"defining our own type we get the ability to recover equatability in most situations.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If someday Swift gets typed ","type":"text"},{"code":"throws","type":"codeVoice"},{"type":"text","text":", then we can eliminate this type and rely solely on"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You typically use this type as the payload of an action which receives a response from an"},{"type":"text","text":" "},{"type":"text","text":"effect:"}]},{"syntax":"swift","type":"codeListing","code":["enum Action: Equatable {","  case factButtonTapped","  case factResponse(TaskResult<String>)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you can model your dependency as using simple "},{"code":"async","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" functionality:"}]},{"type":"codeListing","syntax":"swift","code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"]},{"inlineContent":[{"text":"And finally you can use ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","type":"reference","isActive":true},{"type":"text","text":" to construct an"},{"type":"text","text":" "},{"type":"text","text":"effect in the reducer that invokes the "},{"code":"numberFact","type":"codeVoice"},{"text":" endpoint and wraps its response in a","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" by using its catching initializer, "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","type":"reference","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"code":["case .factButtonTapped:","  return .run { send in","    await send(","      .factResponse(","        TaskResult { try await self.numberFact.fetch(state.number) }","      )","    )","  }","","case let .factResponse(.success(fact)):","  \/\/ do something with fact","","case .factResponse(.failure):","  \/\/ handle error","","\/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"text":"Equality","anchor":"Equality","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The biggest downside to using an untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" in a result type is that the result will not"},{"type":"text","text":" "},{"type":"text","text":"be equatable even if the success type is. This negatively affects your ability to test features"},{"text":" ","type":"text"},{"text":"that use ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" in their actions with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" does extra work to try to maintain equatability when possible. If the underlying"},{"text":" ","type":"text"},{"type":"text","text":"type masked by the "},{"type":"codeVoice","code":"Error"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":", then it will use that ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" conformance"},{"type":"text","text":" "},{"text":"on two failures. Luckily, most errors thrown by Appleâ€™s frameworks are already equatable, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because errors are typically simple value types, it is usually possible to have the compiler"},{"type":"text","text":" "},{"type":"text","text":"synthesize a conformance for you."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you are testing the unhappy path of a feature that feeds a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"text":" back into the","type":"text"},{"type":"text","text":" "},{"text":"system, be sure to conform the error to equatable, or the test will fail:","type":"text"}]},{"syntax":"swift","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error {}","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ ðŸ›‘","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}","\/\/ ðŸ›‘ 'RefreshFailure' is not equatable"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get a passing test, explicitly conform your custom error to the "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error, Equatable {} \/\/ ðŸ‘ˆ","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ âœ…","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}"]}]}],"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s "},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/taskresult"]}],"metadata":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"title":"TaskResult","externalID":"s:22ComposableArchitecture10TaskResultO","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"role":"symbol","roleHeading":"Enumeration","symbolKind":"enum","modules":[{"name":"ComposableArchitecture"}],"platforms":[]},"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskResult"}],"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s "},{"code":"Result","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"text":" ","type":"text"},{"type":"text","text":"untyped "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"."}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","title":"TaskResult"},"doc://ComposableArchitecture/s8CopyableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"text":" ","type":"text"},{"type":"text","text":"return an effect, but you donâ€™t need to do anything."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/effect\/none","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"none"},{"kind":"text","text":": "},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"none","kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/flatMap(_:)":{"title":"flatMap(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"flatMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"NewSuccess"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/taskresult\/flatmap(_:)","abstract":[{"text":"Returns a new task result, mapping any success value using the given transformation and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unwrapping the produced result."}],"type":"topic","kind":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ScP","text":"TaskPriority"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"operation"},{"text":": (","kind":"text"},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"catch"},{"text":": ((any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier","text":"Effect"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"title":"run(priority:operation:catch:fileID:filePath:line:column:)","kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Hashable-Implementations":{"title":"Hashable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations","abstract":[],"url":"\/documentation\/composablearchitecture\/taskresult\/hashable-implementations","kind":"article","role":"collectionGroup","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"title":"TestStore","kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://ComposableArchitecture/SQ":{"identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/CasePathable-Implementations":{"kind":"article","abstract":[],"title":"CasePathable Implementations","type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/casepathable-implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/value":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value","deprecated":true,"kind":"symbol","abstract":[{"type":"text","text":"Returns the success value as a throwing property."}],"title":"value","url":"\/documentation\/composablearchitecture\/taskresult\/value","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Success"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/map(_:)":{"title":"map(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"NewSuccess"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") -> "},{"text":"NewSuccess","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/taskresult\/map(_:)","abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation."}],"type":"topic","kind":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectOf":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EffectOf"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effectof","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"EffectOf","kind":"identifier"}],"abstract":[{"type":"text","text":"A convenience type alias for referring to an effect of a given reducerâ€™s domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf","title":"EffectOf"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Equatable-Implementations":{"kind":"article","abstract":[],"type":"topic","title":"Equatable Implementations","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/taskresult\/equatable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Result/init(_:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)","abstract":[{"type":"text","text":"Transforms a "},{"code":"TaskResult","type":"codeVoice"},{"text":" into a ","type":"text"},{"type":"codeVoice","code":"Result"},{"type":"text","text":"."}],"role":"symbol","title":"init(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/swift\/result\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":">)"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Success"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Failure"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"any Error"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/failure(_:)":{"deprecated":true,"role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"failure"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)","kind":"symbol","type":"topic","title":"TaskResult.failure(_:)","abstract":[{"text":"A failure, storing an error.","type":"text"}],"url":"\/documentation\/composablearchitecture\/taskresult\/failure(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/success(_:)":{"abstract":[{"text":"A success, storing a ","type":"text"},{"type":"codeVoice","code":"Success"},{"type":"text","text":" value."}],"title":"TaskResult.success(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"success","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Success"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","role":"symbol","deprecated":true,"type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/success(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Effect","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(catching:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"catching","kind":"externalParam"},{"kind":"text","text":": () "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"deprecated":true,"role":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/init(catching:)","kind":"symbol","abstract":[{"type":"text","text":"Creates a new task result by evaluating an async throwing closure, capturing the returned"},{"type":"text","text":" "},{"text":"value as a success, or any thrown error as a failure.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","title":"init(catching:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/send(_:)":{"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/effect\/send(_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier","text":"Effect"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Initializes an effect that immediately emits the action passed in."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","title":"send(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(_:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","abstract":[{"type":"text","text":"Transforms a "},{"type":"codeVoice","code":"Result"},{"text":" into a ","type":"text"},{"code":"TaskResult","type":"codeVoice"},{"text":", erasing its ","type":"text"},{"code":"Failure","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"role":"symbol","deprecated":true,"title":"init(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Failure"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:s6ResultO","text":"Result"},{"text":"<","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Failure"},{"text":">)","kind":"text"}]},"doc://ComposableArchitecture/SH":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH","title":"Swift.Hashable"},"doc://ComposableArchitecture/9CasePaths0A8PathableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","title":"CasePaths.CasePathable"}}}