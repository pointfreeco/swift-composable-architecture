{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency"},"variants":[{"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"kind":"article","sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","title":"Adopting Swift concurrency","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"seeAlsoSections":[{"anchor":"Integrations","generated":true,"title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types","type":"text"},{"text":" ","type":"text"},{"text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored","type":"text"},{"text":" ","type":"text"},{"text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so","type":"text"},{"text":" ","type":"text"},{"text":"you will need to know how to prove to the compiler that your types are safe to use concurrently.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"There primary way to create an ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"text":" in the library is via","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","type":"reference"},{"text":". It takes a ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":", asynchronous closure,","type":"text"},{"text":" ","type":"text"},{"text":"which restricts the types of closures you can use for your effects. In particular, the closure can","type":"text"},{"text":" ","type":"text"},{"text":"only capture ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" variables that are bound with ","type":"text"},{"code":"let","type":"codeVoice"},{"text":". Mutable variables and non-","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"types are simply not allowed to be passed to ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":" closures.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"There are two primary ways you will run into this restriction when building a feature in the","type":"text"},{"text":" ","type":"text"},{"text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from","type":"text"},{"text":" ","type":"text"},{"text":"within an effect.","type":"text"}],"type":"paragraph"},{"text":"Accessing state in an effect","anchor":"Accessing-state-in-an-effect","type":"heading","level":3},{"inlineContent":[{"text":"Reducers are executed with a mutable, ","type":"text"},{"type":"codeVoice","code":"inout"},{"text":" state variable, and such variables cannot be accessed","type":"text"},{"text":" ","type":"text"},{"text":"from within ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"text":" closures:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        return .run { send in","          try await Task.sleep(for: .seconds(1))","          await send(.delayed(state.count))","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","          \/\/    not allowed in concurrently-executing code","        }","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"To work around this you must explicitly capture the state as an immutable value for the scope of the","type":"text"},{"text":" ","type":"text"},{"text":"closure:","type":"text"}],"type":"paragraph"},{"code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You can also capture just the minimal parts of the state you need for the effect by binding a new","type":"text"},{"text":" ","type":"text"},{"text":"variable name for the capture:","type":"text"}],"type":"paragraph"},{"code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(count))  \/\/ ✅","}"],"type":"codeListing","syntax":"swift"},{"text":"Accessing dependencies in an effect","anchor":"Accessing-dependencies-in-an-effect","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"type":"text","text":" "},{"type":"text","text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous and concurrent contexts, and so must be "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If your dependency is not sendable, you will be notified at the time of registering it with the"},{"type":"text","text":" "},{"type":"text","text":"library. In particular, when extending "},{"type":"codeVoice","code":"DependencyValues"},{"type":"text","text":" to provide the computed property:"}],"type":"paragraph"},{"code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", for whatever reason, you will get a warning in the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"set"},{"type":"text","text":" lines:"}],"type":"paragraph"},{"code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"To fix this you need to make each dependency "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":". This usually just means making sure"},{"type":"text","text":" "},{"type":"text","text":"that the interface type only holds onto "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" data, and in particular, any closure-based"},{"type":"text","text":" "},{"type":"text","text":"endpoints should be annotated as "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This will restrict the kinds of closures that can be used when constructing "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" values, thus"},{"type":"text","text":" "},{"type":"text","text":"making the entire "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" sendable itself."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"title":"Observation backport","kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","url":"\/documentation\/composablearchitecture\/observationbackport","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:ScP","text":"TaskPriority"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": ((any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","type":"topic","title":"run(priority:operation:catch:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"role":"symbol","type":"topic","title":"Effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"kind":"article","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","type":"topic","url":"\/documentation\/composablearchitecture\/uikit","title":"UIKit Integration"}}}