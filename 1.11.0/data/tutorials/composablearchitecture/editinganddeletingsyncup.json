{"variants":[{"paths":["\/tutorials\/composablearchitecture\/editinganddeletingsyncup"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Editing and deleting a sync-up","chapter":"Sync-up detail","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}]}]},{"kind":"tasks","tasks":[{"anchor":"Editing-the-sync-up","title":"Editing the sync-up","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To edit the sync-up we will reuse the "},{"type":"codeVoice","code":"SyncUpFormView"},{"type":"text","text":" that we previously used for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adding"}]},{"type":"text","text":" a"},{"type":"text","text":" "},{"type":"text","text":"sync-up. This will allow us to see how easy it is to reuse features in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture, and it will allow us to explore how to communicate from the child feature"},{"type":"text","text":" "},{"type":"text","text":"back to the parent."}]}],"mediaPosition":"trailing","media":"EditingAndDeletingSyncUp-01-cover-480p.mov"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We want to present the "},{"type":"codeVoice","code":"SyncUpFormView"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"SyncUpDetailView"},{"type":"text","text":" in a sheet, and so we will"},{"type":"text","text":" "},{"type":"text","text":"need to use the presentation tools of the library just as we did in the "},{"type":"codeVoice","code":"SyncUpListsView"},{"type":"text","text":"."}]},{"code":"EditingAndDeletingSyncUp-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to the SyncUpDetail.swift file and update the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" of the feature so that it holds on"},{"type":"text","text":" "},{"type":"text","text":"to an optional piece of "},{"type":"codeVoice","code":"SyncUpForm.State"},{"type":"text","text":" using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":" "},{"type":"text","text":"macro. When the state is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" the sheet will be presented, and when it is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" it will"},{"type":"text","text":" "},{"type":"text","text":"be dismissed."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have collapsed the code in the "},{"type":"codeVoice","code":"SyncUpDetailView"},{"type":"text","text":" for now."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case to the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to represent the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer by using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)-42kki"},{"type":"text","text":" operator."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The domains of the child and parent features are now fully integrated together. We can now"},{"type":"text","text":" "},{"type":"text","text":"implement the logic that causes the edit sheet to be presented."}]},{"code":"EditingAndDeletingSyncUp-01-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the “Edit” button is tapped we can populate the "},{"type":"codeVoice","code":"editSyncUp"},{"type":"text","text":" state to represent the"},{"type":"text","text":" "},{"type":"text","text":"sheet should be presented. We can pass along the local "},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" value to the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" so"},{"type":"text","text":" "},{"type":"text","text":"that it has the freshest data to edit."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is the basics of presenting the “Edit sync-up” sheet from the sync-up detail view. There"},{"type":"text","text":" "},{"type":"text","text":"will be more to do in this reducer in a moment, but we can leave it here for now and"},{"type":"text","text":" "},{"type":"text","text":"concentrate on the view layer for a moment."}]},{"code":"EditingAndDeletingSyncUp-01-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" property in the view to be "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" since we will need to derive"},{"type":"text","text":" "},{"type":"text","text":"bindings from the store for driving navigation from state."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have collapsed the implementation of the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer in this snippet."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-01-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the very bottom of the view use the "},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":" modifier by deriving a binding to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" domain using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/Binding\/scope(state:action:fileID:line:)"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-01-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide a navigation title and toolbar buttons to the sheet for saving and cancelling the"},{"type":"text","text":" "},{"type":"text","text":"edits made to the sync-up."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Just as we did in the "},{"type":"codeVoice","code":"SyncUpsListView"},{"type":"text","text":", we decided to keep the navigation"},{"type":"text","text":" "},{"type":"text","text":"customizations (title and toolbar) in the parent domain rather than the child. This has"},{"type":"text","text":" "},{"type":"text","text":"allowed us to provide domain specific versions of this UI for creating a new sync-up"},{"type":"text","text":" "},{"type":"text","text":"versus editing an existing sync-up."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-01-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Send actions to the store when each of the toolbar buttons is tapped."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These actions do not exist yet. We will be creating them next."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have now finished integrating the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" at the view layer, and so"},{"type":"text","text":" "},{"type":"text","text":"all that is left is to finish integrating the features at the reducer level."}]},{"code":"EditingAndDeletingSyncUp-01-code-0009.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the new cases to the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum that are being sent from the view."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-01-code-0010.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"type":"codeVoice","code":"cancelEditButtonTapped"},{"type":"text","text":" action by simply clearing out the "},{"type":"codeVoice","code":"editSyncUp"},{"type":"text","text":" state."},{"type":"text","text":" "},{"type":"text","text":"This will cause the view to dismiss the sheet."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any changes the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" made to its local "},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" state will be discarded"},{"type":"text","text":" "},{"type":"text","text":"because that state is fully disconnected from the "},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" held in the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-01-code-0011.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the "},{"type":"codeVoice","code":"doneEditingButtonTapped"},{"type":"text","text":" action by grabbing the latest "},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" value from"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"editSyncUp"},{"type":"text","text":" state, and replacing "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":"’s state with that value."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the preview to see that you can tap the “Edit” button to bring up the sync-up form"},{"type":"text","text":" "},{"type":"text","text":"sheet. Then make some changes to the sync-up, and see that tapping “Done” causes those"},{"type":"text","text":" "},{"type":"text","text":"changes to be committed to the sync-up in the detail screen."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"EditingAndDeletingSyncUp-01-cover-480p.mov"}]},{"anchor":"Deleting-the-sync-up","title":"Deleting the sync-up","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we will implement the logic for deleting the sync-up from the detail screen. Because"},{"type":"text","text":" "},{"type":"text","text":"deletion is performed by a simple button, we want to protect from accidental deletions by"},{"type":"text","text":" "},{"type":"text","text":"asking the user for confirmation using an alert. This will give us an opportunity to explore"},{"type":"text","text":" "},{"type":"text","text":"how one can show alerts in the Composable Architecture."}]}],"mediaPosition":"trailing","media":"EditingAndDeletingSyncUp-02-cover-480p.mov"}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically, alerts can be shown in Composable Architecture features in exactly the same way"},{"type":"text","text":" "},{"type":"text","text":"they are in vanilla SwiftUI by using the various "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" view modifiers. However, the library"},{"type":"text","text":" "},{"type":"text","text":"comes with some tools that can improve how alerts are shown, and can make the alerts more"},{"type":"text","text":" "},{"type":"text","text":"easily testable. We will use those tools."}]},{"code":"EditingAndDeletingSyncUp-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We start by modeling a new "},{"type":"codeVoice","code":"Alert"},{"type":"text","text":" enum nested "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inside"}]},{"type":"text","text":" the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum that represents"},{"type":"text","text":" "},{"type":"text","text":"all the actions the user can take in the alert. The user can only confirm deletion or cancel"},{"type":"text","text":" "},{"type":"text","text":"deletion, and we do not have to model the cancel action. That is automatically taken care of"},{"type":"text","text":" "},{"type":"text","text":"by the library’s navigation tools."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are pre-emptively applying the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro to make it possible to write"},{"type":"text","text":" "},{"type":"text","text":"tests against these actions in a keypath-like syntax. The "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro is"},{"type":"text","text":" "},{"type":"text","text":"automatically applied to "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enums inside reducers, but macros cannot recursively apply"},{"type":"text","text":" "},{"type":"text","text":"themselves and so we must do it manually sometimes."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add another piece of optional state using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":" macro,"},{"type":"text","text":" "},{"type":"text","text":"this time representing whether or not an alert is shown."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are using the "},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swiftui-navigation\/1.2.0\/documentation\/swiftuinavigationcore\/alertstate"},{"type":"text","text":" from our"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swiftui-navigation"},{"type":"text","text":" library, which automatically comes with the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture. It is a pure data description of an alert that can be shown to the user, and"},{"type":"text","text":" "},{"type":"text","text":"it is generic over the type of actions that can be sent from the alert."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add another "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" case to the "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum that"},{"type":"text","text":" "},{"type":"text","text":"represents the actions the alert can send."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle the "},{"type":"codeVoice","code":".alert"},{"type":"text","text":" case in the reducer, and use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)-42kki"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"again to integrate the alert’s logic into the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrating the logic of an alert into a feature is a bit different from integrating the"},{"type":"text","text":" "},{"type":"text","text":"logic of a fully fledged feature. This is because alerts are immediately dismissed when a"},{"type":"text","text":" "},{"type":"text","text":"button is tapped and has no internal logic or behavior of its own. For this reason there is"},{"type":"text","text":" "},{"type":"text","text":"no reducer to specify in the trailing closure of "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":", and in fact it can be removed."}]},{"code":"EditingAndDeletingSyncUp-02-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remove the trailing closure from the "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" because the alert does not have any additional"},{"type":"text","text":" "},{"type":"text","text":"behavior to execute."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have the alert integrated into the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":", but we aren’t yet populating the"},{"type":"text","text":" "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state to actually present the alert. This is done by constructing a value of"},{"type":"text","text":" "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":", which is a data type that represents all of the properties of an alert, such"},{"type":"text","text":" "},{"type":"text","text":"as its title, message and buttons. Its primary purpose is to be "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"-friendly so that"},{"type":"text","text":" "},{"type":"text","text":"alerts can be tested."}]},{"code":"EditingAndDeletingSyncUp-02-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Populate the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" property by constructing "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":". This is done by providing three"},{"type":"text","text":" "},{"type":"text","text":"trailing closures: one for the title, one for the buttons to show in the alert, and another"},{"type":"text","text":" "},{"type":"text","text":"for the message in the alert."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to create "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":". It contains all of the information for the view"},{"type":"text","text":" "},{"type":"text","text":"to display the alert, which we will do in a moment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, constructing "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" values can be quite long, and so sometimes you may want"},{"type":"text","text":" "},{"type":"text","text":"to extract their creation to an extension on "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":"."}]},{"code":"EditingAndDeletingSyncUp-02-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extract the alert state to an extension on "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to handle the new alert actions in the reducer."}]},{"code":"EditingAndDeletingSyncUp-02-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Destructure the new "},{"type":"codeVoice","code":".alert"},{"type":"text","text":" actions in the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement of the core "},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-02-code-0009.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There is nothing to do in the "},{"type":"codeVoice","code":".alert(.dismiss)"},{"type":"text","text":" case because the "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" operator will"},{"type":"text","text":" "},{"type":"text","text":"automatically clean up the state for you."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".alert(.presented)"},{"type":"text","text":" case is more subtle, though. This action is sent when the user"},{"type":"text","text":" "},{"type":"text","text":"confirms that they want to delete the sync-up, and so somehow we have to remove the "},{"type":"codeVoice","code":"syncUp"},{"type":"text","text":" we"},{"type":"text","text":" "},{"type":"text","text":"have in state from the collection of sync-ups that is in the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, remember that in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps"},{"type":"text","text":" we showed how to persist the collection"},{"type":"text","text":" "},{"type":"text","text":"of sync-ups using the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" property wrapper with the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":" persistence strategy. This"},{"type":"text","text":" "},{"type":"text","text":"gives the app "},{"type":"emphasis","inlineContent":[{"type":"text","text":"global"}]},{"type":"text","text":" access to that state, and we can make edits to it from anywhere. We can"},{"type":"text","text":" "},{"type":"text","text":"even do it directly inline in the "},{"type":"codeVoice","code":".confirmButtonTapped"},{"type":"text","text":" action."}]},{"code":"EditingAndDeletingSyncUp-02-code-0010.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" property wrapper with the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":" persistence strategy to get"},{"type":"text","text":" "},{"type":"text","text":"a reference to the sync-ups loaded from disk."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This does not actually load data from disk. The data has already been loaded from"},{"type":"text","text":" "},{"type":"text","text":"disk and cached in the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" reference. This is only giving us access"},{"type":"text","text":" "},{"type":"text","text":"to that reference."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-02-code-0011.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"id"},{"type":"text","text":" of the sync-up held in the detail’s state to remove it from the "},{"type":"codeVoice","code":"syncUps"},{"type":"text","text":" "},{"type":"text","text":"collection persisted to disk."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to delete the sync-up from the persisted array of sync-ups. It may trouble"},{"type":"text","text":" "},{"type":"text","text":"you that we are reaching out to a seemingly global "},{"type":"codeVoice","code":"syncUps"},{"type":"text","text":" variable and mutating it."},{"type":"text","text":" "},{"type":"text","text":"However, this is no different than making an API request to delete data on some external"},{"type":"text","text":" "},{"type":"text","text":"server. Typically for that situation we use dependencies to make the API operation testable,"},{"type":"text","text":" "},{"type":"text","text":"but we don’t need to do that with "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":". It is testable by default."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If it truly bothers you to access the global "},{"type":"codeVoice","code":"syncUps"},{"type":"text","text":" state from within the detail feature,"},{"type":"text","text":" "},{"type":"text","text":"then you can instead send a “delegate” action from the detail that the parent feature"},{"type":"text","text":" "},{"type":"text","text":"intercepts and implements the deleting logic. That will allow the parent to handle deletion"},{"type":"text","text":" "},{"type":"text","text":"while the child remains ignorant to those details."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is one more addition we want to make to the deletion functionality before moving on."},{"type":"text","text":" "},{"type":"text","text":"When the user confirms deletion of the sync-up we should dismiss the detail view from being"},{"type":"text","text":" "},{"type":"text","text":"presented, as it’s no longer relevant. After all, the sync-up is being deleted!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This allows us to demonstrate another superpower of the Composable Architecture. The library"},{"type":"text","text":" "},{"type":"text","text":"comes with a powerful dependency called "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":" that allows a"},{"type":"text","text":" "},{"type":"text","text":"feature to dismiss itself if it is being presented, and if the feature was integrated into the"},{"type":"text","text":" "},{"type":"text","text":"parent using the library’s navigation tools. This can be powerful because it allows the child"},{"type":"text","text":" "},{"type":"text","text":"features to encapsulate as much of their logic as possible without having to explicitly"},{"type":"text","text":" "},{"type":"text","text":"communicate with the parent. It works similarly to SwiftUI’s "},{"type":"codeVoice","code":"@Environment(\\.dismiss)"},{"type":"text","text":", but it"},{"type":"text","text":" "},{"type":"text","text":"is also distinct from it."}]},{"code":"EditingAndDeletingSyncUp-02-code-0012.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a dependency on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature"},{"type":"text","text":" "},{"type":"text","text":"by using the "},{"type":"codeVoice","code":"@Dependency"},{"type":"text","text":" property wrapper."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"To dismiss a child feature with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":" dependency you"},{"type":"text","text":" "},{"type":"text","text":"just have to invoke it as if it’s a function: "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":". However, the dismiss effect is an"},{"type":"text","text":" "},{"type":"text","text":"asynchronous function, and therefore it cannot be invoked directly in the reducer. It can"},{"type":"text","text":" "},{"type":"text","text":"only be invoked inside an effect, and so we must use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},{"type":"text","text":" effect, which"},{"type":"text","text":" "},{"type":"text","text":"gives us an asynchronous context to execute the work in, as well as a handle on"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Send"},{"type":"text","text":" for sending actions back into the system."}]},{"code":"EditingAndDeletingSyncUp-02-code-0013.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Return a "},{"type":"codeVoice","code":".run"},{"type":"text","text":" effect to send the delegate action and invoke "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" in one single"},{"type":"text","text":" "},{"type":"text","text":"effect."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to integrate the alert into the view layer so that an alert actually shows when"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"code":"EditingAndDeletingSyncUp-02-code-0014.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"SyncUpDetailView"},{"type":"text","text":", go to the bottom and use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/alert(_:)"},{"type":"text","text":" view"},{"type":"text","text":" "},{"type":"text","text":"modifier that comes with the library. This will cause an alert to be presented when the"},{"type":"text","text":" "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state is populated."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have now finished the sync-up deletion functionality in the detail screen. Unfortunately we"},{"type":"text","text":" "},{"type":"text","text":"can’t yet test deletion because we still have no way to navigate to the detail screen from the"},{"type":"text","text":" "},{"type":"text","text":"sync-ups list screen."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But, before getting to that, let’s take a quick side excursion to clean up our domain"},{"type":"text","text":" "},{"type":"text","text":"modeling in this feature."}]}]},{"anchor":"More-concise-domain-modeling","title":"More concise domain modeling","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" works well enough right now, but there is something not ideal about how its"},{"type":"text","text":" "},{"type":"text","text":"domain is modeled. We are representing the alert and edit sheet using two independent optional"},{"type":"text","text":" "},{"type":"text","text":"values, which allows for invalid states. We only expect that either the alert "},{"type":"emphasis","inlineContent":[{"type":"text","text":"or"}]},{"type":"text","text":" sheet is"},{"type":"text","text":" "},{"type":"text","text":"shown at one time, but it is possible for both optionals to be non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at the same time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And this problem gets bigger with the most destinations you can navigate to from a feature."},{"type":"text","text":" "},{"type":"text","text":"For example, if there are 4 possible destinations one can navigate to, then modeling that"},{"type":"text","text":" "},{"type":"text","text":"with optionals leads to 2^4 = 16 possible states, only 5 of which are valid. Either all"},{"type":"text","text":" "},{"type":"text","text":"optionals should be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or exactly one should be non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This kind of inconcise domain modeling can leak complexity into your features, and luckily"},{"type":"text","text":" "},{"type":"text","text":"there is a better way."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"EditingAndDeletingSyncUp-03-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a whole new reducer nested inside the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" called "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"reducer will represent all of the places one can navigate to from the detail screen, and"},{"type":"text","text":" "},{"type":"text","text":"that will give us a single piece of state to drive navigation rather than having multiple"},{"type":"text","text":" "},{"type":"text","text":"optional values."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Further"}]},{"type":"text","text":", the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" type will be an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enum"}]},{"type":"text","text":". This is different than other reducers"},{"type":"text","text":" "},{"type":"text","text":"we have encountered so far. The "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Reducer"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","overridingTitle":"@Reducer"},{"type":"text","text":" has special behavior when"},{"type":"text","text":" "},{"type":"text","text":"applied to enums that allows one to compose multiple reducers into a single package."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As we have seen it is important for "},{"type":"codeVoice","code":"State"},{"type":"text","text":" types to be "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" for"},{"type":"text","text":" "},{"type":"text","text":"testing, and so we are proactively making the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" type generated for the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" "},{"type":"text","text":"reducer equatable via the "},{"type":"codeVoice","code":"state"},{"type":"text","text":" argument of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer(state:action:)"},{"type":"text","text":". See the article"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers#Circular-reference-errors"},{"type":"text","text":" for more information of why this is the necessary"},{"type":"text","text":" "},{"type":"text","text":"way to make "},{"type":"codeVoice","code":"State"},{"type":"text","text":" equatable."}]}],"type":"aside","name":"Important"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have collapsed the implementation of "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpDetailView"},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"this code snippet."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-03-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case for each destination that can be navigated to from this feature. Each case will"},{"type":"text","text":" "},{"type":"text","text":"hold onto the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reducer"}]},{"type":"text","text":" type of the feature being navigated to, except for the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" case."},{"type":"text","text":" "},{"type":"text","text":"It will simply hold onto "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will also move the "},{"type":"codeVoice","code":"Alert"},{"type":"text","text":" action enum from the "},{"type":"codeVoice","code":"SyncUpDetail.Action"},{"type":"text","text":" type to be nested"},{"type":"text","text":" "},{"type":"text","text":"inside "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":"."}]}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to define a dedicated "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer that encapsulates all of the"},{"type":"text","text":" "},{"type":"text","text":"logic and behavior of the features that can be navigated to. You can right click on the"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Reducer"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","overridingTitle":"@Reducer"},{"type":"text","text":" macro and select “Expand macro” in Xcode to see all of the code"},{"type":"text","text":" "},{"type":"text","text":"that is being written for you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we need to integrate this new "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer into the main "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer."}]},{"code":"EditingAndDeletingSyncUp-03-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two independent pieces of optional state in "},{"type":"codeVoice","code":"SyncUpDetail.State"},{"type":"text","text":" for a single"},{"type":"text","text":" "},{"type":"text","text":"piece of optional "},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":"."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have just one single piece of optional state that determines if navigation is active"},{"type":"text","text":" "},{"type":"text","text":"and where we are being navigated to."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There will be compiler errors after completing this step, but we will fix them in"},{"type":"text","text":" "},{"type":"text","text":"upcoming steps."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-03-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two action cases for the alert and edit sheet with a single case that holds on"},{"type":"text","text":" "},{"type":"text","text":"to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"type":"text","text":" of "},{"type":"codeVoice","code":"Destination.Action"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-03-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" operators at the bottom of "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" with a single one that"},{"type":"text","text":" "},{"type":"text","text":"composes the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to the expanded code from the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Reducer"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","overridingTitle":"@Reducer"},{"type":"text","text":" macro we don’t even"},{"type":"text","text":" "},{"type":"text","text":"need to provide a trailing closure to "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":". It can be inferred automatically."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to integrate the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer."},{"type":"text","text":" "},{"type":"text","text":"Next we have to update the core "},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":" to handle the new destination state and actions"},{"type":"text","text":" "},{"type":"text","text":"properly."}]},{"code":"EditingAndDeletingSyncUp-03-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the pattern matching for the alert to go through the "},{"type":"codeVoice","code":".destination(.presented)"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"case."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-03-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Return "},{"type":"codeVoice","code":".none"},{"type":"text","text":" for all other "},{"type":"codeVoice","code":".destination"},{"type":"text","text":" actions."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-03-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update where we "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out "},{"type":"codeVoice","code":"editSyncUp"},{"type":"text","text":" state to instead "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-03-code-0009.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update where we populate the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state to instead point the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state to the"},{"type":"text","text":" "},{"type":"codeVoice","code":".alert"},{"type":"text","text":" case."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-03-code-0010.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the "},{"type":"codeVoice","code":".doneEditingButtonTapped"},{"type":"text","text":" action by grabbing the edited sync-up from the "},{"type":"codeVoice","code":".edit"},{"type":"text","text":" "},{"type":"text","text":"case of the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" enum."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-03-code-0011.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update where we previously populated the "},{"type":"codeVoice","code":"editSyncUp"},{"type":"text","text":" state to instead point the"},{"type":"text","text":" "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" enum to the "},{"type":"codeVoice","code":".edit"},{"type":"text","text":" case with some "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" state."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"EditingAndDeletingSyncUp-03-code-0012.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the extension on "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" to point to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":"’s alert action."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to fully integrate the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer into the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" "},{"type":"text","text":"reducer. Next we have to update the view so that we can drive the presentation of the alert"},{"type":"text","text":" "},{"type":"text","text":"and sheet from the destination enum."}]},{"code":"EditingAndDeletingSyncUp-03-code-0013.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/alert(_:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":".sheet(item:)"},{"type":"text","text":" modifiers at the bottom of the"},{"type":"text","text":" "},{"type":"text","text":"view so that the "},{"type":"codeVoice","code":"$store.scope"},{"type":"text","text":" further singles out the case for driving navigation."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to finish the refactor to use an enum to drive navigation rather than"},{"type":"text","text":" "},{"type":"text","text":"multiple optionals. Our domain is more concisely modeled, and we can know precisely when"},{"type":"text","text":" "},{"type":"text","text":"something is being presented. We merely have to check if "},{"type":"codeVoice","code":"destination != nil"},{"type":"text","text":"."}]}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Testing the sync-up detail","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Editing and deleting a sync-up","categoryPathComponent":"BuildingSyncUps","role":"project","category":"Building SyncUps"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail"]]},"references":{"EditingAndDeletingSyncUp-03-code-0010.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.destination?.edit?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.destination = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0010.swift","type":"file","fileType":"swift","highlights":[{"line":40},{"line":53},{"line":56}]},"EditingAndDeletingSyncUp-02-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":57}]},"EditingAndDeletingSyncUp-03-code-0012.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.destination?.edit?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.destination = nil","        return .none","","      case .editButtonTapped:","        \/\/ state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        state.destination = .edit(SyncUpForm.State(syncUp: state.syncUp))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","","extension AlertState where Action == SyncUpDetail.Destination.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0012.swift","type":"file","fileType":"swift","highlights":[{"line":69}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"role":"article","title":"Sync-up detail","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/sync-up-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"role":"pseudoSymbol","title":"Integrating the feature domains together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together"},"EditingAndDeletingSyncUp-03-code-0011.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.destination?.edit?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.destination = nil","        return .none","","      case .editButtonTapped:","        \/\/ state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        state.destination = .edit(SyncUpForm.State(syncUp: state.syncUp))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0011.swift","type":"file","fileType":"swift","highlights":[{"line":60},{"line":61}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"role":"project","title":"What is SyncUps?","estimatedTime":"5min","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/whatissyncups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"role":"project","title":"Sync-up form","estimatedTime":"15min","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupform"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"role":"pseudoSymbol","title":"Asking for speech recognition permission","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"role":"pseudoSymbol","title":"Create the sync-up detail","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"role":"article","title":"Persisting sync-ups to disk","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"role":"pseudoSymbol","title":"Create the SyncUps project","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project"},"EditingAndDeletingSyncUp-03-code-0008.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0008.swift","type":"file","fileType":"swift","highlights":[{"line":45}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"role":"pseudoSymbol","title":"Form focus: an approach","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"role":"pseudoSymbol","title":"Sync-up form basics","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics"},"EditingAndDeletingSyncUp-01-code-0010.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0010.swift","type":"file","fileType":"swift","highlights":[{"line":23},{"line":24},{"line":25},{"line":26}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"role":"pseudoSymbol","title":"Create a new feature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature"},"EditingAndDeletingSyncUp-02-cover-480p.mov":{"poster":null,"alt":null,"type":"video","identifier":"EditingAndDeletingSyncUp-02-cover-480p.mov","variants":[{"url":"\/videos\/EditingAndDeletingSyncUp-02-cover-480p.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"role":"pseudoSymbol","title":"Testing the edit flow","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"role":"pseudoSymbol","title":"Removing attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees"},"EditingAndDeletingSyncUp-01-code-0007.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0007.swift","type":"file","fileType":"swift","highlights":[{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92}]},"EditingAndDeletingSyncUp-01-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":25}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"role":"pseudoSymbol","title":"Integrating the feature views together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"role":"symbol","title":"run(priority:operation:catch:fileID:line:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"role":"pseudoSymbol","title":"Deleting the sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up"},"EditingAndDeletingSyncUp-03-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .destination:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    \/\/ .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","    \/\/   SyncUpForm()","    \/\/ }","    \/\/ .ifLet(\\.$alert, action: \\.alert)","    .ifLet(\\.$destination, action: \\.destination)","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":54},{"line":55},{"line":56},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"role":"pseudoSymbol","title":"Navigating to the record meeting feature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature"},"EditingAndDeletingSyncUp-02-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21}]},"EditingAndDeletingSyncUp-03-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","  }","  \/\/ ...","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"role":"pseudoSymbol","title":"A basic timer","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer"},"EditingAndDeletingSyncUp-03-code-0009.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","        ","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.destination = nil","        return .none","","      case .deleteButtonTapped:","        \/\/ state.alert = .deleteSyncUp","        state.destination = .alert(.deleteSyncUp)","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0009.swift","type":"file","fileType":"swift","highlights":[{"line":40},{"line":49},{"line":50}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"role":"article","title":"Record meeting","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/record-meeting"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"role":"article","title":"What is SyncUps?","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/what-is-syncups-"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"role":"pseudoSymbol","title":"Adding attendees","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/fileStorage(_:)":{"role":"symbol","title":"fileStorage(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fileStorage"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"URL","preciseIdentifier":"s:10Foundation3URLV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Creates a persistence key that can read and write to a "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value to the file system."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/filestorage(_:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"role":"project","title":"Editing and deleting a sync-up","estimatedTime":"30min","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducers#Circular-reference-errors":{"abstract":[],"title":"Circular reference errors","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers#Circular-reference-errors","url":"\/documentation\/composablearchitecture\/reducers#Circular-reference-errors"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"role":"symbol","title":"DismissEffect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DismissEffect"}],"abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"role":"pseudoSymbol","title":"Testing the timer","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer"},"EditingAndDeletingSyncUp-02-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":14}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"role":"symbol","title":"Presents()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Wraps a property with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and observes it."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/presents()"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"role":"article","title":"Presenting the sync-up form","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form"},"EditingAndDeletingSyncUp-03-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    \/\/ @Presents var alert: AlertState<Action.Alert>?","    \/\/ @Presents var editSyncUp: SyncUpForm.State?","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"role":"pseudoSymbol","title":"Creating the app view","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"role":"pseudoSymbol","title":"Testing persistence","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"role":"article","title":"Lists of sync-ups","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups"},"EditingAndDeletingSyncUp-01-cover-480p.mov":{"poster":null,"alt":null,"type":"video","identifier":"EditingAndDeletingSyncUp-01-cover-480p.mov","variants":[{"url":"\/videos\/EditingAndDeletingSyncUp-01-cover-480p.mov","traits":["1x","light"]}]},"EditingAndDeletingSyncUp-03-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","  \/\/ ...","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"role":"pseudoSymbol","title":"Creating the app feature","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"role":"project","title":"The RecordMeeting feature","estimatedTime":"5min","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature"},"EditingAndDeletingSyncUp-02-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":8}]},"EditingAndDeletingSyncUp-03-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .destination:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0006.swift","type":"file","fileType":"swift","highlights":[{"line":35},{"line":36}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"role":"pseudoSymbol","title":"Writing your first test","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"role":"pseudoSymbol","title":"Persisting data to disk","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"role":"article","title":"New sync-up form","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/new-sync-up-form"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"role":"project","title":"Sync-up detail","estimatedTime":"5min","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupdetail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"role":"pseudoSymbol","title":"Domain models","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models"},"EditingAndDeletingSyncUp-02-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) {","      ","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":57},{"line":58},{"line":59}]},"EditingAndDeletingSyncUp-01-code-0009.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0009.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":15}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Send":{"role":"symbol","title":"Send","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Send"}],"abstract":[{"type":"text","text":"A type that can send actions back into the system when used from"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Send","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Send"}],"url":"\/documentation\/composablearchitecture\/send"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"role":"pseudoSymbol","title":"Navigating to the detail","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail"},"EditingAndDeletingSyncUp-02-code-0009.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        ","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0009.swift","type":"file","fileType":"swift","highlights":[{"line":32}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"role":"project","title":"Lists of sync-ups","estimatedTime":"10min","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/listsofsyncups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"role":"pseudoSymbol","title":"Navigate to a meeting","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","title":"PresentationAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction"},"EditingAndDeletingSyncUp-01-code-0008.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","                store.send(.cancelEditButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","                store.send(.doneEditingButtonTapped)","              }","            }","          }","      }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0008.swift","type":"file","fileType":"swift","highlights":[{"line":86},{"line":91}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"role":"article","title":"Navigating to sync-up detail","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","kind":"article","type":"topic","url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"role":"pseudoSymbol","title":"Controlling dependencies early","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"role":"project","title":"Testing the list of sync-ups","estimatedTime":"5min","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"type":"text","text":" "},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"type":"text","text":" "},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"role":"project","title":"Testing the add sync-up flow","estimatedTime":"10min","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","title":"PresentationState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"EditingAndDeletingSyncUp-02-code-0013.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}",""],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0013.swift","type":"file","fileType":"swift","highlights":[{"line":34}]},"https://swiftpackageindex.com/pointfreeco/swiftui-navigation/1.2.0/documentation/swiftuinavigationcore/alertstate":{"title":"AlertState","titleInlineContent":[{"type":"codeVoice","code":"AlertState"}],"type":"link","identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swiftui-navigation\/1.2.0\/documentation\/swiftuinavigationcore\/alertstate","url":"https:\/\/swiftpackageindex.com\/pointfreeco\/swiftui-navigation\/1.2.0\/documentation\/swiftuinavigationcore\/alertstate"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"role":"project","title":"Adding a meeting timer","estimatedTime":"25min","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/implementingtimer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"role":"pseudoSymbol","title":"Form focus: a better approach","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing"},"EditingAndDeletingSyncUp-02-code-0011.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .none","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}",""],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0011.swift","type":"file","fileType":"swift","highlights":[{"line":31},{"line":32},{"line":85}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/Binding/scope(state:action:fileID:line:)":{"role":"symbol","title":"scope(state:action:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">?>"}],"abstract":[{"type":"text","text":"Scopes the binding of a store to a binding of an optional presentation store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/Binding\/scope(state:action:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/binding\/scope(state:action:fileid:line:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"role":"project","title":"Testing navigation","estimatedTime":"10min","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingnavigation"},"EditingAndDeletingSyncUp-02-code-0012.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .none","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}",""],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0012.swift","type":"file","fileType":"swift","highlights":[{"line":26},{"line":27}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"role":"pseudoSymbol","title":"Adding a sync-up","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up"},"EditingAndDeletingSyncUp-02-code-0008.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        ","      case .alert(.dismiss):","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0008.swift","type":"file","fileType":"swift","highlights":[{"line":29},{"line":31},{"line":32}]},"EditingAndDeletingSyncUp-01-code-0011.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0011.swift","type":"file","fileType":"swift","highlights":[{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/View/alert(_:)":{"role":"symbol","title":"alert(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"alert"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AlertState","preciseIdentifier":"s:21SwiftUINavigationCore10AlertStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">?>) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}],"abstract":[{"type":"text","text":"Presents an alert when a piece of optional state held in a store becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/View\/alert(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/view\/alert(_:)"},"EditingAndDeletingSyncUp-02-code-0014.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","                store.send(.cancelEditButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","                store.send(.doneEditingButtonTapped)","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0014.swift","type":"file","fileType":"swift","highlights":[{"line":79}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"role":"project","title":"Presenting the sync-up form","estimatedTime":"10min","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/presentingsyncupform"},"EditingAndDeletingSyncUp-01-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":31},{"line":32},{"line":33}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"role":"pseudoSymbol","title":"A tour of SyncUps","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"role":"project","title":"Navigating to a meeting","estimatedTime":"5min","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/meetingnavigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"role":"pseudoSymbol","title":"Ending the meeting early","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"role":"pseudoSymbol","title":"A handy debugging tool","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool"},"EditingAndDeletingSyncUp-01-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        return .none","      }","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":8}]},"EditingAndDeletingSyncUp-03-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    \/\/ case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","    \/\/ case editSyncUp(PresentationAction<SyncUpForm.Action>)","    \/\/ enum Alert {","    \/\/   case confirmButtonTapped","    \/\/ }","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":23},{"line":26},{"line":29},{"line":30},{"line":31},{"line":32}]},"EditingAndDeletingSyncUp-01-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .sheet(item: $store.scope(state: \\.editSyncUp, action: \\.editSyncUp)) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0006.swift","type":"file","fileType":"swift","highlights":[{"line":79},{"line":80},{"line":81},{"line":82},{"line":83}]},"http://github.com/pointfreeco/swiftui-navigation":{"title":"SwiftUINavigation","titleInlineContent":[{"type":"text","text":"SwiftUINavigation"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swiftui-navigation","url":"http:\/\/github.com\/pointfreeco\/swiftui-navigation"},"EditingAndDeletingSyncUp-02-code-0007.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0007.swift","type":"file","fileType":"swift","highlights":[{"line":37},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"role":"project","title":"Navigating to a sync-up detail","estimatedTime":"20min","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation"},"EditingAndDeletingSyncUp-01-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":10}]},"EditingAndDeletingSyncUp-02-code-0010.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmButtonTapped)):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","","      case .alert(.dismiss):","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0010.swift","type":"file","fileType":"swift","highlights":[{"line":30},{"line":31}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"role":"overview","title":"Building SyncUps","abstract":[{"type":"text","text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,"},{"type":"text","text":" "},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"type":"text","text":"domain modeling, controlling dependencies, and testability."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","kind":"overview","type":"topic","url":"\/tutorials\/buildingsyncups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"role":"pseudoSymbol","title":"More concise domain modeling","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"role":"symbol","title":"Shared","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Shared"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"url":"\/documentation\/composablearchitecture\/shared"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"role":"project","title":"Adding a speech recognizer","estimatedTime":"10min","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"type":"codeVoice","code":"SFSpeechRecognizer"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"role":"pseudoSymbol","title":"Adding a new sync-up to the list","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list"},"EditingAndDeletingSyncUp-02-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case alert(PresentationAction<Alert>)","    case cancelEditButtonTapped","    case deleteButtonTapped","    case doneEditingButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert:","        return .none","        ","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .deleteButtonTapped:","        state.alert = AlertState {","          TextState(\"Delete?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmButtonTapped) {","            TextState(\"Yes\")","          }","          ButtonState(role: .cancel) {","            TextState(\"Nevermind\")","          }","        } message: {","          TextState(\"Are you sure you want to delete this meeting?\")","        }","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","","      case .editSyncUp:","        return .none","      }","    }","    .ifLet(\\.$editSyncUp, action: \\.editSyncUp) {","      SyncUpForm()","    }","    .ifLet(\\.$alert, action: \\.alert) ","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-02-code-0006.swift","type":"file","fileType":"swift","highlights":[{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48}]},"EditingAndDeletingSyncUp-03-code-0013.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  \/\/ ...","}","","struct SyncUpDetailView: View {","  @Bindable var store: StoreOf<SyncUpDetail>","","  var body: some View {","    Form {","      Section {","        NavigationLink {","        } label: {","          Label(\"Start Meeting\", systemImage: \"timer\")","            .font(.headline)","            .foregroundColor(.accentColor)","        }","        HStack {","          Label(\"Length\", systemImage: \"clock\")","          Spacer()","          Text(store.syncUp.duration.formatted(.units()))","        }","","        HStack {","          Label(\"Theme\", systemImage: \"paintpalette\")","          Spacer()","          Text(store.syncUp.theme.name)","            .padding(4)","            .foregroundColor(store.syncUp.theme.accentColor)","            .background(store.syncUp.theme.mainColor)","            .cornerRadius(4)","        }","      } header: {","        Text(\"Sync-up Info\")","      }","","      if !store.syncUp.meetings.isEmpty {","        Section {","          ForEach(store.syncUp.meetings) { meeting in","            Button {","            } label: {","              HStack {","                Image(systemName: \"calendar\")","                Text(meeting.date, style: .date)","                Text(meeting.date, style: .time)","              }","            }","          }","        } header: {","          Text(\"Past meetings\")","        }","      }","","      Section {","        ForEach(store.syncUp.attendees) { attendee in","          Label(attendee.name, systemImage: \"person\")","        }","      } header: {","        Text(\"Attendees\")","      }","","      Section {","        Button(\"Delete\") {","          store.send(.deleteButtonTapped)","        }","        .foregroundColor(.red)","        .frame(maxWidth: .infinity)","      }","    }","    .toolbar {","      Button(\"Edit\") {","        store.send(.editButtonTapped)","      }","    }","    .navigationTitle(Text(store.syncUp.title))","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","    .sheet(","      item: $store.scope(state: \\.destination?.edit, action: \\.destination.edit)","    ) { editSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: editSyncUpStore)","          .navigationTitle(store.syncUp.title)","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Cancel\") {","                store.send(.cancelEditButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Done\") {","                store.send(.doneEditingButtonTapped)","              }","            }","          }","      }","    }","  }","}","","#Preview {","  NavigationStack {","    SyncUpDetailView(","      store: Store(","        initialState: SyncUpDetail.State(","          syncUp: Shared(.mock)","        )","      ) {","        SyncUpDetail()","      }","    )","  }","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0013.swift","type":"file","fileType":"swift","highlights":[{"line":78},{"line":79},{"line":80},{"line":81},{"line":82}]},"EditingAndDeletingSyncUp-03-code-0007.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @Reducer(state: .equatable)","  enum Destination {","    case alert(AlertState<Alert>)","    case edit(SyncUpForm)","    @CasePathable","    enum Alert {","      case confirmButtonTapped","    }","  }","","  @ObservableState","  struct State: Equatable {","    @Presents var destination: Destination.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case cancelEditButtonTapped","    case deleteButtonTapped","    case destination(PresentationAction<Destination.Action>)","    case doneEditingButtonTapped","    case editButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      \/\/ case .alert(.presented(.confirmButtonTapped)):","      case .destination(.presented(.alert(.confirmButtonTapped))):","        @Shared(.fileStorage(.syncUps)) var syncUps: IdentifiedArrayOf<SyncUp> = []","        syncUps.remove(id: state.syncUp.id)","        return .run { _ in await dismiss() }","","      case .destination:","        return .none","","      case .cancelEditButtonTapped:","        state.editSyncUp = nil","        return .none","","      case .delegate:","        return .none","","      case .deleteButtonTapped:","        state.alert = .deleteSyncUp","        return .none","","      case .doneEditingButtonTapped:","        guard let editedSyncUp = state.editSyncUp?.syncUp","        else { return .none }","        state.syncUp = editedSyncUp","        state.editSyncUp = nil","        return .none","","      case .editButtonTapped:","        state.editSyncUp = SyncUpForm.State(syncUp: state.syncUp)","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}","","extension AlertState where Action == SyncUpDetail.Action.Alert {","  static let deleteSyncUp = Self {","    TextState(\"Delete?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmButtonTapped) {","      TextState(\"Yes\")","    }","    ButtonState(role: .cancel) {","      TextState(\"Nevermind\")","    }","  } message: {","    TextState(\"Are you sure you want to delete this meeting?\")","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-03-code-0007.swift","type":"file","fileType":"swift","highlights":[{"line":41}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"role":"project","title":"Testing the sync-up detail","estimatedTime":"10min","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"type":"text","text":" "},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"type":"text","text":" "},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"type":"text","text":"changes with confidence."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"role":"pseudoSymbol","title":"Editing the sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"role":"pseudoSymbol","title":"SyncUpsList feature","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"role":"project","title":"Testing the sync-up form","estimatedTime":"10min","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come"},{"type":"text","text":" "},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupform"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"role":"project","title":"Persisting sync-ups","estimatedTime":"5min","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/persistingsyncups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"role":"pseudoSymbol","title":"The meeting screen","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer(state:action:)":{"role":"symbol","title":"Reducer(state:action:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV"},{"kind":"text","text":"..., "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV"},{"kind":"text","text":"...)"}],"abstract":[{"type":"text","text":"An overload of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" that takes a description of protocol conformances to synthesize"},{"type":"text","text":" "},{"type":"text","text":"on the State and Action types"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer(state:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer(state:action:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"role":"pseudoSymbol","title":"Deleting a sync-up","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"type":"text","text":" "},{"type":"text","text":"3 features into the stack: the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MeetingView"},{"type":"text","text":". Some of these features have quite complex logic binding them together, such as"},{"type":"text","text":" "},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:then:fileID:line:)-42kki":{"role":"symbol","title":"ifLet(_:action:then:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"WrappedState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"WrappedAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"WrappedState"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"WrappedAction"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"then"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_IfLetReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:then:fileID:line:)-42kki","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:then:fileid:line:)-42kki"},"EditingAndDeletingSyncUp-01-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpDetail {","  @ObservableState","  struct State: Equatable {","    @Presents var editSyncUp: SyncUpForm.State?","    @Shared var syncUp: SyncUp","  }","","  enum Action {","    case deleteButtonTapped","    case editButtonTapped","    case editSyncUp(PresentationAction<SyncUpForm.Action>)","  }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .deleteButtonTapped:","        return .none","","      case .editButtonTapped:","        return .none","      }","    }","  }","}","","struct SyncUpDetailView: View {","  \/\/ ...","}"],"fileName":"SyncUpDetail.swift","identifier":"EditingAndDeletingSyncUp-01-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":15}]}}}