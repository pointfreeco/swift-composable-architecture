{"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"kind":"relationships"}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf"],"anchor":"Creating-an-effect","title":"Creating an effect","generated":true}],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"type":"codeVoice","code":"Result"},{"type":"text","text":" "},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"type":"text","text":" "},{"text":"untyped ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":".","type":"text"}],"sections":[],"kind":"symbol","topicSections":[{"title":"Representing a task result","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"],"anchor":"Representing-a-task-result"},{"anchor":"Converting-a-throwing-expression","title":"Converting a throwing expression","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"],"anchor":"Accessing-a-results-value","title":"Accessing a result’s value"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)"],"anchor":"Transforming-results","title":"Transforming results"},{"title":"Default Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations"],"anchor":"Default-Implementations","generated":true}],"metadata":{"title":"TaskResult","roleHeading":"Enumeration","symbolKind":"enum","externalID":"s:22ComposableArchitecture10TaskResultO","platforms":[],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"role":"symbol","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"modules":[{"name":"ComposableArchitecture"}]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use 'Result', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.4#Moving-off-of-TaskResult","type":"text"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"},{"text":"<","kind":"text"},{"text":"Success","kind":"genericParameter"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type is needed because Swift’s concurrency tools can only express untyped errors, such as"},{"type":"text","text":" "},{"code":"async","type":"codeVoice"},{"text":" functions and ","type":"text"},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":", and so their output can realistically only be bridged to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Result<_, any Error>"},{"text":". However, ","type":"text"},{"code":"Result<_, any Error>","type":"codeVoice"},{"text":" is never ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" since ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" is not","type":"text"},{"type":"text","text":" "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", and equatability is very important for testing in the Composable Architecture. By"},{"type":"text","text":" "},{"type":"text","text":"defining our own type we get the ability to recover equatability in most situations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If someday Swift gets typed "},{"type":"codeVoice","code":"throws"},{"text":", then we can eliminate this type and rely solely on","type":"text"},{"text":" ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"You typically use this type as the payload of an action which receives a response from an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"effect:"}],"type":"paragraph"},{"syntax":"swift","code":["enum Action: Equatable {","  case factButtonTapped","  case factResponse(TaskResult<String>)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then you can model your dependency as using simple ","type":"text"},{"type":"codeVoice","code":"async"},{"type":"text","text":" and "},{"code":"throws","type":"codeVoice"},{"type":"text","text":" functionality:"}]},{"code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"And finally you can use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)"},{"type":"text","text":" to construct an"},{"type":"text","text":" "},{"type":"text","text":"effect in the reducer that invokes the "},{"code":"numberFact","type":"codeVoice"},{"text":" endpoint and wraps its response in a","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"type":"text","text":" by using its catching initializer, "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .factButtonTapped:","  return .run { send in","    await send(","      .factResponse(","        TaskResult { try await self.numberFact.fetch(state.number) }","      )","    )","  }","","case let .factResponse(.success(fact)):","  \/\/ do something with fact","","case .factResponse(.failure):","  \/\/ handle error","","\/\/ ...","}"]},{"type":"heading","text":"Equality","anchor":"Equality","level":2},{"type":"paragraph","inlineContent":[{"text":"The biggest downside to using an untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" in a result type is that the result will not","type":"text"},{"type":"text","text":" "},{"text":"be equatable even if the success type is. This negatively affects your ability to test features","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" in their actions with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"type":"text","text":" does extra work to try to maintain equatability when possible. If the underlying"},{"type":"text","text":" "},{"type":"text","text":"type masked by the "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Equatable"},{"text":", then it will use that ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" conformance"},{"type":"text","text":" "},{"text":"on two failures. Luckily, most errors thrown by Apple’s frameworks are already equatable, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because errors are typically simple value types, it is usually possible to have the compiler"},{"text":" ","type":"text"},{"text":"synthesize a conformance for you.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are testing the unhappy path of a feature that feeds a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"text":" back into the","type":"text"},{"text":" ","type":"text"},{"text":"system, be sure to conform the error to equatable, or the test will fail:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error {}","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ 🛑","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}","\/\/ 🛑 'RefreshFailure' is not equatable"]},{"inlineContent":[{"type":"text","text":"To get a passing test, explicitly conform your custom error to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error, Equatable {} \/\/ 👈","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ ✅","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}"]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/taskresult"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/send(_:)":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","role":"symbol","url":"\/documentation\/composablearchitecture\/effect\/send(_:)","abstract":[{"type":"text","text":"Initializes an effect that immediately emits the action passed in."}],"kind":"symbol","title":"send(_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(_:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/init(_:)","deprecated":true,"abstract":[{"text":"Transforms a ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" into a ","type":"text"},{"type":"codeVoice","code":"TaskResult"},{"text":", erasing its ","type":"text"},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Failure","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s6ResultO","text":"Result","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Failure"},{"text":">)","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/failure(_:)":{"url":"\/documentation\/composablearchitecture\/taskresult\/failure(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"failure","kind":"identifier"},{"text":"(any ","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"TaskResult.failure(_:)","deprecated":true,"type":"topic","abstract":[{"type":"text","text":"A failure, storing an error."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","title":"none","role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"none"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"text":" ","type":"text"},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"url":"\/documentation\/composablearchitecture\/effect\/none"},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/equatable-implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","kind":"symbol","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/flatMap(_:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/flatmap(_:)","deprecated":true,"abstract":[{"text":"Returns a new task result, mapping any success value using the given transformation and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"unwrapping the produced result."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","title":"flatMap(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"flatMap"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"NewSuccess"},{"text":">((","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"TaskResult","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/map(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"map"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"NewSuccess"},{"text":">((","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"TaskResult","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/taskresult\/map(_:)","type":"topic","role":"symbol","deprecated":true,"abstract":[{"text":"Returns a new task result, mapping any success value using the given transformation.","type":"text"}],"kind":"symbol","title":"map(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","type":"topic","title":"TestStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/SH":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH","title":"Swift.Hashable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"deprecated":true,"title":"TaskResult","abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"type":"codeVoice","code":"Result"},{"type":"text","text":" "},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/taskresult","navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"TaskResult","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Result/init(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Success","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Success","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" and ","type":"text"},{"code":"Failure","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"any Error","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/composablearchitecture\/swift\/result\/init(_:)","type":"topic","role":"symbol","abstract":[{"text":"Transforms a ","type":"text"},{"type":"codeVoice","code":"TaskResult"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"Result"},{"text":".","type":"text"}],"kind":"symbol","title":"init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"run"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"run(priority:operation:catch:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Hashable-Implementations":{"role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/hashable-implementations","title":"Hashable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations","kind":"article","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectOf":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf","role":"symbol","url":"\/documentation\/composablearchitecture\/effectof","navigatorTitle":[{"text":"EffectOf","kind":"identifier"}],"abstract":[{"type":"text","text":"A convenience type alias for referring to an effect of a given reducer’s domain."}],"kind":"symbol","title":"EffectOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EffectOf"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/CasePathable-Implementations":{"title":"CasePathable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","kind":"article","type":"topic","abstract":[],"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/taskresult\/casepathable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(catching:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"catching","kind":"externalParam"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","url":"\/documentation\/composablearchitecture\/taskresult\/init(catching:)","abstract":[{"type":"text","text":"Creates a new task result by evaluating an async throwing closure, capturing the returned"},{"text":" ","type":"text"},{"type":"text","text":"value as a success, or any thrown error as a failure."}],"type":"topic","title":"init(catching:)","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/success(_:)":{"kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"success"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Success"},{"text":")","kind":"text"}],"url":"\/documentation\/composablearchitecture\/taskresult\/success(_:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A success, storing a "},{"type":"codeVoice","code":"Success"},{"text":" value.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","title":"TaskResult.success(_:)","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"title":"Reducer"},"doc://ComposableArchitecture/9CasePaths0A8PathableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","title":"CasePaths.CasePathable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/value":{"abstract":[{"type":"text","text":"Returns the success value as a throwing property."}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/value","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"text":"Success","kind":"typeIdentifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value","title":"value","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"role":"symbol"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable"}}}