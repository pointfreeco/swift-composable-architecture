{"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/appstoragekeypathkey\/init(_:)"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKeyPathKey"]]},"deprecationSummary":[{"inlineContent":[{"text":"Use an 'AppStorageKey', instead","type":"text"}],"type":"paragraph"}],"metadata":{"roleHeading":"Initializer","platforms":[],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_SendableReferenceWritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture33_SendableReferenceWritableKeyPatha"},{"text":"<","kind":"text"},{"text":"UserDefaults","kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSUserDefaults"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"externalID":"s:22ComposableArchitecture017AppStorageKeyPathE0VyACyxGs8Sendable_s017ReferenceWritableeF0CySo14NSUserDefaultsCxGXccfc","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"init","role":"symbol","title":"init(_:)"},"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"keyPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture33_SendableReferenceWritableKeyPatha","text":"_SendableReferenceWritableKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"c:objc(cs)NSUserDefaults","text":"UserDefaults"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"text":">)","kind":"text"}],"languages":["swift"]}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKeyPathKey\/init(_:)","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKeyPathKey":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AppStorageKeyPathKey","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKeyPathKey","role":"symbol","navigatorTitle":[{"text":"AppStorageKeyPathKey","kind":"identifier"}],"abstract":[{"type":"text","text":"A type defining a user defaults persistence strategy via key path."}],"type":"topic","kind":"symbol","title":"AppStorageKeyPathKey","deprecated":true,"url":"\/documentation\/composablearchitecture\/appstoragekeypathkey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKeyPathKey/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_SendableReferenceWritableKeyPath","preciseIdentifier":"s:22ComposableArchitecture33_SendableReferenceWritableKeyPatha","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"UserDefaults","preciseIdentifier":"c:objc(cs)NSUserDefaults","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKeyPathKey\/init(_:)","role":"symbol","abstract":[],"type":"topic","kind":"symbol","title":"init(_:)","deprecated":true,"url":"\/documentation\/composablearchitecture\/appstoragekeypathkey\/init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","role":"collection","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"}}}