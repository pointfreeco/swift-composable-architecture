{"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"project","variants":[{"paths":["\/tutorials\/composablearchitecture\/testingsyncupformpresentation"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"content":[{"inlineContent":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"text":" ","type":"text"},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"type":"paragraph"}],"estimatedTimeInMinutes":10,"kind":"hero","chapter":"Presenting the sync-up form","title":"Testing the add sync-up flow"},{"kind":"tasks","tasks":[{"title":"Adding a sync-up","stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These new tests will go in the SyncUpsListTests.swift file since we are testing the"},{"type":"text","text":" "},{"type":"text","text":"integration of the list feature with the form feature. We already have one, very simple test"},{"type":"text","text":" "},{"type":"text","text":"in this file for the deletion logic (code is currently omitted from the snippet). Add a new"},{"type":"text","text":" "},{"type":"text","text":"test method for the flow of adding a sync-up."}]}],"code":"TestingSyncUpFormPresentation-01-code-0001.swift","caption":[],"media":null,"runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"As with every test in the Composable Architecture, we start by creating a","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":" for the feature we are testing. We will start the","type":"text"},{"text":" ","type":"text"},{"text":"feature in a state with no sync-ups.","type":"text"}],"type":"paragraph"}],"code":"TestingSyncUpFormPresentation-01-code-0002.swift","caption":[],"media":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user tapping on the “+” button in the top-right of the interface by sending the","type":"text"},{"text":" ","type":"text"},{"code":"addSyncUpButtonTapped","type":"codeVoice"},{"text":" action. When that action is sent we expect the ","type":"text"},{"code":"addSyncUp","type":"codeVoice"},{"text":" state to","type":"text"},{"text":" ","type":"text"},{"text":"be populated, representing that the sheet should appear.","type":"text"}]}],"code":"TestingSyncUpFormPresentation-01-code-0003.swift","caption":[],"media":null,"runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Run the test to see that unfortunately it fails."}],"type":"paragraph"}],"code":"TestingSyncUpFormPresentation-01-code-0004.swift","caption":[],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The problem is similar to what we encountered while writing tests for the "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":" "},{"type":"text","text":"feature. We are using an uncontrolled dependency in the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature for generating"},{"type":"text","text":" "},{"type":"text","text":"UUIDs. We now need to control that dependency."}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to SyncUpsList.swift and add a dependency on the UUID generator."}]}],"code":"TestingSyncUpFormPresentation-01-code-0005.swift","caption":[],"media":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Use the controlled UUID generator rather than reaching out the global, uncontrolled UUID","type":"text"},{"text":" ","type":"text"},{"text":"initializer.","type":"text"}]}],"code":"TestingSyncUpFormPresentation-01-code-0006.swift","caption":[],"media":null,"runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"Go back to SyncUpsListTests.swift and override the ","type":"text"},{"code":"uuid","type":"codeVoice"},{"text":" dependency to be ","type":"text"},{"code":".incrementing","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This way we can predict what UUIDs will be generated by the feature in tests.","type":"text"}],"type":"paragraph"}],"code":"TestingSyncUpFormPresentation-01-code-0007.swift","caption":[],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we can predict what UUIDs will be generated in the feature. The first time a UUID is"},{"type":"text","text":" "},{"type":"text","text":"created it will be 00000000-0000-0000-0000-000000000000. Then the next time it will be"},{"type":"text","text":" "},{"type":"text","text":"00000000-0000-0000-0000-000000000001. And on, and on, and on…"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the assertion to confirm that the newly created "},{"type":"codeVoice","code":"SyncUp"},{"type":"text","text":" should have an ID that is"},{"type":"text","text":" "},{"type":"text","text":"the UUID with all 0s."}]}],"code":"TestingSyncUpFormPresentation-01-code-0008.swift","caption":[],"media":null,"runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"Now the test passes with flying colors!","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"But we also haven’t tested too much yet. We’ve just confirmed that when the user taps the “+”","type":"text"},{"text":" ","type":"text"},{"text":"that some state in the feature is populated. Let’s now emulate the user making some changes to","type":"text"},{"text":" ","type":"text"},{"text":"the sync-up in the form, and then confirming the addition of the sync-up to the root list.","type":"text"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user editing some details of the sync-up. To do this we need to send an action","type":"text"},{"text":" ","type":"text"},{"text":"in the sync-up form’s domain, which can be done by sending a nested enum action that","type":"text"},{"text":" ","type":"text"},{"text":"represents an action in the ","type":"text"},{"code":"addSyncUp","type":"codeVoice"},{"text":" domain.","type":"text"}]}],"code":"TestingSyncUpFormPresentation-01-code-0009.swift","caption":[{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are using key path syntax to describe the nested action to send."}]}],"style":"note","name":"Note"}],"media":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the "},{"code":".addSyncUp","type":"codeVoice"},{"type":"text","text":" case we can send any action in the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" domain. In"},{"type":"text","text":" "},{"type":"text","text":"particular we know that the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" has a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"that was used to bind the "},{"code":"syncUp","type":"codeVoice"},{"type":"text","text":" to various UI controls in the view. We can send a binding"},{"type":"text","text":" "},{"type":"text","text":"action by chaining onto "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/binding(_:)","isActive":true,"type":"reference"},{"type":"text","text":":"}]}],"code":"TestingSyncUpFormPresentation-01-code-0010.swift","caption":[],"media":null,"runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Inside the "},{"code":".binding","type":"codeVoice"},{"type":"text","text":" case we can further chain onto any field in the feature’s state"},{"type":"text","text":" "},{"type":"text","text":"to update it. Construct a new "},{"code":"SyncUp","type":"codeVoice"},{"type":"text","text":" that represents the edits that are made by the user,"},{"type":"text","text":" "},{"type":"text","text":"and assert on how we expect the state to change."}],"type":"paragraph"}],"code":"TestingSyncUpFormPresentation-01-code-0011.swift","caption":[],"media":null,"runtimePreview":null},{"inlineContent":[{"text":"Run the test to see that it passes!","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"We have now emulated the user opening the “Add sync-up” sheet and making some edits to the","type":"text"},{"text":" ","type":"text"},{"text":"sync-up. Let’s tie the knot by now emulating the user confirming to add the sync-up to the","type":"text"},{"text":" ","type":"text"},{"text":"root list.","type":"text"}]},{"caption":[],"media":null,"type":"step","content":[{"inlineContent":[{"text":"Emulate the user tapping on the “Add” button in the sheet.","type":"text"}],"type":"paragraph"}],"code":"TestingSyncUpFormPresentation-01-code-0012.swift","runtimePreview":null},{"caption":[],"media":null,"type":"step","content":[{"inlineContent":[{"text":"Run the test to see that we get a failure.","type":"text"}],"type":"paragraph"}],"code":"TestingSyncUpFormPresentation-01-code-0013.swift","runtimePreview":null},{"inlineContent":[{"type":"text","text":"This is happening because when the addition of the sync-up is confirmed, the root"},{"type":"text","text":" "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" feature mutates its state to add the sync-up, and it clears out the "},{"code":"addSyncUp","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"state in order to dismiss the sheet. The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"type":"text","text":" forces us to"},{"type":"text","text":" "},{"type":"text","text":"assert on "},{"type":"emphasis","inlineContent":[{"text":"everything","type":"text"}]},{"type":"text","text":" happening in the feature so that if someday we accidentally remove"},{"type":"text","text":" "},{"type":"text","text":"that dismissal logic we will instantly get a test failure."}],"type":"paragraph"},{"inlineContent":[{"text":"Let’s now assert on that logic.","type":"text"}],"type":"paragraph"},{"runtimePreview":null,"code":"TestingSyncUpFormPresentation-01-code-0014.swift","content":[{"inlineContent":[{"text":"Assert that after the ","type":"text"},{"type":"codeVoice","code":"confirmAddButtonTapped"},{"text":" is sent that the root ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"text":" feature","type":"text"},{"text":" ","type":"text"},{"text":"has updated its ","type":"text"},{"type":"codeVoice","code":"syncUps"},{"text":" array to have the newly edited sync-up, and it ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":"’s out the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"addSyncUp"},{"text":" state to represent dismissal of the sheet.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null},{"type":"paragraph","inlineContent":[{"text":"We now have a passing test, and it exercises the integration of two features. We have emulated","type":"text"},{"text":" ","type":"text"},{"text":"the full flow of a user bringing up the “New sync-up” sheet, making some changes, tapping","type":"text"},{"text":" ","type":"text"},{"text":"“Add”, and proved that the new sheet was added to the list and the sheet was dismissed. As","type":"text"},{"text":" ","type":"text"},{"text":"long as we have hooked everything up in the view properly, and as long as we trust SwiftUI to","type":"text"},{"text":" ","type":"text"},{"text":"do its  job, we can be confident this feature works the way we expect.","type":"text"}]}],"anchor":"Adding-a-sync-up","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Let’s start by testing the flow of adding a sync-up."}],"type":"paragraph"}],"mediaPosition":"trailing"}]},{"title":"Non-exhaustive testing","stepsSection":[{"caption":[],"type":"step","runtimePreview":null,"media":null,"code":"TestingSyncUpFormPresentation-02-code-0001.swift","content":[{"inlineContent":[{"text":"Add a new test method for testing the “Add sync-up” flow, but this time in a non-exhaustive","type":"text"},{"text":" ","type":"text"},{"text":"manner.","type":"text"}],"type":"paragraph"}]},{"caption":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The default value of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true,"type":"reference"},{"text":" is ","type":"text"},{"code":".on","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"text":"so typically it does not need to be set.","type":"text"}]}],"style":"note","name":"Note","type":"aside"}],"type":"step","runtimePreview":null,"media":null,"code":"TestingSyncUpFormPresentation-02-code-0002.swift","content":[{"inlineContent":[{"text":"Create a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" just like we did before, but this time we","type":"text"},{"text":" ","type":"text"},{"text":"will set the store’s ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"text":" to ","type":"text"},{"code":".off","type":"codeVoice"},{"text":". This","type":"text"},{"text":" ","type":"text"},{"text":"puts the test store in “non-exhaustive” mode.","type":"text"}],"type":"paragraph"}]},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Run the test to see that it passes.","type":"text"}]}],"type":"step","runtimePreview":null,"media":null,"code":"TestingSyncUpFormPresentation-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user tapping the “+” button in the UI by sending the ","type":"text"},{"code":".addSyncUpButtonTapped","type":"codeVoice"},{"text":" ","type":"text"},{"text":"action.","type":"text"}]}]},{"inlineContent":[{"text":"Already we can see a difference between non-exhaustive and exhaustive test stores. We are not","type":"text"},{"text":" ","type":"text"},{"text":"specifying the trailing closure in","type":"text"},{"text":" ","type":"text"},{"code":"ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","type":"codeVoice"},{"text":" to assert on state","type":"text"},{"text":" ","type":"text"},{"text":"changes, yet the test will still pass.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A non-exhaustive store operates similarly to an exhaustive one, but with a few key"},{"type":"text","text":" "},{"type":"text","text":"differences. In a non-exhaustive store, the "},{"type":"codeVoice","code":"$0"},{"type":"text","text":" handed to the trailing closure of"},{"type":"text","text":" "},{"type":"codeVoice","code":"ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"type":"text","text":" is the state "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"type":"text","text":" "},{"type":"text","text":"the action has been processed, whereas in an exhaustive test store it is the state "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This means in non-exhaustive test stores you do not have make any mutations in the trailing"},{"type":"text","text":" "},{"type":"text","text":"closure if you do not want to. And anything you "},{"type":"emphasis","inlineContent":[{"type":"text","text":"do"}]},{"type":"text","text":" set in the trailing closure must match"},{"type":"text","text":" "},{"type":"text","text":"what was already there in order for the test to pass. See the dedicated article"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing"},{"type":"text","text":" for more information."}],"type":"paragraph"},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Run the test to see that it passes.","type":"text"}]}],"type":"step","runtimePreview":null,"media":null,"code":"TestingSyncUpFormPresentation-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user making edits to the sync-up, but again do not provide a trailing closure.","type":"text"},{"text":" ","type":"text"},{"text":"We will not assert on how the state changes for this action.","type":"text"}]}]},{"caption":[{"inlineContent":[{"text":"Run the test to see that it passes.","type":"text"}],"type":"paragraph"}],"type":"step","runtimePreview":null,"media":null,"code":"TestingSyncUpFormPresentation-02-code-0005.swift","content":[{"inlineContent":[{"type":"text","text":"Emulate the user tapping the “Add” button to confirm adding the sync-up. This time we will"},{"type":"text","text":" "},{"type":"text","text":"provide an assertion trailing closure, but we will only assert that the edited sync-up was"},{"type":"text","text":" "},{"type":"text","text":"added to the root list."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"This test passes, and it proves at a very high level that when the user does the full “Add"},{"type":"text","text":" "},{"type":"text","text":"sync-up” flow that a sync-up is added to the root list without asserting on every little"},{"type":"text","text":" "},{"type":"text","text":"detail long the way."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There is an alternate non-exhaustive mode called"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","isActive":true},{"type":"text","text":". The"},{"type":"text","text":" "},{"type":"codeVoice","code":"showSkippedAssertions"},{"type":"text","text":" flag allows you to see what state you did not assert on without"},{"type":"text","text":" "},{"type":"text","text":"failing the test suite. The default value is "},{"type":"codeVoice","code":"false"},{"type":"text","text":", but it can be turned on explicitly."}],"type":"paragraph"},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see that it passes, but that for any state we did not assert on we get a"},{"type":"text","text":" "},{"type":"text","text":"grey informational box in Xcode letting us know what was skipped."}]}],"type":"step","runtimePreview":null,"media":null,"code":"TestingSyncUpFormPresentation-02-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Put the test store in the alternate non-exhaustive mode."}]}]},{"inlineContent":[{"type":"text","text":"This mode of non-exhaustive testing can be great for debugging. Non-exhaustive testing has"},{"type":"text","text":" "},{"type":"text","text":"the downside that you can have a passing test that is secretly hiding a production bug since"},{"type":"text","text":" "},{"type":"text","text":"you are not asserting on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"everything"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are seeing a mysterious bug in the simulator or device that you have test coverage for,"},{"type":"text","text":" "},{"type":"text","text":"then you can turn on "},{"code":"showSkippedAssertions","type":"codeVoice"},{"type":"text","text":" to get a view into what state you are not"},{"type":"text","text":" "},{"type":"text","text":"asserting on and search for the bug there."}],"type":"paragraph"}],"anchor":"Non-exhaustive-testing","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The test we wrote in the previous section is incredibly powerful, but also a bit verbose. As"},{"type":"text","text":" "},{"type":"text","text":"the features you test get more complex, and as you test the integration of more features, you"},{"type":"text","text":" "},{"type":"text","text":"may come to a point where you do not want to exhaustively assert on every little thing"},{"type":"text","text":" "},{"type":"text","text":"happening inside the features."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is where non-exhaustive testing is helpful. It allows you to write tests in the same"},{"type":"text","text":" "},{"type":"text","text":"style as before, but you can choose what state you want to assert on, and you can ignore state"},{"type":"text","text":" "},{"type":"text","text":"that is not interesting to you."}]},{"type":"paragraph","inlineContent":[{"text":"Typically you will have a mixture of exhaustive and non-exhaustive tests in your suite.","type":"text"},{"text":" ","type":"text"},{"text":"Exhaustive tests are a great default for testing leaf features, but every once in a while you","type":"text"},{"text":" ","type":"text"},{"text":"may want an exhaustive test on feature integrations. And then non-exhaustive tests are a great","type":"text"},{"text":" ","type":"text"},{"text":"default for testing the integration of features, and may make sense every once in a while on","type":"text"},{"text":" ","type":"text"},{"text":"leaf features.","type":"text"}]}]}]}]},{"abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":"."}],"kind":"callToAction","title":"Persisting sync-ups","action":{"type":"reference","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","isActive":true},"featuredEyebrow":"Tutorial"}],"metadata":{"category":"Building SyncUps","title":"Testing the add sync-up flow","categoryPathComponent":"BuildingSyncUps","role":"project"},"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form"]],"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow"}]}]},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission"}]}]}]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","interfaceLanguage":"swift"},"references":{"TestingSyncUpFormPresentation-01-code-0004.swift":{"highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}],"identifier":"TestingSyncUpFormPresentation-01-code-0004.swift","fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","    }","    \/\/ ❌ A state change does not match expectation: …","    \/\/","    \/\/       SyncUpsList.State(","    \/\/         _addSyncUp: SyncUpForm.State(","    \/\/           _focus: .title,","    \/\/           _syncUp: SyncUp(","    \/\/     −       id: Tagged(rawValue: UUID(46714C1B-449D-430C-9AE9-300BEF39D259))","    \/\/     +       id: Tagged(rawValue: UUID(29CEC58B-1FC1-443C-8178-D35C9CA062C1))","    \/\/             attendees: [],","    \/\/             duration: 5 minutes,","    \/\/             meetings: [],","    \/\/             theme: .bubblegum,","    \/\/             title: \"\"","    \/\/           )","    \/\/         ),","    \/\/         _syncUps: []","    \/\/       )","    \/\/","    \/\/ (Expected: −, Actual: +)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","syntax":"swift","fileName":"SyncUpsListTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","estimatedTime":"10min","kind":"project","url":"\/tutorials\/composablearchitecture\/presentingsyncupform","type":"topic","title":"Presenting the sync-up form","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"role":"pseudoSymbol","title":"Create a new feature","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature","type":"section","abstract":[{"text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will","type":"text"},{"text":" ","type":"text"},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","title":"Integrating the feature views together","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"estimatedTime":"10min","abstract":[{"text":"We have now implemented a navigation stack at the root of our application, and integrated","type":"text"},{"text":" ","type":"text"},{"text":"3 features into the stack: the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" feature, the ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature, and the","type":"text"},{"text":" ","type":"text"},{"code":"MeetingView","type":"codeVoice"},{"text":". Some of these features have quite complex logic binding them together, such as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack."}],"role":"project","type":"topic","kind":"project","title":"Testing navigation","url":"\/tutorials\/composablearchitecture\/testingnavigation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"type":"topic","title":"TestStore","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"abstract":[],"url":"\/tutorials\/buildingsyncups\/record-meeting","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","type":"topic","title":"Record meeting"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"abstract":[],"title":"Presenting the sync-up form","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","kind":"article","type":"topic","role":"article","url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","kind":"article","title":"Persisting sync-ups to disk","abstract":[],"url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk","type":"topic"},"TestingSyncUpFormPresentation-01-code-0007.swift":{"identifier":"TestingSyncUpFormPresentation-01-code-0007.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileType":"swift","syntax":"swift","fileName":"SyncUpsListTests.swift","highlights":[{"line":12},{"line":13}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"kind":"section","abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"role":"pseudoSymbol","type":"section","title":"The meeting screen","url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"type":"topic","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"type":"text","text":" "},{"type":"text","text":"to use Apple’s "},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"type":"text","text":" API to ask the user for permission to transcribe their"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"type":"text","text":" "},{"type":"text","text":"in progress."}],"title":"Adding a speech recognizer","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","role":"project","estimatedTime":"10min"},"TestingSyncUpFormPresentation-01-code-0001.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","identifier":"TestingSyncUpFormPresentation-01-code-0001.swift","fileName":"SyncUpsListTests.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"kind":"symbol","abstract":[{"text":"Non-exhaustive assertions.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","role":"symbol","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"off","kind":"identifier"},{"text":"(","kind":"text"},{"text":"showSkippedAssertions","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"Exhaustivity.off(showSkippedAssertions:)","url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"role":"project","estimatedTime":"5min","url":"\/tutorials\/composablearchitecture\/meetingnavigation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"type":"topic","kind":"project","title":"Navigating to a meeting"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"section","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics","title":"Sync-up form basics","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"title":"Creating the app view","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","kind":"section","role":"pseudoSymbol","title":"Removing attendees","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"title":"Editing the sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"role":"project","estimatedTime":"5min","type":"topic","title":"What is SyncUps?","url":"\/tutorials\/composablearchitecture\/whatissyncups","kind":"project","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps"},"TestingSyncUpFormPresentation-01-code-0008.swift":{"identifier":"TestingSyncUpFormPresentation-01-code-0008.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","fileType":"swift","syntax":"swift","fileName":"SyncUpsListTests.swift","highlights":[{"line":17},{"line":18},{"line":19}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","role":"article","kind":"article","url":"\/tutorials\/buildingsyncups\/what-is-syncups-","title":"What is SyncUps?","type":"topic"},"TestingSyncUpFormPresentation-01-code-0013.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","","    await store.send(.confirmAddButtonTapped)","    \/\/ ❌ State was not expected to change, but a change occurred: …","    \/\/","    \/\/       SyncUpsList.State(","    \/\/     −   _addSyncUp: SyncUpForm.State(","    \/\/     −     _focus: .title,","    \/\/     −     _syncUp: SyncUp(","    \/\/     −       id: Tagged(rawValue: UUID(00000000-0000-0000-0000-000000000000)),","    \/\/     −       attendees: [","    \/\/     −         [0]: Attendee(","    \/\/     −           id: Tagged(rawValue: UUID(0C804547-B60D-48D5-A5CC-BBC16D1B2287)),","    \/\/     −           name: \"Blob\"","    \/\/     −         ),","    \/\/     −         [1]: Attendee(","    \/\/     −           id: Tagged(rawValue: UUID(70B92063-FE08-458F-9703-E2E627A88EDA)),","    \/\/     −           name: \"Blob Jr.\"","    \/\/     −         )","    \/\/     −       ],","    \/\/     −       duration: 5 minutes,","    \/\/     −       meetings: [],","    \/\/     −       theme: .bubblegum,","    \/\/     −       title: \"Point-Free morning sync\"","    \/\/     −     )","    \/\/     −   ),","    \/\/     +   _addSyncUp: nil,","    \/\/         _syncUps: [","    \/\/     +     [0]: SyncUp(","    \/\/     +       id: Tagged(rawValue: UUID(00000000-0000-0000-0000-000000000000)),","    \/\/     +       attendees: [","    \/\/     +         [0]: Attendee(","    \/\/     +           id: Tagged(rawValue: UUID(0C804547-B60D-48D5-A5CC-BBC16D1B2287)),","    \/\/     +           name: \"Blob\"","    \/\/     +         ),","    \/\/     +         [1]: Attendee(","    \/\/     +           id: Tagged(rawValue: UUID(70B92063-FE08-458F-9703-E2E627A88EDA)),","    \/\/     +           name: \"Blob Jr.\"","    \/\/     +         )","    \/\/     +       ],","    \/\/     +       duration: 5 minutes,","    \/\/     +       meetings: [],","    \/\/     +       theme: .bubblegum,","    \/\/     +       title: \"Point-Free morning sync\"","    \/\/     +     )","    \/\/         ]","    \/\/       )","    \/\/","    \/\/ (Expected: −, Actual: +)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80}],"fileName":"SyncUpsListTests.swift","fileType":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0013.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up","abstract":[{"text":"We have now integrated two moderately complex features, the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"text":" ","type":"text"},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"text":"fragile.","type":"text"}],"role":"pseudoSymbol","title":"Adding a sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"title":"Writing your first test","abstract":[{"text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one","type":"text"},{"text":" ","type":"text"},{"text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice","type":"text"},{"text":" ","type":"text"},{"text":"to test new features as you add them, and in the future we will have much more complicated","type":"text"},{"text":" ","type":"text"},{"text":"behavior to test.","type":"text"}],"type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"title":"Sync-up detail","url":"\/tutorials\/buildingsyncups\/sync-up-detail","abstract":[],"type":"topic","kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"kind":"section","title":"Create the sync-up detail","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail","role":"pseudoSymbol","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}]},"TestingSyncUpFormPresentation-02-code-0005.swift":{"highlights":[{"line":28},{"line":29},{"line":30},{"line":31}],"syntax":"swift","fileName":"SyncUpsListTests.swift","identifier":"TestingSyncUpFormPresentation-02-code-0005.swift","fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addSyncUpButtonTapped)","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)","","    await store.send(.confirmAddButtonTapped) {","      $0.syncUps = [editedSyncUp]","    }","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"url":"\/tutorials\/composablearchitecture\/recordmeetingfeature","abstract":[{"text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will","type":"text"},{"text":" ","type":"text"},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"role":"project","title":"The RecordMeeting feature","estimatedTime":"5min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","type":"topic","kind":"project"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","type":"topic","url":"\/tutorials\/buildingsyncups\/new-sync-up-form","abstract":[],"title":"New sync-up form","kind":"article","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"url":"\/tutorials\/composablearchitecture\/syncupform","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"estimatedTime":"15min","kind":"project","title":"Sync-up form","type":"topic","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature","title":"Navigating to the record meeting feature","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"type":"text","text":" "},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"type":"section","title":"Non-exhaustive testing","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"role":"project","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation","kind":"project","estimatedTime":"20min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","abstract":[{"text":"We will wrap the application built so far in a ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"text":" ","type":"text"},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"title":"Navigating to a sync-up detail","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"title":"Testing the edit flow","kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow","role":"pseudoSymbol","abstract":[{"text":"The ","type":"text"},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature has slowly become quite complex. It now handles two forms of","type":"text"},{"text":" ","type":"text"},{"text":"navigation (an alert and sheet), it models navigation state with a single enum, and it","type":"text"},{"text":" ","type":"text"},{"text":"updates the parent feature via a shared property. It’s about time we got some test","type":"text"},{"text":" ","type":"text"},{"text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future","type":"text"},{"text":" ","type":"text"},{"text":"changes with confidence.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"title":"A tour of SyncUps","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","abstract":[{"text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a","type":"text"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps","role":"pseudoSymbol","kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models","role":"pseudoSymbol","title":"Domain models"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together","type":"section","title":"Integrating the feature domains together","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"title":"Controlling dependencies early","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"type":"section","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"type":"topic","title":"Building SyncUps","url":"\/tutorials\/buildingsyncups","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","abstract":[{"type":"text","text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,"},{"type":"text","text":" "},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"type":"text","text":"domain modeling, controlling dependencies, and testability."}],"role":"overview","kind":"overview"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"kind":"section","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"type":"text","text":" "},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"type":"text","text":" "},{"type":"text","text":"the app evolves."}],"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool","title":"A handy debugging tool"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk","title":"Persisting data to disk","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"text":".","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","type":"section","role":"pseudoSymbol","kind":"section","title":"Ending the meeting early","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list","title":"Adding a new sync-up to the list","type":"section","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"text":" ","type":"text"},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"title":"Testing the sync-up form","abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"type":"codeVoice","code":"SyncUpForm"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"kind":"project","estimatedTime":"10min","url":"\/tutorials\/composablearchitecture\/testingsyncupform","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","type":"topic","role":"project"},"TestingSyncUpFormPresentation-02-code-0001.swift":{"type":"file","fileType":"swift","identifier":"TestingSyncUpFormPresentation-02-code-0001.swift","syntax":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"fileName":"SyncUpsListTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction/binding(_:)":{"abstract":[{"text":"Embeds a binding action in this action type.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/binding(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"binding"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"BindingAction","preciseIdentifier":"s:22ComposableArchitecture13BindingActionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture14BindableActionP5StateQa"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"role":"symbol","type":"topic","title":"binding(_:)","url":"\/documentation\/composablearchitecture\/bindableaction\/binding(_:)","required":true,"kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"type":"section","title":"Navigate to a meeting","kind":"section","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"type":"text","text":"previous recorded meeting."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer","abstract":[{"text":"The first major piece of logic and behavior we will introduce to the record meeting feature is","type":"text"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"title":"Testing the timer","type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"type":"topic","abstract":[{"text":"The current exhaustivity level of the test store.","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"exhaustivity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","text":"Exhaustivity"}],"title":"exhaustivity","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"text":" ","type":"text"},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"title":"SyncUpsList feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"type":"section","title":"Navigating to the detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Testing persistence","kind":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","role":"pseudoSymbol"},"TestingSyncUpFormPresentation-01-code-0011.swift":{"identifier":"TestingSyncUpFormPresentation-01-code-0011.swift","fileName":"SyncUpsListTests.swift","syntax":"swift","fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}],"type":"file","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees","kind":"section","type":"section","title":"Adding attendees","abstract":[{"text":"We now have a moderately complex feature for editing the details of a sync-up, the ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"kind":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer","title":"A basic timer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}]},"TestingSyncUpFormPresentation-01-code-0010.swift":{"identifier":"TestingSyncUpFormPresentation-01-code-0010.swift","highlights":[{"line":22}],"fileName":"SyncUpsListTests.swift","fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    await store.send(\\.addSyncUp.binding…)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"type":"file","syntax":"swift"},"TestingSyncUpFormPresentation-01-code-0006.swift":{"syntax":"swift","type":"file","fileName":"SyncUpsList.swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":58},{"line":59}],"fileType":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0006.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case confirmAddButtonTapped","    case discardButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(","          syncUp: SyncUp(id: uuid())","        )","        return .none","","      case .addSyncUp:","        return .none","","      case .confirmAddButtonTapped:","        guard let newSyncUp = state.addSyncUp?.syncUp","        else { return .none }","        state.addSyncUp = nil","        state.syncUps.append(newSyncUp)","        return .none","","      case .discardButtonTapped:","        state.addSyncUp = nil","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}","",""]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","title":"Creating the app feature","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature","type":"section","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"type":"text","text":" "},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"role":"pseudoSymbol","kind":"section"},"TestingSyncUpFormPresentation-01-code-0002.swift":{"identifier":"TestingSyncUpFormPresentation-01-code-0002.swift","highlights":[{"line":10},{"line":11},{"line":12}],"fileType":"swift","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"title":"Form focus: a better approach","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up","title":"Deleting a sync-up","type":"section","abstract":[{"text":"We have now implemented a navigation stack at the root of our application, and integrated","type":"text"},{"text":" ","type":"text"},{"text":"3 features into the stack: the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"text":" feature, the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" feature, and the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MeetingView"},{"text":". Some of these features have quite complex logic binding them together, such as","type":"text"},{"text":" ","type":"text"},{"text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","role":"pseudoSymbol","kind":"section"},"TestingSyncUpFormPresentation-01-code-0003.swift":{"syntax":"swift","type":"file","fileName":"SyncUpsListTests.swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16}],"fileType":"swift","identifier":"TestingSyncUpFormPresentation-01-code-0003.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"]},"TestingSyncUpFormPresentation-02-code-0006.swift":{"highlights":[{"line":15}],"fileType":"swift","syntax":"swift","type":"file","identifier":"TestingSyncUpFormPresentation-02-code-0006.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off(showSkippedAssertions: true)","","    await store.send(.addSyncUpButtonTapped)","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)","","    await store.send(.confirmAddButtonTapped) {","      $0.syncUps = [editedSyncUp]","    }","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"type":"section","title":"Create the SyncUps project","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"type":"text","text":" "},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","title":"Form focus: an approach","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach","type":"section","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"type":"text","text":" "},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"type":"text","text":" "},{"type":"text","text":"feature to make things a little more interesting."}],"role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"text":" feature has slowly become quite complex. It now handles two forms of","type":"text"},{"text":" ","type":"text"},{"text":"navigation (an alert and sheet), it models navigation state with a single enum, and it","type":"text"},{"text":" ","type":"text"},{"text":"updates the parent feature via a shared property. It’s about time we got some test","type":"text"},{"text":" ","type":"text"},{"text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future","type":"text"},{"text":" ","type":"text"},{"text":"changes with confidence.","type":"text"}],"type":"topic","role":"project","kind":"project","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail","estimatedTime":"10min","title":"Testing the sync-up detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","title":"More concise domain modeling","type":"section","kind":"section","role":"pseudoSymbol"},"TestingSyncUpFormPresentation-02-code-0002.swift":{"highlights":[{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15}],"type":"file","fileType":"swift","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"identifier":"TestingSyncUpFormPresentation-02-code-0002.swift","fileName":"SyncUpsListTests.swift"},"TestingSyncUpFormPresentation-01-code-0012.swift":{"highlights":[{"line":33},{"line":34}],"fileType":"swift","syntax":"swift","type":"file","identifier":"TestingSyncUpFormPresentation-01-code-0012.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","","    await store.send(.confirmAddButtonTapped)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","kind":"project","estimatedTime":"5min","abstract":[{"text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some","type":"text"},{"text":" ","type":"text"},{"text":"persistence. This will involve using the “shared state” tools from the library, such as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"fileStorage"},{"text":".","type":"text"}],"type":"topic","url":"\/tutorials\/composablearchitecture\/persistingsyncups","title":"Persisting sync-ups"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"title":"Lists of sync-ups","type":"topic","role":"article","kind":"article","abstract":[],"url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup","role":"project","estimatedTime":"30min","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","type":"topic","title":"Editing and deleting a sync-up","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"type":"topic","role":"project","title":"Testing the list of sync-ups","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups","abstract":[{"text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one","type":"text"},{"text":" ","type":"text"},{"text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice","type":"text"},{"text":" ","type":"text"},{"text":"to test new features as you add them, and in the future we will have much more complicated","type":"text"},{"text":" ","type":"text"},{"text":"behavior to test.","type":"text"}],"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","estimatedTime":"5min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"abstract":[{"text":"An action that describes simple mutations to some root state at a writable key path.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","role":"symbol","url":"\/documentation\/composablearchitecture\/bindingaction","title":"BindingAction","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingAction","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"BindingAction","kind":"identifier"}]},"TestingSyncUpFormPresentation-02-code-0003.swift":{"highlights":[{"line":16},{"line":17}],"fileType":"swift","syntax":"swift","type":"file","identifier":"TestingSyncUpFormPresentation-02-code-0003.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addSyncUpButtonTapped)","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"title":"Navigating to sync-up detail","kind":"article","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing","title":"Non-exhaustive testing","abstract":[],"kind":"section","url":"\/documentation\/composablearchitecture\/testingtca#Non-exhaustive-testing","type":"topic"},"TestingSyncUpFormPresentation-02-code-0004.swift":{"syntax":"swift","type":"file","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUpNonExhaustive() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","","    await store.send(.addSyncUpButtonTapped)","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp)","  }","  ","  @Test","  func addSyncUp() async {","    \/\/ ...","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"identifier":"TestingSyncUpFormPresentation-02-code-0004.swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"fileType":"swift","fileName":"SyncUpsListTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission","title":"Asking for speech recognition permission","type":"section","abstract":[{"text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need","type":"text"},{"text":" ","type":"text"},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"text":" ","type":"text"},{"text":"audio, and then start a speech recognition task to live transcribe the meeting while it is","type":"text"},{"text":" ","type":"text"},{"text":"in progress.","type":"text"}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"kind":"project","role":"project","url":"\/tutorials\/composablearchitecture\/listsofsyncups","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","abstract":[{"text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the","type":"text"},{"text":" ","type":"text"},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"estimatedTime":"10min","title":"Lists of sync-ups"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"title":"Adding a meeting timer","url":"\/tutorials\/composablearchitecture\/implementingtimer","kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"type":"text","text":" "},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"type":"text","text":" "},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"type":"topic","estimatedTime":"25min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","title":"Sync-up detail","estimatedTime":"5min","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/syncupdetail","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"type":"text","text":" "},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"type":"text","text":" "},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"role":"project"},"TestingSyncUpFormPresentation-01-code-0009.swift":{"highlights":[{"line":21},{"line":22}],"fileType":"swift","syntax":"swift","type":"file","identifier":"TestingSyncUpFormPresentation-01-code-0009.swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    await store.send(\\.addSyncUp…)","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift"},"TestingSyncUpFormPresentation-01-code-0005.swift":{"highlights":[{"line":19},{"line":20},{"line":21}],"type":"file","identifier":"TestingSyncUpFormPresentation-01-code-0005.swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  @ObservableState","  struct State: Equatable {","    @Presents var addSyncUp: SyncUpForm.State?","    var syncUps: IdentifiedArrayOf<SyncUp> = []","  }","  enum Action {","    case addSyncUpButtonTapped","    case addSyncUp(PresentationAction<SyncUpForm.Action>)","    case confirmAddButtonTapped","    case discardButtonTapped","    case onDelete(IndexSet)","    case syncUpTapped(id: SyncUp.ID)","  }","","  @Dependency(\\.uuid) var uuid","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addSyncUpButtonTapped:","        state.addSyncUp = SyncUpForm.State(syncUp: SyncUp(id: SyncUp.ID()))","        return .none","","      case .addSyncUp:","        return .none","","      case .confirmAddButtonTapped:","        guard let newSyncUp = state.addSyncUp?.syncUp","        else { return .none }","        state.addSyncUp = nil","        state.syncUps.append(newSyncUp)","        return .none","","      case .discardButtonTapped:","        state.addSyncUp = nil","        return .none","","      case let .onDelete(indexSet):","        state.syncUps.remove(atOffsets: indexSet)","        return .none","","      case .syncUpTapped:","        return .none","      }","    }","    .ifLet(\\.$addSyncUp, action: \\.addSyncUp) {","      SyncUpForm()","    }","  }","}"],"fileName":"SyncUpsList.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"type":"text","text":" "},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","type":"section","role":"pseudoSymbol","title":"Deleting the sync-up","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation","title":"Testing the add sync-up flow","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SyncUpForm"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"type":"text","text":" "},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"type":"text","text":"fragile."}],"kind":"project","role":"project","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","estimatedTime":"10min"},"TestingSyncUpFormPresentation-01-code-0014.swift":{"identifier":"TestingSyncUpFormPresentation-01-code-0014.swift","highlights":[{"line":34},{"line":35},{"line":36},{"line":37}],"fileType":"swift","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import SyncUps","","@MainActor","struct SyncUpsListTests {","  @Test","  func addSyncUp() async {","    let store = TestStore(initialState: SyncUpsList.State()) {","      SyncUpsList()","    } withDependencies: {","      $0.uuid = .incrementing","    }","","    await store.send(.addSyncUpButtonTapped) {","      $0.addSyncUp = SyncUpForm.State(","        syncUp: SyncUp(id: SyncUp.ID(0))","      )","    }","","    let editedSyncUp = SyncUp(","      id: SyncUp.ID(0),","      attendees: [","        Attendee(id: Attendee.ID(), name: \"Blob\"),","        Attendee(id: Attendee.ID(), name: \"Blob Jr.\"),","      ],","      title: \"Point-Free morning sync\"","    )","    await store.send(\\.addSyncUp.binding.syncUp, editedSyncUp) {","      $0.addSyncUp?.syncUp = editedSyncUp","    }","","    await store.send(.confirmAddButtonTapped) {","      $0.addSyncUp = nil","      $0.syncUps = [editedSyncUp]","    }","  }","","  @Test","  func deletion() async {","    \/\/ ...","  }","}"],"fileName":"SyncUpsListTests.swift","type":"file"}}}