{"abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","text":"MainActor","kind":"attribute"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"text":"> { ","kind":"text"},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This publisher supports dynamic member lookup so that you can pluck out a specific field in"},{"text":" ","type":"text"},{"type":"text","text":"the state:"}],"type":"paragraph"},{"code":["viewStore.publisher.alert","  .sink { ... }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the emission happens the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"type":"text","text":"’s state has been updated, and so the following"},{"text":" ","type":"text"},{"type":"text","text":"precondition will pass:"}]},{"type":"codeListing","syntax":"swift","code":["viewStore.publisher","  .sink { precondition($0 == viewStore.state) }"]},{"inlineContent":[{"text":"This means you can either use the value passed to the closure or you can reach into","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"viewStore.state"},{"type":"text","text":" directly."}],"type":"paragraph"},{"name":"Note","style":"note","content":[{"inlineContent":[{"text":"Due to a bug in Combine (or feature?), the order you ","type":"text"},{"code":".sink","type":"codeVoice"},{"text":" on a publisher has no","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bearing on the order the "},{"code":".sink","type":"codeVoice"},{"text":" closures are called. This means the work performed inside","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"viewStore.publisher.sink"},{"type":"text","text":" closures should be completely independent of each other. Later"},{"type":"text","text":" "},{"type":"text","text":"closures cannot assume that earlier ones have already run."}],"type":"paragraph"}],"type":"aside"}]}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState","type":"text"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/viewstore\/publisher"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"},"sections":[],"metadata":{"symbolKind":"property","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"title":"publisher","externalID":"s:22ComposableArchitecture9ViewStoreC9publisherAA0D9PublisherVyxGvp","platforms":[],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">"}],"roleHeading":"Instance Property"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher"],"anchor":"Combine-integration","title":"Combine integration","generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"abstract":[{"type":"text","text":"A publisher of store state."}],"url":"\/documentation\/composablearchitecture\/storepublisher","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StorePublisher"}],"type":"topic","title":"StorePublisher","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StorePublisher"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"url":"\/documentation\/composablearchitecture\/viewstore","kind":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"role":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"title":"ViewStore","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"role":"symbol","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"code":"nil","type":"codeVoice"},{"text":" or not, and","type":"text"},{"type":"text","text":" "},{"text":"whenever this condition changes for as long as the cancellable lives.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable"}],"type":"topic","title":"ifLet(then:else:)","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"url":"\/documentation\/composablearchitecture\/store\/publisher","type":"topic","abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"role":"symbol","title":"publisher","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"text":": ","kind":"text"},{"text":"StorePublisher","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"role":"collectionGroup","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"kind":"article","type":"topic","title":"UIKit Integration","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"symbol","title":"ComposableArchitecture","type":"topic","url":"\/documentation\/composablearchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"url":"\/documentation\/composablearchitecture\/viewstore\/publisher","deprecated":true,"type":"topic","abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"role":"symbol","title":"publisher","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"text":"StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","kind":"symbol"}}}