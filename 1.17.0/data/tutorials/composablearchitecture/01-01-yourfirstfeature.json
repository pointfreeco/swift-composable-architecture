{"metadata":{"title":"Your first feature","categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture"},"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]],"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"task"}]}]},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},"variants":[{"paths":["\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"chapter":"Essentials","title":"Your first feature","kind":"hero","estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}]}]},{"tasks":[{"title":"Create a reducer","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The fundamental unit that features are built with in the Composable Architecture is the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":" protocol. A","type":"text"},{"text":" ","type":"text"},{"text":"conformance to that protocol represents the logic and behavior for a feature in your","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"application. This includes how to evolve the current state to the next state when an action is"},{"text":" ","type":"text"},{"type":"text","text":"sent into the system, and how effects communicate with the outside world and feed data back"},{"type":"text","text":" "},{"type":"text","text":"into the system."}]},{"inlineContent":[{"type":"text","text":"And most importantly, the feature’s core logic and behavior can be built in full isolation"},{"type":"text","text":" "},{"type":"text","text":"with no mention of a SwiftUI view, which makes it easier to develop in isolation, easier"},{"text":" ","type":"text"},{"type":"text","text":"to reuse, and easier to test."}],"type":"paragraph"},{"inlineContent":[{"text":"Let’s start by creating a simple reducer that encapsulates the logic of a counter. We will","type":"text"},{"text":" ","type":"text"},{"text":"add more interesting behavior to the feature, but let’s start simple for now.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new Swift file named CounterFeature.swift and import the Composable Architecture."}]}],"type":"step","media":null,"code":"01-01-01-code-0001.swift","caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Before importing the library you will need to depend on it by ","type":"text"},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","isActive":true},{"type":"text","text":"."}]}],"type":"aside","name":"Note"}]},{"type":"step","media":null,"caption":[{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro does a few things for you, but at","type":"text"},{"type":"text","text":" "},{"text":"this point you only need to know that it extends your type to conform to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"text":" protocol.","type":"text"}],"type":"paragraph"}]}],"code":"01-01-01-code-0002.swift","content":[{"inlineContent":[{"text":"Define a new struct called ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":", and annotate it with the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" you will start with a domain"},{"type":"text","text":" "},{"type":"text","text":"modeling exercise. You will create a "},{"code":"State","type":"codeVoice"},{"text":" type that holds the state your feature needs","type":"text"},{"text":" ","type":"text"},{"text":"to do its job, typically a struct. Then you will create an ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" type that holds all"},{"text":" ","type":"text"},{"text":"the actions the user can perform in the feature, typically an enum.","type":"text"}]}],"code":"01-01-01-code-0003.swift","type":"step","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Further, if your feature is to be observed by SwiftUI, which is usually the case, you must"},{"text":" ","type":"text"},{"type":"text","text":"annotate its state with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"text":" macro. It is the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture’s version of "},{"type":"codeVoice","code":"@Observable"},{"text":", but tuned to value types.","type":"text"}],"type":"paragraph"}]},{"code":"01-01-01-code-0004.swift","type":"step","media":null,"caption":[{"type":"aside","name":"Tip","style":"tip","content":[{"inlineContent":[{"text":"It is best to name the ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" cases after literally what the user does in the UI,"},{"type":"text","text":" "},{"text":"such as ","type":"text"},{"code":"incrementButtonTapped","type":"codeVoice"},{"text":", rather than what logic you want to perform, such as","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"incrementCount"},{"type":"text","text":"."}],"type":"paragraph"}]}],"runtimePreview":null,"content":[{"inlineContent":[{"text":"For the purpose of a simple counter feature, the state consists of just a single integer,","type":"text"},{"text":" ","type":"text"},{"text":"the current count, and the actions consist of tapping buttons to either increment or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"decrement the count."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"And finally, to finish conforming to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":", you must implement"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"text":" property with a","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","isActive":true},{"type":"text","text":" reducer that evolves the state from its current value to"},{"type":"text","text":" "},{"text":"the next value given a user action, and returns any effects that the feature wants to","type":"text"},{"text":" ","type":"text"},{"text":"execute in the outside world. This almost always begins by switching on the incoming action","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to determine what logic you need to perform, and the "},{"type":"codeVoice","code":"state"},{"type":"text","text":" is provided as "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" so you"},{"type":"text","text":" "},{"type":"text","text":"can perform mutations on it directly."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"caption":[{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A reducer is implemented by providing a"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true,"type":"reference"},{"type":"text","text":" property, and then listing the"},{"text":" ","type":"text"},{"type":"text","text":"reducers inside that you want to compose. Right now we only have one reducer we want to"},{"type":"text","text":" "},{"type":"text","text":"run, and so a simple "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","type":"reference"},{"type":"text","text":" is sufficient, but it is more"},{"text":" ","type":"text"},{"text":"typical to compose many reducers together, and that will be shown later in the tutorial.","type":"text"}]}],"name":"Note","style":"note"}],"media":null,"code":"01-01-01-code-0005.swift"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"The logic for this feature is quite simple. We just want to either subtract one or add one"},{"type":"text","text":" "},{"text":"to the state’s count. We must also return a value of ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"that represents the effect to be executed in the outside world, but in this case we do not"},{"text":" ","type":"text"},{"type":"text","text":"need to execute anything. So we can return a special"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","type":"reference"},{"type":"text","text":" value to represent we have no effects to"},{"text":" ","type":"text"},{"type":"text","text":"execute."}],"type":"paragraph"}],"runtimePreview":null,"code":"01-01-01-code-0006.swift","caption":[],"type":"step"},{"type":"paragraph","inlineContent":[{"text":"That is all it takes to implement a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"very","type":"text"}]},{"text":" basic feature in the Composable Architecture.","type":"text"},{"type":"text","text":" "},{"text":"There is of course a lot more to know about, such as executing effects and feeding data","type":"text"},{"text":" ","type":"text"},{"text":"back into the system, using dependencies in reducers, composing multiple reducers together,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and a lot more. But we will stop here for this feature right now and move onto the view."}]}],"anchor":"Create-a-reducer"},{"title":"Integrating with SwiftUI","stepsSection":[{"media":null,"code":"01-01-02-code-0001.swift","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"It is our personal preference to keep the reducer and view in the same file until it is","type":"text"},{"type":"text","text":" "},{"text":"untenable, but others prefer to split the types into their own files. For this tutorial","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we will continue putting everything in CounterFeature.swift, and we will now import SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"and get a basic view into place."}]}],"type":"step"},{"runtimePreview":null,"type":"step","caption":[{"name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"The store can be held onto as a ","type":"text"},{"code":"let","type":"codeVoice"},{"text":". Observation of the data in the store happens","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"automatically with the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference"},{"text":" macro.","type":"text"}]}],"style":"tip","type":"aside"}],"content":[{"inlineContent":[{"text":"The first thing one adds to the view is a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" that is generic"},{"text":" ","type":"text"},{"type":"text","text":"over the reducer we constructed in the previous section. The "},{"code":"Store","type":"codeVoice"},{"text":" represents the runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of your feature. That is, it is the object that can process actions in order to update"},{"text":" ","type":"text"},{"type":"text","text":"state, and it can execute effects and feed data from those effects back into the system."}],"type":"paragraph"}],"media":null,"code":"01-01-02-code-0002.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we can implement some basic view hierarchy for displaying the count and providing"},{"type":"text","text":" "},{"type":"text","text":"buttons for incrementing and decrementing."}]}],"code":"01-01-02-code-0003.swift","type":"step","runtimePreview":"01-02-image-0003.png","media":null,"caption":[]},{"inlineContent":[{"type":"text","text":"With some basic view scaffolding in place we can now start actually reading state from, and"},{"text":" ","type":"text"},{"type":"text","text":"sending actions to, the "},{"type":"codeVoice","code":"store"},{"type":"text","text":"."}],"type":"paragraph"},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can read a property of state directly from the "},{"type":"codeVoice","code":"store"},{"text":" via dynamic member lookup,","type":"text"},{"text":" ","type":"text"},{"text":"and we can send actions to the ","type":"text"},{"code":"store","type":"codeVoice"},{"text":" via ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)"},{"type":"text","text":"."}]}],"media":null,"code":"01-01-02-code-0004.swift","runtimePreview":null},{"caption":[{"type":"paragraph","inlineContent":[{"text":"With that done we can run the preview to see that tapping the “+” and “-” buttons does","type":"text"},{"text":" ","type":"text"},{"text":"indeed change the visible count in the UI.","type":"text"}]}],"type":"step","content":[{"inlineContent":[{"text":"Next we want to actually run the feature. We will start with a preview. To do this we will","type":"text"},{"text":" ","type":"text"},{"text":"construct a ","type":"text"},{"type":"codeVoice","code":"CounterView"},{"text":", and to do that we need to construct a ","type":"text"},{"code":"StoreOf<CounterFeature>","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Stores can be constructed by providing the initial state you want the feature to begin in,"},{"type":"text","text":" "},{"text":"as well as a trailing closure that specifies the reducer that powers the feature.","type":"text"}],"type":"paragraph"}],"code":"01-01-02-code-0005.swift","media":null,"runtimePreview":"01-02-video-0005.mp4"},{"inlineContent":[{"type":"text","text":"Before moving onto the next section, let’s quickly show off a super power of the Composable"},{"text":" ","type":"text"},{"type":"text","text":"Architecture. Because all of the feature’s logic and behavior are contained in the reducer,"},{"text":" ","type":"text"},{"type":"text","text":"we can run the preview with a completely different reducer to alter how it executes."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"For example, in the preview, comment out the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" reducer and the store will be","type":"text"},{"type":"text","text":" "},{"text":"given a reducer that performs no state mutations or effects. This allows us to preview the","type":"text"},{"type":"text","text":" "},{"text":"design of the feature without worrying about any of its logic or behavior.","type":"text"}],"type":"paragraph"}],"media":null,"code":"01-01-02-code-0006.swift","type":"step","runtimePreview":"01-02-video-0006.mp4","caption":[{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that the video demonstrates that tapping the buttons does not cause"},{"text":" ","type":"text"},{"type":"text","text":"the count to increase or decrease. That is because we are using the empty reducer in the"},{"text":" ","type":"text"},{"text":"preview.","type":"text"}]}],"name":"Note"}]},{"caption":[],"media":null,"code":"01-01-02-code-0007.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Before moving on let’s be sure to bring back the "},{"type":"codeVoice","code":"CounterFeature"},{"text":" reducer in the preview,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"otherwise it will continue to be inert with our next explorations."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all there is to implementing a basic feature in the Composable Architecture. The"},{"text":" ","type":"text"},{"type":"text","text":"feature is of course very simple, and doesn’t involve anything interesting like side effects"},{"text":" ","type":"text"},{"text":"(which will be the topic of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"type":"text","text":"), but before any of that let’s see"},{"text":" ","type":"text"},{"text":"how to integrate this feature into an application.","type":"text"}]}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Now that we have a simple feature built as a reducer, we need to figure out how to power a"},{"type":"text","text":" "},{"text":"SwiftUI view from that feature. This involves a new concept, the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":", which represents the runtime of the feature."}],"type":"paragraph"}]}],"anchor":"Integrating-with-SwiftUI"},{"anchor":"Integrating-into-the-app","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"We have now integrated our Composable Architecture feature into a SwiftUI view and we’ve been"},{"type":"text","text":" "},{"type":"text","text":"able to run it in the preview. Next we need to figure out how to run the feature in the full"},{"text":" ","type":"text"},{"text":"application by altering its entry point. This will allow us to run the feature in a simulator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or on a device."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"code":"01-01-03-code-0001.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"By default the entry point of your application is probably in a file called App.swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and looks something like this code."}]}],"media":null,"type":"step","runtimePreview":null},{"media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will change the entry point of the application so that it constructs a "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":" "},{"text":"and provides a store, just as we did in the preview.","type":"text"}]}],"code":"01-01-03-code-0002.swift","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that the "},{"type":"codeVoice","code":"Store"},{"text":" that powers the application should only be created","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a single time. For most applications it should be sufficient to create it directly in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"WindowGroup"},{"type":"text","text":" at the root of the scene. But, it can also be held as a static variable"},{"type":"text","text":" "},{"type":"text","text":"and then provided in the scene."}]}],"media":null,"caption":[],"code":"01-01-03-code-0003.swift","type":"step","runtimePreview":null},{"inlineContent":[{"type":"text","text":"We can demonstrate another super power of the Composable Architecture. Reducers have a"},{"text":" ","type":"text"},{"text":"method called ","type":"text"},{"code":"_printChanges","type":"codeVoice"},{"type":"text","text":" that is similar to a tool that SwiftUI provides. When used it"},{"text":" ","type":"text"},{"type":"text","text":"will print every action that the reducer processes to the console, and it will print how the"},{"type":"text","text":" "},{"text":"state changed after processing the  action. The method will also go through great lengths to","type":"text"},{"text":" ","type":"text"},{"text":"collapse the state difference to a compact form. This includes not displaying nested state if","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it hasn’t changed, and not showing elements in collections that haven’t changed."}],"type":"paragraph"},{"code":"01-01-03-code-0004.swift","content":[{"inlineContent":[{"type":"text","text":"Update the entry point of the application to invoke"},{"text":" ","type":"text"},{"code":"_printChanges(_:)","type":"codeVoice"},{"text":" on the reducer.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","caption":[],"media":null},{"type":"step","media":"01-03-image-0005.jpg","content":[{"type":"paragraph","inlineContent":[{"text":"Now when you run the application in the simulator and tap the “+” and “-” buttons a few","type":"text"},{"text":" ","type":"text"},{"text":"times you should see logs printed to the console showing you exactly what is happening.","type":"text"}]}],"caption":[],"code":null,"runtimePreview":null}],"title":"Integrating into the app"}],"kind":"tasks"},{"abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"title":"Adding side effects","kind":"callToAction","action":{"overridingTitle":"Get started","isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},"featuredEyebrow":"Tutorial"}],"kind":"project","references":{"01-01-01-code-0003.swift":{"content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    ","  }","  ","  enum Action {","    ","  }","}"],"fileName":"CounterFeature.swift","syntax":"swift","type":"file","identifier":"01-01-01-code-0003.swift","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":10},{"line":11},{"line":12}]},"01-01-01-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        ","      case .incrementButtonTapped:","        ","      }","    }","  }","}"],"highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"type":"file","identifier":"01-01-01-code-0005.swift","fileName":"CounterFeature.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"type":"topic","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","title":"Testing your feature","role":"project","estimatedTime":"1hr 0min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","kind":"section","role":"pseudoSymbol","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"type":"section","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"kind":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","title":"Adding a tab view","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"type":"topic","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"text":" ","type":"text"},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"overview","url":"\/tutorials\/meetcomposablearchitecture","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","title":"Meet the Composable Architecture","role":"overview"},"01-03-image-0005.jpg":{"alt":null,"identifier":"01-03-image-0005.jpg","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/01-03-image-0005.jpg"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"role":"symbol","title":"Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"type":"section","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","title":"Testing effects","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"role":"project","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","type":"topic","title":"Composing features","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"title":"Integrate views","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","type":"section","kind":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"pseudoSymbol"},"01-01-02-code-0007.swift":{"syntax":"swift","content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  )","}"],"highlights":[{"line":4}],"type":"file","identifier":"01-01-02-code-0007.swift","fileName":"CounterFeature.swift","fileType":"swift"},"01-01-03-code-0001.swift":{"content":["import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      ContentView()","    }","  }","}"],"fileName":"App.swift","syntax":"swift","type":"file","identifier":"01-01-03-code-0001.swift","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"type":"topic","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"kind":"project","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","title":"Your first feature","role":"project","estimatedTime":"20min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","kind":"symbol","required":true,"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","text":"Body","kind":"typeIdentifier"}],"defaultImplementations":2,"abstract":[{"text":"The content and behavior of a reducer that is composed from other reducers.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","title":"body"},"01-01-01-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"],"highlights":[{"line":19},{"line":20},{"line":23},{"line":24}],"type":"file","identifier":"01-01-01-code-0006.swift","fileName":"CounterFeature.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"title":"Performing a network request","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","type":"section","kind":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","url":"\/tutorials\/meetcomposablearchitecture\/essentials","type":"topic","title":"Essentials","abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},"01-02-video-0005.mp4":{"alt":null,"identifier":"01-02-video-0005.mp4","type":"video","variants":[{"url":"\/videos\/ComposableArchitecture\/01-02-video-0005.mp4","traits":["1x","light"]}],"poster":null},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","title":"none","role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"none"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"text":" ","type":"text"},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"url":"\/documentation\/composablearchitecture\/effect\/none"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"type":"topic","title":"Adding side effects","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","role":"project","kind":"project","estimatedTime":"30min","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","title":"Testing network requests","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","type":"section","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"type":"topic","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"kind":"project","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","role":"project","estimatedTime":"30min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"title":"Reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","kind":"project","role":"project","title":"Navigation stacks","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"estimatedTime":"30min"},"01-01-01-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  ","}"],"highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6}],"type":"file","identifier":"01-01-01-code-0002.swift","fileName":"CounterFeature.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"type":"topic","title":"Multiple presentation destinations","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","role":"project","kind":"project","estimatedTime":"30min","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"type":"text","text":" features."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"text":"state.","type":"text"}],"kind":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","title":"Integrate reducers","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"type":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","title":"Child-to-parent communication","role":"pseudoSymbol"},"01-01-03-code-0003.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","  }","  ","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"fileName":"App.swift","syntax":"swift","type":"file","identifier":"01-01-03-code-0003.swift","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":12}]},"01-02-image-0003.png":{"alt":"iOS application showing a text view in the center displaying a 0 and two buttons underneath it, one for decrementing the count and one for incrementing.","identifier":"01-02-image-0003.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/01-02-image-0003.png"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"type":"section","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}],"kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","title":"Improve domain modeling","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/reduce","title":"Reduce","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":" function."}],"role":"symbol","navigatorTitle":[{"text":"Reduce","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reduce","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","title":"Project set up","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"type":"section","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","title":"Composing reducers","role":"pseudoSymbol"},"http://github.com/pointfreeco/swift-composable-architecture#Installation":{"title":"adding it to your Xcode project settings or SPM package","type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation","titleInlineContent":[{"type":"text","text":"adding it to your"},{"text":" ","type":"text"},{"text":"Xcode project settings or SPM package","type":"text"}],"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture#Installation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"type":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","title":"What is a side effect?","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"type":"topic","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"project","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","title":"Testing presentation","role":"project","estimatedTime":"40min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"type":"section","title":"Contact detail feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","role":"pseudoSymbol","kind":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}]},"01-02-video-0006.mp4":{"alt":null,"identifier":"01-02-video-0006.mp4","type":"video","variants":[{"url":"\/videos\/ComposableArchitecture\/01-02-video-0006.mp4","traits":["1x","light"]}],"poster":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","kind":"section","role":"pseudoSymbol","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"url":"\/documentation\/composablearchitecture\/observablestate()","title":"ObservableState()","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","type":"section","title":"Integrating into the app","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"type":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"kind":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","title":"Managing a timer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","type":"section","title":"Deriving child stores","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"type":"section","title":"Integrating with SwiftUI","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}]},"01-01-03-code-0004.swift":{"identifier":"01-01-03-code-0004.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: CounterFeature.State()) {","    CounterFeature()","      ._printChanges()","  }","  ","  var body: some Scene {","    WindowGroup {","      CounterView(store: MyApp.store)","    }","  }","}"],"fileName":"App.swift","syntax":"swift","highlights":[{"line":8}],"type":"file"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"kind":"symbol","title":"send(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"StoreTask","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Sends an action to the store."}],"url":"\/documentation\/composablearchitecture\/store\/send(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","role":"symbol"},"01-01-02-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct CounterView: View {","  var body: some View {","    EmptyView()","  }","}"],"highlights":[],"type":"file","identifier":"01-01-02-code-0001.swift","fileName":"CounterFeature.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"type":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","title":"Testing the add contact flow","role":"pseudoSymbol"},"01-01-02-code-0005.swift":{"content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      CounterFeature()","    }","  )","}"],"fileName":"CounterFeature.swift","syntax":"swift","type":"file","identifier":"01-01-02-code-0005.swift","fileType":"swift","highlights":[]},"01-01-02-code-0004.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"highlights":[{"line":6},{"line":13},{"line":21}],"type":"file","identifier":"01-01-02-code-0004.swift","fileName":"CounterFeature.swift","fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","title":"Reducer()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for a type.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"type":"section","title":"Controlling dependencies","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"01-01-03-code-0002.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      CounterView(","        store: Store(initialState: CounterFeature.State()) {","          CounterFeature()","        }","      )","    }","  }","}"],"fileName":"App.swift","syntax":"swift","type":"file","identifier":"01-01-03-code-0002.swift","fileType":"swift","highlights":[{"line":1},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}]},"01-01-02-code-0002.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    EmptyView()","  }","}"],"highlights":[{"line":2},{"line":3}],"type":"file","identifier":"01-01-02-code-0002.swift","fileName":"CounterFeature.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"role":"article","url":"\/tutorials\/meetcomposablearchitecture\/navigation","type":"topic","title":"Navigation","abstract":[],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","type":"section","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},"01-01-01-code-0001.swift":{"content":["import ComposableArchitecture"],"fileName":"CounterFeature.swift","syntax":"swift","type":"file","identifier":"01-01-01-code-0001.swift","fileType":"swift","highlights":[]},"01-01-02-code-0003.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"0\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"type":"file","identifier":"01-01-02-code-0003.swift","fileName":"CounterFeature.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","kind":"section","role":"pseudoSymbol","title":"Create a reducer","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"type":"text","text":" "},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}]},"01-01-01-code-0004.swift":{"content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"],"fileName":"CounterFeature.swift","syntax":"swift","type":"file","identifier":"01-01-01-code-0004.swift","fileType":"swift","highlights":[{"line":7},{"line":11},{"line":12}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"type":"section","title":"Testing state changes","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","role":"pseudoSymbol","kind":"section","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}]},"01-01-02-code-0006.swift":{"syntax":"swift","content":["#Preview {","  CounterView(","    store: Store(initialState: CounterFeature.State()) {","      \/\/ CounterFeature()","    }","  )","}"],"highlights":[{"line":4}],"type":"file","identifier":"01-01-02-code-0006.swift","fileName":"CounterFeature.swift","fileType":"swift"}}}