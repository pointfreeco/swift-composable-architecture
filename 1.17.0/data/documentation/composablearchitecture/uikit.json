{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"variants":[{"paths":["\/documentation\/composablearchitecture\/uikit"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"collectionGroup","title":"UIKit Integration","roleHeading":"API Collection"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the Composable Architecture was designed with SwiftUI in mind, it comes with tools to"},{"text":" ","type":"text"},{"text":"integrate into application code written in UIKit.","type":"text"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"},"topicSections":[{"anchor":"Combine-integration","title":"Combine integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"]}],"seeAlsoSections":[{"title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"],"generated":true,"anchor":"Integrations"}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"kind":"article","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"title":"Adopting Swift concurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"url":"\/documentation\/composablearchitecture\/swiftconcurrency","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","role":"article","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"type":"topic","kind":"article","title":"SwiftUI Integration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"then"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> any "},{"preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier","text":"Cancellable"}],"title":"ifLet(then:else:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"text":"whenever this condition changes for as long as the cancellable lives.","type":"text"}],"kind":"symbol","role":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"title":"publisher","abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"url":"\/documentation\/composablearchitecture\/viewstore\/publisher","deprecated":true,"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","kind":"typeIdentifier","text":"StorePublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"type":"topic","title":"Observation backport","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/observationbackport"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","kind":"symbol","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":">","kind":"text"}],"title":"publisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/publisher"}}}