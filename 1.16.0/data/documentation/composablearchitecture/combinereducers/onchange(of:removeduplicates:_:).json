{"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/onChange(of:removeDuplicates:_:)","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"onChange"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"text":", ","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"kind":"text","text":") -> "},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"removeDuplicates"},{"text":": (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"text":") -> ","kind":"text"},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":", ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":">"}],"symbolKind":"method","roleHeading":"Instance Method","externalID":"s:22ComposableArchitecture7ReducerPAAE8onChange2of16removeDuplicates_AA03_OneC0Vyxqd__qd_0_Gqd__5StateQzc_Sbqd___qd__tcqd_0_qd___qd__tctAaBRd_0_6ActionQyd_0_ALRtzAJQyd_0_AKRSr0_lF::SYNTHESIZED::s:22ComposableArchitecture15CombineReducersV","extendedModule":"ComposableArchitecture","platforms":[],"title":"onChange(of:removeDuplicates:_:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onChange"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"of"},{"text":" ","kind":"text"},{"text":"toValue","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State"},{"text":") -> ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"removeDuplicates"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"isDuplicate"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" ("},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"@","kind":"attribute"},{"text":"ReducerBuilder","kind":"attribute","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","preciseIdentifier":"s:22ComposableArchitecture14ReducerBuilderO"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","text":"Action"},{"text":">","kind":"text"},{"text":" ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"reducer","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"text":" (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"R"},{"text":" : ","kind":"text"},{"text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":" == "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"kind":"text","text":" == "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"."},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"}]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"A closure that returns a value from the given state.","type":"text"}],"type":"paragraph"}],"name":"toValue"},{"name":"isDuplicate","content":[{"inlineContent":[{"type":"text","text":"A closure to evaluate whether two elements are equivalent, for purposes of"},{"type":"text","text":" "},{"text":"filtering. Return ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" from this closure to indicate that the second element is a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"duplicate of the first."}],"type":"paragraph"}]},{"name":"reducer","content":[{"inlineContent":[{"text":"A reducer builder closure to run when the value changes.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"inlineContent":[{"type":"text","text":"A reducer that performs the logic when the state changes."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this operator to trigger additional logic when a value changes, like when a"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","isActive":true},{"type":"text","text":" makes a deeper change to a struct held in "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"syntax":"swift","code":["@Reducer","struct Settings {","  struct State {","    @BindingState var userSettings: UserSettings","    \/\/ ...","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","    \/\/ ...","  }","","  var body: some Reducer<State, Action> {","    BindingReducer()","      .onChange(","        of: { ($0.userSettings.isHapticFeedbackEnabled, $0.userSettings.isPushEnabled) },","        removeDuplicates: ==","      ) { oldValue, newValue in","        Reduce { state, action in","          .run { send in","            \/\/ Persist new value...","          }","        }","      }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"When the value changes, the new version of the closure will be called, so any captured values"},{"type":"text","text":" "},{"type":"text","text":"will have their values from the time that the observed value has its new value. The system"},{"type":"text","text":" "},{"type":"text","text":"passes the old and new observed values into the closure."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Take care when applying "},{"type":"codeVoice","code":"onChange(of:)"},{"type":"text","text":" to a reducer, as it adds an equatable check"},{"text":" ","type":"text"},{"type":"text","text":"for every action fed into it. Prefer applying it to leaf nodes, like "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"against values that are quick to equate."}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/combinereducers\/onchange(of:removeduplicates:_:)"]}],"sections":[],"abstract":[{"text":"Adds a reducer to run when this reducer changes the given value in state.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/Reducer-Implementations"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'onChange(of:)' with and equatable value, instead."}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"kind":"symbol","title":"BindingState","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"role":"symbol","deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingState"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"text":"in SwiftUI views.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/bindingstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers":{"url":"\/documentation\/composablearchitecture\/combinereducers","abstract":[{"type":"text","text":"Combines multiple reducers into a single reducer."}],"kind":"symbol","title":"CombineReducers","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","navigatorTitle":[{"kind":"identifier","text":"CombineReducers"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CombineReducers","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"kind":"symbol","abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"url":"\/documentation\/composablearchitecture\/bindingreducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","title":"BindingReducer","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingReducer","kind":"identifier"}],"navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/onChange(of:removeDuplicates:_:)":{"deprecated":true,"url":"\/documentation\/composablearchitecture\/combinereducers\/onchange(of:removeduplicates:_:)","title":"onChange(of:removeDuplicates:_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/onChange(of:removeDuplicates:_:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"onChange","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"V"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"removeDuplicates"},{"kind":"text","text":": ("},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":") -> "},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Adds a reducer to run when this reducer changes the given value in state."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"url":"\/documentation\/composablearchitecture\/reducer\/action","title":"Action","abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference"},{"type":"text","text":" of the reducer to change"},{"text":" ","type":"text"},{"type":"text","text":"and\/or kick off a side "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" that can communicate with the outside world."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"Action","kind":"identifier"}],"type":"topic","required":true,"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/Reducer-Implementations":{"url":"\/documentation\/composablearchitecture\/combinereducers\/reducer-implementations","kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/Reducer-Implementations","role":"collectionGroup","title":"Reducer Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"url":"\/documentation\/composablearchitecture\/reducer\/state","title":"State","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"State","kind":"identifier"}],"type":"topic","required":true,"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","role":"symbol","title":"Effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Effect","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A result builder for combining reducers into a single reducer by running each, one after the"},{"type":"text","text":" "},{"text":"other, and merging their effects.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","title":"ReducerBuilder","url":"\/documentation\/composablearchitecture\/reducerbuilder","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReducerBuilder","kind":"identifier"}],"navigatorTitle":[{"text":"ReducerBuilder","kind":"identifier"}]}}}