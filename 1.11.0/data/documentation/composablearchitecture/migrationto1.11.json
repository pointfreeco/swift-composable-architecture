{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. This version of the library introduced 2 new"},{"type":"text","text":" "},{"type":"text","text":"APIs and deprecated 1 API."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.10. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"},{"type":"text","text":" for more information."}]}],"type":"aside","name":"Important"},{"anchor":"Mutating-shared-state-concurrently","level":2,"type":"heading","text":"Mutating shared state concurrently"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Version 1.10 of the Composable Architecture introduced a powerful tool for"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"sharing state"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","overridingTitle":"sharing state"},{"type":"text","text":" amongst your features. And you can mutate a piece of shared"},{"type":"text","text":" "},{"type":"text","text":"state directly, as if it were just a normal property on a value type:"}]},{"type":"codeListing","syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do."},{"type":"text","text":" "},{"type":"text","text":"However, because shared values are secretly references (that is how data is shared), it is possible"},{"type":"text","text":" "},{"type":"text","text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible"},{"type":"text","text":" "},{"type":"text","text":"to do this directly:"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }","","Now, `Shared` is `Sendable`, and is technically thread-safe in that it will not crash when writing","to it from two different threads. However, allowing direct mutation does make the value susceptible","to race conditions. If you were to perform `count += 1` from 1,000 threads, it is possible for","the final value to not be 1,000.","","We wanted the [`@Shared`](<doc:Shared>) type to be as ergonomic as possible, and that is why we make","it directly mutable, but we should not be allowing these mutations to happen from asynchronous","contexts. And so now the ``Shared\/wrappedValue`` setter has been marked unavailable from","asynchronous contexts, with a helpful message of how to fix:","","```swift","case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix this deprecation you can use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":" method on the projected value of"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it"},{"type":"text","text":" "},{"type":"text","text":"back in the reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically it is still possible to write code that has race conditions, such as this silly example:"}]},{"type":"codeListing","syntax":"swift","code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems"},{"type":"text","text":" "},{"type":"text","text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the"},{"type":"text","text":" "},{"type":"text","text":"shared state as possible in a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":". That will make sure that the full unit"},{"type":"text","text":" "},{"type":"text","text":"of work is guarded by a lock."}]},{"anchor":"Supplying-mock-read-only-state-to-previews","level":2,"type":"heading","text":"Supplying mock read-only state to previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader\/constant(_:)"},{"type":"text","text":" helper on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader"},{"type":"text","text":" has been introduced to simplify"},{"type":"text","text":" "},{"type":"text","text":"supplying mock data to Xcode previews. It works like SwiftUI’s "},{"type":"codeVoice","code":"Binding.constant"},{"type":"text","text":", but for shared"},{"type":"text","text":" "},{"type":"text","text":"references:"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/migrationto1.11"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationTo1.11","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":" method for mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, rather than mutating the underlying wrapped value directly."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Migrating to 1.11","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"role":"symbol","title":"withLock(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withLock"},{"kind":"text","text":"(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader/constant(_:)":{"role":"symbol","title":"constant(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"constant"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SharedReader","preciseIdentifier":"s:22ComposableArchitecture12SharedReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Constructs a read-only shared value that remains constant."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader\/constant(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/sharedreader\/constant(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader":{"role":"symbol","title":"SharedReader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedReader"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SharedReader"}],"url":"\/documentation\/composablearchitecture\/sharedreader"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"role":"collectionGroup","title":"Migration guides","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migrationguides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"role":"collectionGroup","title":"Sharing state","abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"type":"text","text":" "},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/sharingstate"}}}