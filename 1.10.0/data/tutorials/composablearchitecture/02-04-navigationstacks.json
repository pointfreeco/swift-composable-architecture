{"variants":[{"paths":["\/tutorials\/composablearchitecture\/02-04-navigationstacks"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Navigation stacks","chapter":"Navigation","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}]}]},{"kind":"tasks","tasks":[{"anchor":"Contact-detail-feature","title":"Contact detail feature","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to add a new “Contact Detail” feature that will allow us to drill down a layer"},{"type":"text","text":" "},{"type":"text","text":"from the contacts list at the root."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-04-01-code-0000.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called ContactDetailFeature.swift, import the Composable Architecture, and"},{"type":"text","text":" "},{"type":"text","text":"start a stub of a reducer by using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" struct to fulfill that requirement for the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol. The only state we currently need is the"},{"type":"text","text":" "},{"type":"text","text":"contact, and it can be "},{"type":"codeVoice","code":"let"},{"type":"text","text":" since we do not plan on mutating it from this screen."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"type":"text","text":" enum to fulfill that requirement for the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol. There are not currently any actions that can"},{"type":"text","text":" "},{"type":"text","text":"be performed in this feature, so we will leave it empty."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement a basic "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc"},{"type":"text","text":" property to fulfill that"},{"type":"text","text":" "},{"type":"text","text":"requirement of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol. Since there are no actions in"},{"type":"text","text":" "},{"type":"text","text":"this feature there is nothing we can do in the reducer. More will be added to this later."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a stub for a "},{"type":"codeVoice","code":"ContactDetailView"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The view will hold onto a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactDetailFeature"},{"type":"text","text":" domain, allowing it to observe the feature’s state changes and"},{"type":"text","text":" "},{"type":"text","text":"send actions."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Stub out a basic form. There is no real information to show in this view now other than the"},{"type":"text","text":" "},{"type":"text","text":"contact’s name, but more will be added later."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0007.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a preview so that we can see what the view looks like."}]}],"caption":[],"type":"step","runtimePreview":"ch02-sub04-sec01-image-0000.png","media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nothing special so far, but we need a basic feature built so that we start pushing it onto"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack."}]}]},{"anchor":"Drill-down-to-contact-detail","title":"Drill-down to contact detail","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that a new “Contact Detail” feature has been built we will make it possible to drill"},{"type":"text","text":" "},{"type":"text","text":"down to it from the main list of contacts."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-04-02-code-0000.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to ContactsFeature.swift and add a new field to the state. It will be of type"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":", generic of the feature that you want to be able to"},{"type":"text","text":" "},{"type":"text","text":"push onto the stack. This state represents the features that are currently"},{"type":"text","text":" "},{"type":"text","text":"pushed onto the stack."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" type is specifically made for the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture, and makes it easy and ergonomic to integrate stack navigation"},{"type":"text","text":" "},{"type":"text","text":"into your applications."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case to the action enum that holds onto "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This represents the actions that can happen inside the stack, such as pushing or popping"},{"type":"text","text":" "},{"type":"text","text":"an element off the stack, or an action happening inside a particular feature inside the"},{"type":"text","text":" "},{"type":"text","text":"stack."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will also handle the "},{"type":"codeVoice","code":".path"},{"type":"text","text":" case in the reducer and return"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none"},{"type":"text","text":" for now."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the very end of the reducer use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)-yz3v"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"to integrate the "},{"type":"codeVoice","code":"ContactDetailFeature"},{"type":"text","text":" into the stack of the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Scroll down to the bottom of the code snippet to see the application of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"forEach"},{"type":"text","text":" operator."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to the "},{"type":"codeVoice","code":"ContactsView"},{"type":"text","text":" that holds the view for the contacts list. Swap out the"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:)"},{"type":"text","text":", which is a"},{"type":"text","text":" "},{"type":"text","text":"special initializer that is specifically tuned for driving stacks from a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You hand it a binding to a store that is scoped down to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":", and it"},{"type":"text","text":" "},{"type":"text","text":"handles the rest."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:)"},{"type":"text","text":" takes two trailing closures. The"},{"type":"text","text":" "},{"type":"text","text":"first is for the root of the stack, which is our list of contacts. The second is to describe"},{"type":"text","text":" "},{"type":"text","text":"the destinations that can be navigated to. It is handled a store that is focused on the"},{"type":"text","text":" "},{"type":"text","text":"domain of just a single element in the stack."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Wrap the row in the contacts list in a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", using the special"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:line:)"},{"type":"text","text":" initializer that ships with this"},{"type":"text","text":" "},{"type":"text","text":"library. We are also applying a "},{"type":"codeVoice","code":".borderless"},{"type":"text","text":" button style so that we can have the delete"},{"type":"text","text":" "},{"type":"text","text":"button in the row too."}]}],"caption":[{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is necessary to use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:line:)"},{"type":"text","text":" initializer on "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" "},{"type":"text","text":"instead of the "},{"type":"codeVoice","code":"init(value:)"},{"type":"text","text":" initializer that comes with SwiftUI."}]}],"type":"aside","name":"Warning"}],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the application to see that we can now drill down one level, for each contact."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"ch02-sub04-sec01-video-0000.mov"}]},{"anchor":"Deleting-a-contact","title":"Deleting a contact","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have some drill-down functionality in our contacts app, but currently there is no"},{"type":"text","text":" "},{"type":"text","text":"interaction between the detail screen and the contacts list. Let’s change this by allowing"},{"type":"text","text":" "},{"type":"text","text":"you to delete a contact from the detail screen. We will first prompt the user with an alert"},{"type":"text","text":" "},{"type":"text","text":"asking them to confirm deletion, just as we did in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"type":"text","text":"."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-04-03-code-0000.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to ContactDetailFeature.swift to add more functionality to the reducer and view. We"},{"type":"text","text":" "},{"type":"text","text":"will start by adding some optional "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" to represent"},{"type":"text","text":" "},{"type":"text","text":"show the alert."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-03-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add cases to "},{"type":"codeVoice","code":"ContactDetailFeature.Action"},{"type":"text","text":" for all the things the user can do in the UI,"},{"type":"text","text":" "},{"type":"text","text":"such as tapping the “Delete” button, as well as any actions inside the alert and the"},{"type":"text","text":" "},{"type":"text","text":"delegate actions for when we need to tell the parent feature to delete the contact."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The alert and delegate actions do not need an ID like was needed before. You will"},{"type":"text","text":" "},{"type":"text","text":"see why soon."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-03-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the new actions in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" property. This is very similar to what we did in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"type":"text","text":". We will handle confirming of deletion by sending a"},{"type":"text","text":" "},{"type":"text","text":"delegate action and dismissing using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"dependency, and we have extracted the alert state to its own helper to make it easier to"},{"type":"text","text":" "},{"type":"text","text":"test later."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-03-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to the "},{"type":"codeVoice","code":"ContactDetailView"},{"type":"text","text":" struct and add a button for deleting the contact, as well as"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" modifier to show an alert with the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-03-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to ContactsFeature.swift and destructure the "},{"type":"codeVoice","code":".path"},{"type":"text","text":" action in order to inspect what"},{"type":"text","text":" "},{"type":"text","text":"is happening in each element of the stack. In particular, we want to listen for when a"},{"type":"text","text":" "},{"type":"codeVoice","code":".delegate(.confirmDeletion)"},{"type":"text","text":" action is sent, and in that case remove the contact from the"},{"type":"text","text":" "},{"type":"text","text":"array."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the preview to see that the application works as expected. You can drill down to a"},{"type":"text","text":" "},{"type":"text","text":"contact, tap the delete button, confirm deletion, and then the detail is popped off the"},{"type":"text","text":" "},{"type":"text","text":"stack and the contact is removed from the list."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"ch02-sub04-sec03-video-0000.mp4"}]}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Navigation stacks","categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"role":"pseudoSymbol","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"role":"project","title":"Multiple presentation destinations","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"role":"pseudoSymbol","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationLink/init(state:label:fileID:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Label"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(state:label:fileID:line:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"L"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"label"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"L"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a navigation link that presents the view corresponding to an element of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/navigationlink\/init(state:label:fileid:line:)"},"02-04-01-code-0006.swift":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","    Form {","    }","    .navigationTitle(Text(store.contact.name))","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0006.swift","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","title":"Essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"role":"pseudoSymbol","title":"Deriving child stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-8lumc":{"defaultImplementations":2,"role":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Body"}],"abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-8lumc"},"02-04-01-code-0000.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0000.swift","type":"file","fileType":"swift","highlights":[]},"02-04-01-code-0007.swift":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","    Form {","    }","    .navigationTitle(Text(store.contact.name))","  }","}","","#Preview {","  NavigationStack {","    ContactDetailView(","      store: Store(","        initialState: ContactDetailFeature.State(","          contact: Contact(id: UUID(), name: \"Blob\")","        )","      ) {","        ContactDetailFeature()","      }","    )","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0007.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25}]},"02-04-03-code-0003.swift":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  @Bindable var store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","    Form {","      Button(\"Delete\") {","        store.send(.deleteButtonTapped)","      }","    }","    .navigationTitle(Text(store.contact.name))","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}","","#Preview {","  NavigationStack {","    ContactDetailView(","      store: Store(","        initialState: ContactDetailFeature.State(","          contact: Contact(id: UUID(), name: \"Blob\")","        )","      ) {","        ContactDetailFeature()","      }","    )","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-03-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":8},{"line":9},{"line":10},{"line":13}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"ch02-sub04-sec03-video-0000.mp4":{"poster":null,"alt":null,"type":"video","identifier":"ch02-sub04-sec03-video-0000.mp4","variants":[{"url":"\/videos\/ch02-sub04-sec03-video-0000.mp4","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"role":"pseudoSymbol","title":"Child-to-parent communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"02-04-02-code-0004.swift":{"syntax":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":30},{"line":31}]},"02-04-02-code-0000.swift":{"syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0000.swift","type":"file","fileType":"swift","highlights":[{"line":7}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:line:)-yz3v":{"role":"symbol","title":"forEach(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_StackReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in"},{"type":"text","text":" "},{"type":"text","text":"parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)-yz3v","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:line:)-yz3v"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"role":"project","title":"Adding side effects","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","title":"Contact detail feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"role":"symbol","title":"StackState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackState"}],"abstract":[{"type":"text","text":"A list of data representing the content of a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackState"}],"url":"\/documentation\/composablearchitecture\/stackstate"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"role":"project","title":"Testing presentation","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"role":"pseudoSymbol","title":"What is a side effect?","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"role":"pseudoSymbol","title":"Adding a tab view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view"},"02-04-03-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-03-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"role":"pseudoSymbol","title":"Testing state changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"role":"pseudoSymbol","title":"Testing effects","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"role":"symbol","title":"DismissEffect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DismissEffect"}],"abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"ch02-sub04-sec01-video-0000.mov":{"poster":null,"alt":null,"type":"video","identifier":"ch02-sub04-sec01-video-0000.mov","variants":[{"url":"\/videos\/ch02-sub04-sec01-video-0000.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"role":"pseudoSymbol","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"role":"symbol","title":"none","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"none"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/none"},"02-04-03-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmDeletion)):","        return .run { send in","          await send(.delegate(.confirmDeletion))","          await self.dismiss()","        }","      case .alert:","        return .none","      case .delegate:","        return .none","      case .deleteButtonTapped:","        state.alert = .confirmDeletion","        return .none","      }","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}","","extension AlertState where Action == ContactDetailFeature.Action.Alert {","  static let confirmDeletion = Self {","    TextState(\"Are you sure?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmDeletion) {","      TextState(\"Delete\")","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-03-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":39},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51}]},"02-04-01-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    let contact: Contact","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Root"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(path:root:destination:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"path"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">>>, "},{"kind":"externalParam","text":"root"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Drives a navigation stack with a store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:)"},"02-04-01-code-0005.swift":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","  ","  var body: some View {","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5}]},"02-04-01-code-0004.swift":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  var body: some View {","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0004.swift","type":"file","fileType":"swift","highlights":[]},"02-04-02-code-0002.swift":{"syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackAction<ContactDetailFeature.State, ContactDetailFeature.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","        ","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination()","    }","    .forEach(\\.path, action: \\.path) {","      ContactDetailFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":52},{"line":53},{"line":54}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"role":"symbol","title":"State","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"}],"abstract":[{"type":"text","text":"A type that holds the current state of the reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/state"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","estimatedTime":"20min","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"02-04-03-code-0000.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-03-code-0000.swift","type":"file","fileType":"swift","highlights":[{"line":7}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","title":"Improve domain modeling","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"02-04-03-code-0004.swift":{"syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackAction<ContactDetailFeature.State, ContactDetailFeature.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","        ","      case let .path(.element(id: id, action: .delegate(.confirmDeletion))):","        guard let detailState = state.path[id: id]","        else { return .none }","        state.contacts.remove(id: detailState.contact.id)","        return .none","        ","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination()","    }","    .forEach(\\.path, action: \\.path) {","      ContactDetailFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-03-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"role":"symbol","title":"Action","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Action"}],"abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" of the reducer to change"},{"type":"text","text":" "},{"type":"text","text":"and\/or kick off a side "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" that can communicate with the outside world."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/action"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"role":"symbol","title":"StackAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"url":"\/documentation\/composablearchitecture\/stackaction"},"02-04-02-code-0005.swift":{"syntax":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","      List {","        ForEach(store.contacts) { contact in","          NavigationLink(state: ContactDetailFeature.State(contact: contact)) {","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                store.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","          .buttonStyle(.borderless)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":20}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"role":"pseudoSymbol","title":"Composing reducers","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"role":"article","title":"Navigation","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"role":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"role":"pseudoSymbol","title":"Create a reducer","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"role":"project","title":"Your first presentation","estimatedTime":"30min","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"02-04-01-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    let contact: Contact","  }","  enum Action {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","title":"PresentationState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"02-04-01-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct ContactDetailFeature {","  @ObservableState","  struct State: Equatable {","    let contact: Contact","  }","  enum Action {","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","title":"Testing the add contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"02-04-02-code-0003.swift":{"syntax":"swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":5}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"role":"pseudoSymbol","title":"Managing a timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"ch02-sub04-sec01-image-0000.png":{"alt":null,"type":"image","identifier":"ch02-sub04-sec01-image-0000.png","variants":[{"url":"\/images\/ch02-sub04-sec01-image-0000.png","traits":["1x","light"]}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"02-04-02-code-0001.swift":{"syntax":"swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackAction<ContactDetailFeature.State, ContactDetailFeature.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","        ","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0001.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":44},{"line":45},{"line":46}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"role":"project","title":"Composing features","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" we have been building thus far."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","title":"Testing your feature","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"}}}