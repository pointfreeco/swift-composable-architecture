{"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'switch' with a store of observable state, instead. For more information, see the following article: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Replacing-SwitchStore-and-CaseLet-with-switch-and-case]"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}],"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"],"title":"Building Content","anchor":"Building-Content"},{"anchor":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/init(_:content:)"],"title":"Initializers","generated":true},{"anchor":"Instance-Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/body","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/content","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/store"],"title":"Instance Properties","generated":true},{"anchor":"Default-Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/View-Implementations"],"title":"Default Implementations","generated":true}],"seeAlsoSections":[{"anchor":"View-containers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"],"title":"View containers","generated":true}],"metadata":{"externalID":"s:22ComposableArchitecture11SwitchStoreV","symbolKind":"struct","title":"SwitchStore","roleHeading":"Structure","platforms":[],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"}],"navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"modules":[{"name":"ComposableArchitecture"}],"role":"symbol"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/switchstore"]}],"relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"],"title":"Conforms To"}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","preciseIdentifier":"s:ScM","text":"MainActor"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"text":"Content","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"An application may model parts of its state with enums. For example, app state may differ if a","type":"text"},{"text":" ","type":"text"},{"text":"user is logged-in or not:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct AppFeature {","  enum State {","    case loggedIn(LoggedInState)","    case loggedOut(LoggedOutState)","  }","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the view layer, a store on this state can switch over each case using a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","isActive":true},{"type":"text","text":" view per case:"}],"type":"paragraph"},{"code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    SwitchStore(self.store) { state in","      switch state {","      case .loggedIn:","        CaseLet(","          \/AppFeature.State.loggedIn, action: AppFeature.Action.loggedIn","        ) { loggedInStore in","          LoggedInView(store: loggedInStore)","        }","      case .loggedOut:","        CaseLet(","          \/AppFeature.State.loggedOut, action: AppFeature.Action.loggedOut","        ) { loggedOutStore in","          LoggedOutView(store: loggedOutStore)","        }","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"aside","style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SwitchStore"},{"type":"text","text":" view builder is only evaluated when the case of state passed to"},{"type":"text","text":" "},{"type":"text","text":"it changes. As such, you should not rely on this value for anything other than checking the"},{"type":"text","text":" "},{"type":"text","text":"current case, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"type":"text","text":" by switching on it and routing to an appropriate "},{"type":"codeVoice","code":"CaseLet"},{"type":"text","text":"."}]}]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"type":"codeVoice","code":"Reducer\/ifCaseLet(_:action:then:fileID:filePath:line:column:)-7sg8d"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Scope\/init(state:action:child:fileID:filePath:line:column:)-9g44g"},{"text":" for embedding reducers","type":"text"},{"text":" ","type":"text"},{"text":"that operate on each case of an enum in reducers that operate on the entire enum.","type":"text"}]}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SwitchStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","title":"SwitchStore","kind":"symbol","abstract":[{"text":"A view that observes when enum state held in a store changes cases, and provides stores to","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","isActive":true},{"text":" views.","type":"text"}],"navigatorTitle":[{"text":"SwitchStore","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/switchstore","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","deprecated":true,"title":"ForEachStore","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"title":"ViewStore","role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"ViewStore","type":"codeVoice"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"url":"\/documentation\/composablearchitecture\/viewstore","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"deprecated":true,"type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"kind":"article","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"url":"\/documentation\/composablearchitecture\/navigationstackstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationStackStore","kind":"identifier"}],"navigatorTitle":[{"text":"NavigationStackStore","kind":"identifier"}],"type":"topic","title":"NavigationStackStore","abstract":[{"type":"text","text":"A navigation stack that is driven by a store."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/store":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"store"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/store","url":"\/documentation\/composablearchitecture\/switchstore\/store","deprecated":true,"type":"topic","title":"store","kind":"symbol","abstract":[],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","title":"IfLetStore","role":"symbol","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/ifletstore","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/content":{"type":"topic","url":"\/documentation\/composablearchitecture\/switchstore\/content","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"content"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Content"}],"kind":"symbol","deprecated":true,"role":"symbol","abstract":[],"title":"content","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/content"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"type":"unresolvable","title":"SwiftUICore.View","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" so that its state can be observed","type":"text"},{"text":" ","type":"text"},{"text":"by a view builder.","type":"text"}],"type":"topic","deprecated":true,"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","title":"WithViewStore","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","title":"Store","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"type":"topic","url":"\/documentation\/composablearchitecture\/navigationlinkstore","abstract":[{"type":"text","text":"A view that controls a navigation presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","title":"NavigationLinkStore","navigatorTitle":[{"text":"NavigationLinkStore","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationLinkStore","kind":"identifier"}],"role":"symbol","kind":"symbol","deprecated":true},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/init(_:content:)":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/init(_:content:)","role":"symbol","deprecated":true,"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"content","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":")"}],"type":"topic","title":"init(_:content:)","url":"\/documentation\/composablearchitecture\/switchstore\/init(_:content:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"role":"collectionGroup","type":"topic","title":"Deprecations","kind":"article","url":"\/documentation\/composablearchitecture\/swiftuideprecations","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/body":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/body","title":"body","url":"\/documentation\/composablearchitecture\/switchstore\/body","role":"symbol","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier"}],"abstract":[],"deprecated":true,"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"url":"\/documentation\/composablearchitecture\/caselet","kind":"symbol","type":"topic","title":"CaseLet","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CaseLet","kind":"identifier"}],"role":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","abstract":[{"text":"A view that handles a specific case of enum state in a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true,"type":"reference"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CaseLet","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/View-Implementations":{"url":"\/documentation\/composablearchitecture\/switchstore\/view-implementations","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/View-Implementations","role":"collectionGroup","title":"View Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"}}}