{"seeAlsoSections":[{"title":"State management","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol describes how to evolve the current state of an application to the next"},{"type":"text","text":" "},{"type":"text","text":"state, given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any. Types that conform to this protocol represent the domain, logic and behavior for a feature."},{"type":"text","text":" "},{"type":"text","text":"Conformances to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" can be written by hand, but the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" can make your reducers"},{"type":"text","text":" "},{"type":"text","text":"more concise and more powerful."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Conforming-to-the-Reducer-protocol"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Using-the-Reducer-macro"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#CasePathable-and-dynamicMemberLookup-enums"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Automatic-fulfillment-of-reducer-requirements"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Destination-and-path-reducers"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Navigating-to-non-reducer-features"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Synthesizing-protocol-conformances-on-State-and-Action"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Gotchas"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Autocomplete"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Circular-reference-errors"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Preview-and-enum-reducers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#CI-build-failures"}]}]}]}]}]}]}]},{"anchor":"Conforming-to-the-Reducer-protocol","level":2,"type":"heading","text":"Conforming to the Reducer protocol"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The bare minimum of conforming to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol is to provide a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"that represents the state your feature needs to do its job, a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"type":"text","text":" type that"},{"type":"text","text":" "},{"type":"text","text":"represents the actions users can perform in your feature (as well as actions that effects can"},{"type":"text","text":" "},{"type":"text","text":"feed back into the system), and a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc"},{"type":"text","text":" property that compose your feature"},{"type":"text","text":" "},{"type":"text","text":"together with any other features that are needed (such as for navigation)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a very simple example, a “counter” feature could model its state as a struct holding an integer:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterFeature: Reducer {","  @ObservableState","  struct State {","    var count = 0","  }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We have added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" to "},{"type":"codeVoice","code":"State"},{"type":"text","text":" here so that the view can automatically"},{"type":"text","text":" "},{"type":"text","text":"observe state changes. In future versions of the library this macro will be automatically applied"},{"type":"text","text":" "},{"type":"text","text":"by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The actions would be just two cases for tapping an increment or decrement button:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterFeature: Reducer {","  \/\/ ...","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The logic of your feature is implemented by mutating the feature’s current state when an action"},{"type":"text","text":" "},{"type":"text","text":"comes into the system. This is most easily done by constructing a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce"},{"type":"text","text":" inside the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc"},{"type":"text","text":" of your reducer:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterFeature: Reducer {","  \/\/ ...","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","      case .incrementButtonTapped:","        state.count += 1  ","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce"},{"type":"text","text":" reducer’s first responsibility is to mutate the feature’s current state given an"},{"type":"text","text":" "},{"type":"text","text":"action. Its second responsibility is to return effects that will be executed asynchronously and feed"},{"type":"text","text":" "},{"type":"text","text":"their data back into the system. Currently "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" does not need to run any effects, and so"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none"},{"type":"text","text":" is returned."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the feature does need to do effectful work, then more would need to be done. For example, suppose"},{"type":"text","text":" "},{"type":"text","text":"the feature has the ability to start and stop a timer, and with each tick of the timer the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" "},{"type":"text","text":"will be incremented. That could be done like so:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterFeature: Reducer {","  @ObservableState","  struct State {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","    case startTimerButtonTapped","    case stopTimerButtonTapped","    case timerTick","  }","  enum CancelID { case timer }","","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return .none","","      case .startTimerButtonTapped:","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","        .cancellable(CancelID.timer)","","      case .stopTimerButtonTapped:","        return .cancel(CancelID.timer)","","      case .timerTick:","        state.count += 1","        return .none","      }","    }","  }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This sample emulates a timer by performing an infinite loop with a "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":" inside. This"},{"type":"text","text":" "},{"type":"text","text":"is simple to do, but is also inaccurate since small imprecisions can accumulate. It would be"},{"type":"text","text":" "},{"type":"text","text":"better to inject a clock into the feature so that you could use its "},{"type":"codeVoice","code":"timer"},{"type":"text","text":" method. Read the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing"},{"type":"text","text":" articles for more information."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is the basics of implementing a feature as a conformance to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":"."}]},{"anchor":"Using-the-Reducer-macro","level":2,"type":"heading","text":"Using the @Reducer macro"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you technically can conform to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol directly, as we did above, the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro can automate many aspects of implementing features for you. At a bare minimum,"},{"type":"text","text":" "},{"type":"text","text":"all you have to do is annotate your reducer with "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" and you can even drop the "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" "},{"type":"text","text":"conformance:"}]},{"type":"codeListing","syntax":"diff","code":["+@Reducer","-struct CounterFeature: Reducer {","+struct CounterFeature {","   @ObservableState","   struct State {","     var count = 0","   }","   enum Action {","     case decrementButtonTapped","     case incrementButtonTapped","   }","   var body: some ReducerOf<Self> {","     Reduce { state, action in","       switch action {","       case .decrementButtonTapped:","         state.count -= 1","         return .none","       case .incrementButtonTapped:","         state.count += 1  ","         return .none","       }","     }","   }"," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a number of things the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro does for you:"}]},{"anchor":"CasePathable-and-dynamicMemberLookup-enums","level":4,"type":"heading","text":"@CasePathable and @dynamicMemberLookup enums"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro automatically applies the "},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swift-case-paths\/main\/documentation\/casepaths\/casepathable()"},{"type":"text","text":" macro to your"},{"type":"text","text":" "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum:"}]},{"type":"codeListing","syntax":"diff","code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"type":"text","text":" are a tool that bring the power and ergonomics of key paths to enum"},{"type":"text","text":" "},{"type":"text","text":"cases, and they are a vital tool for composing reducers together."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In particular, having this macro applied to your "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum will allow you to use key path"},{"type":"text","text":" "},{"type":"text","text":"syntax for specifying enum cases in various APIs in the library, such as"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)-4f2at"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)-yz3v"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":", and more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" of your feature is an enum, which is useful for modeling a feature"},{"type":"text","text":" "},{"type":"text","text":"that can be one of multiple mutually exclusive values, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" will apply the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro, as well as "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will allow you to use key path syntax for specifying case paths to the "},{"type":"codeVoice","code":"State"},{"type":"text","text":"’s cases, as well"},{"type":"text","text":" "},{"type":"text","text":"as allow you to use dot-chaining syntax for optionally extracting a case from the state. This can be"},{"type":"text","text":" "},{"type":"text","text":"useful when using the operators that come with the library that allow for driving navigation from an"},{"type":"text","text":" "},{"type":"text","text":"enum of options:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(","  item: $store.scope(state: \\.destination?.editForm, action: \\.destination.editForm)",") { store in","  FormView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax "},{"type":"codeVoice","code":"state: \\.destination?.editForm"},{"type":"text","text":" is only possible due to both "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" being applied to the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" enum."}]},{"anchor":"Automatic-fulfillment-of-reducer-requirements","level":4,"type":"heading","text":"Automatic fulfillment of reducer requirements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro will automatically fill in any "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol requirements that you"},{"type":"text","text":" "},{"type":"text","text":"leave off. For example, something as simple as this compiles:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro will automatically insert an empty "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" struct, an empty"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"type":"text","text":" enum, and an empty "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc"},{"type":"text","text":". This effectively means that"},{"type":"text","text":" "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" is a logicless, behaviorless, inert reducer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having these requirements automatically fulfilled for you can be handy for slowly filling them in"},{"type":"text","text":" "},{"type":"text","text":"with their real implementations. For example, this "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer could be integrated in a parent"},{"type":"text","text":" "},{"type":"text","text":"domain using the library’s navigation tools, all without having implemented any of the domain yet."},{"type":"text","text":" "},{"type":"text","text":"Then, once we are ready we can start implementing the real logic and behavior of the feature."}]},{"anchor":"Destination-and-path-reducers","level":4,"type":"heading","text":"Destination and path reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is a common pattern in the Composable Architecture of representing destinations a feature can"},{"type":"text","text":" "},{"type":"text","text":"navigate to as a reducer that operates on enum state, with a case for each feature that can be"},{"type":"text","text":" "},{"type":"text","text":"navigated to. This is explained in great detail in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation"},{"type":"text","text":" articles."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This form of domain modeling can be very powerful, but also incur a bit of boilerplate. For example,"},{"type":"text","text":" "},{"type":"text","text":"if a feature can navigate to 3 other features, then one might have a "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer like the"},{"type":"text","text":" "},{"type":"text","text":"following:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Destination {","  @ObservableState","  enum State {","    case add(FormFeature.State)","    case detail(DetailFeature.State)","    case edit(EditFeature.State)","  }","  enum Action {","    case add(FormFeature.Action)","    case detail(DetailFeature.Action)","    case edit(EditFeature.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.add, action: \\.add) {","      FormFeature()","    }","    Scope(state: \\.detail, action: \\.detail) {","      DetailFeature()","    }","    Scope(state: \\.edit, action: \\.edit) {","      EditFeature()","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s not the worst code in the world, but it is 24 lines with a lot of repetition, and if we need to"},{"type":"text","text":" "},{"type":"text","text":"add a new destination we must add a case to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" enum, a case to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"type":"text","text":" enum, and a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro is now capable of generating all of this code for you from the following"},{"type":"text","text":" "},{"type":"text","text":"simple declaration"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","enum Destination {","  case add(FormFeature)","  case detail(DetailFeature)","  case edit(EditFeature)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"24 lines of code has become 6. The "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro can now be applied to an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enum"}]},{"type":"text","text":" where each case"},{"type":"text","text":" "},{"type":"text","text":"holds onto the reducer that governs the logic and behavior for that case. Further, when using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:)"},{"type":"text","text":" operator with this style of "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" enum reducer you can"},{"type":"text","text":" "},{"type":"text","text":"completely leave off the trailing closure as it can be automatically inferred:"}]},{"type":"codeListing","syntax":"diff","code":[" Reduce { state, action in","   \/\/ Core feature logic"," }"," .ifLet(\\.$destination, action: \\.destination)","-{","-  Destination()","-}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This pattern also works for "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducers, which is common when dealing with"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation"},{"type":"text","text":", and in that case you can leave off the trailing closure of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)"},{"type":"text","text":" operator:"}]},{"type":"codeListing","syntax":"diff","code":["Reduce { state, action in","  \/\/ Core feature logic","}",".forEach(\\.path, action: \\.path)","-{","-  Path()","-}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, for "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducers in particular, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro also helps you reduce"},{"type":"text","text":" "},{"type":"text","text":"boilerplate when using the initializer"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:)"},{"type":"text","text":" that comes with the library. In the last"},{"type":"text","text":" "},{"type":"text","text":"trailing closure you can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case"},{"type":"text","text":" computed property to switch on the "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":" enum"},{"type":"text","text":" "},{"type":"text","text":"and extract out a store for each case:"}]},{"type":"codeListing","syntax":"swift","code":["NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","  \/\/ Root view","} destination: { store in","  switch store.case {","  case let .add(store):","    AddView(store: store)","  case let .detail(store):","    DetailView(store: store)","  case let .edit(store):","    EditView(store: store)","  }","}"]},{"anchor":"Navigating-to-non-reducer-features","level":4,"type":"heading","text":"Navigating to non-reducer features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many times that you want to present or navigate to a feature that is not modeled with a"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture reducer. This can happen with legacy features that are not built with the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture, or with features that are very simple and do not need a fully built"},{"type":"text","text":" "},{"type":"text","text":"reducer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In those cases you can use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()"},{"type":"text","text":" macros to"},{"type":"text","text":" "},{"type":"text","text":"annotate cases that are not powered by reducers. See the documentation for those macros for more"},{"type":"text","text":" "},{"type":"text","text":"details."}]},{"anchor":"Synthesizing-protocol-conformances-on-State-and-Action","level":4,"type":"heading","text":"Synthesizing protocol conformances on State and Action"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" types are generated automatically for you when using "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" on an"},{"type":"text","text":" "},{"type":"text","text":"enum, it’s not possible to directly synthesize conformances of "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"etc."}]},{"type":"text","text":", on those types. And further, due to a bug in the Swift compiler you cannot currently do"},{"type":"text","text":" "},{"type":"text","text":"this:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","enum Destination {","  \/\/ ...","}","extension Destination.State: Equatable {}  \/\/ ❌"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers#Circular-reference-errors"},{"type":"text","text":" below for more info on this error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, to work around this compiler bug the "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro takes two"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance"},{"type":"text","text":" arguments that allow you to describe which"},{"type":"text","text":" "},{"type":"text","text":"protocols you want to attach to the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" types:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer(state: .equatable, .sendable, action: .sendable)","enum Destination {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide any combination of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/codable"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/decodable"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/encodable"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/equatable"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/hashable"},{"type":"text","text":", or"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/sendable"},{"type":"text","text":"."}]},{"anchor":"Gotchas","level":3,"type":"heading","text":"Gotchas"},{"anchor":"Autocomplete","level":4,"type":"heading","text":"Autocomplete"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" can break autocompletion in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the reducer. This is a known"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift\/issues\/69477"},{"type":"text","text":", and it can generally be worked around by"},{"type":"text","text":" "},{"type":"text","text":"providing additional type hints to the compiler:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding an explicit "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" conformance in addition to the macro application can restore"},{"type":"text","text":" "},{"type":"text","text":"autocomplete throughout the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the reducer:"}]},{"type":"codeListing","syntax":"diff","code":[" @Reducer","-struct Feature {","+struct Feature: Reducer {"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding explicit generics to instances of "},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" can restore autocomplete"},{"type":"text","text":" "},{"type":"text","text":"inside the "},{"type":"codeVoice","code":"Reduce"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":[" var body: some Reducer<State, Action> {","-  Reduce { state, action in","+  Reduce<State, Action> { state, action in"]}]}]},{"anchor":"Circular-reference-errors","level":4,"type":"heading","text":"Circular reference errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is currently a bug in the Swift compiler and macros that prevents you from extending types"},{"type":"text","text":" "},{"type":"text","text":"that are inside other types with macros applied in the same file. For example, if you wanted to"},{"type":"text","text":" "},{"type":"text","text":"extend a reducer’s "},{"type":"codeVoice","code":"State"},{"type":"text","text":" with some extra functionality:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  \/\/ ...","}","","extension Feature.State {  \/\/ 🛑 Circular reference","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This unfortunately does not work. It is a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift\/issues\/66450"},{"type":"text","text":", and the only workaround is to either"},{"type":"text","text":" "},{"type":"text","text":"move the extension to a separate file, or move the code from the extension to be directly inside the"},{"type":"text","text":" "},{"type":"codeVoice","code":"State"},{"type":"text","text":" type."}]},{"anchor":"Preview-and-enum-reducers","level":4,"type":"heading","text":"#Preview and enum reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"#Preview"},{"type":"text","text":" macro is not capable of seeing the expansion of any macros since it is a macro"},{"type":"text","text":" "},{"type":"text","text":"itself. This means that when using destination and path reducers (see"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers#Destination-and-path-reducers"},{"type":"text","text":" above) you cannot construct the cases of the state"},{"type":"text","text":" "},{"type":"text","text":"enum inside "},{"type":"codeVoice","code":"#Preview"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(","        destination: .edit(EditFeature.State())  \/\/ 🛑","      )","    ) {","      Feature()","    }","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".edit"},{"type":"text","text":" case is not usable from within "},{"type":"codeVoice","code":"#Preview"},{"type":"text","text":" since it is generated by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" "},{"type":"text","text":"macro."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The workaround is to move the view to a helper that be compiled outside of a macro, and then use it"},{"type":"text","text":" "},{"type":"text","text":"inside the macro:"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","  preview","}","private var preview: some View {","  FeatureView(","    store: Store(","      initialState: Feature.State(","        destination: .edit(EditFeature.State())","      )","    ) {","      Feature()","    }","  )","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a computed property, free function, or even a dedicated view if you want. You can also"},{"type":"text","text":" "},{"type":"text","text":"use the old, non-macro style of previews by using a "},{"type":"codeVoice","code":"PreviewProvider"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature_Previews: PreviewProvider {","  static var previews: some  View {","    FeatureView(","      store: Store(","        initialState: Feature.State(","          destination: .edit(EditFeature.State())","        )","      ) {","        Feature()","      }","    )","  }","}"]},{"anchor":"CI-build-failures","level":4,"type":"heading","text":"CI build failures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When testing your code on an external CI server you may run into errors such as the following:"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CasePathsMacros Target ‘CasePathsMacros’ must be enabled before it can be used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ComposableArchitectureMacros Target ‘ComposableArchitectureMacros’ must be enabled before it can"},{"type":"text","text":" "},{"type":"text","text":"be used."}]}],"type":"aside","name":"Error"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can fix this in one of two ways. You can write a default to the CI machine that allows Xcode to"},{"type":"text","text":" "},{"type":"text","text":"skip macro validation:"}]},{"type":"codeListing","syntax":"shell","code":["defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or if you are invoking "},{"type":"codeVoice","code":"xcodebuild"},{"type":"text","text":" directly in your CI scripts, you can pass the"},{"type":"text","text":" "},{"type":"codeVoice","code":"-skipMacroValidation"},{"type":"text","text":" flag to "},{"type":"codeVoice","code":"xcodebuild"},{"type":"text","text":" when building your project:"}]},{"type":"codeListing","syntax":"shell","code":["xcodebuild -skipMacroValidation …"]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/reducers"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn about one of the most fundamental tools in the Composable Architecture: the reducer. It is"},{"type":"text","text":" "},{"type":"text","text":"responsible for evolving the state of your application forward when an action is sent, and"},{"type":"text","text":" "},{"type":"text","text":"constructing effects that are executed in the outside world."}],"kind":"article","metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"collectionGroup","title":"Reducers"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing":{"role":"article","title":"Testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseIgnored()":{"role":"symbol","title":"ReducerCaseIgnored()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerCaseIgnored"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Marks the case of an enum reducer as “ignored”, and as such will not compose the case’s"},{"type":"text","text":" "},{"type":"text","text":"domain into the rest of the reducer besides state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducercaseignored()"},"https://github.com/apple/swift/issues/69477":{"title":"issue","titleInlineContent":[{"type":"text","text":"issue"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift\/issues\/69477","url":"https:\/\/github.com\/apple\/swift\/issues\/69477"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"role":"symbol","title":"Action","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Action"}],"abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State"},{"type":"text","text":" of the reducer to change"},{"type":"text","text":" "},{"type":"text","text":"and\/or kick off a side "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" that can communicate with the outside world."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/action"},"#Preview-and-enum-reducers":{"title":"#Preview and enum reducers","titleInlineContent":[{"type":"text","text":"#Preview and enum reducers"}],"type":"link","identifier":"#Preview-and-enum-reducers","url":"#Preview-and-enum-reducers"},"#Automatic-fulfillment-of-reducer-requirements":{"title":"Automatic fulfillment of reducer requirements","titleInlineContent":[{"type":"text","text":"Automatic fulfillment of reducer requirements"}],"type":"link","identifier":"#Automatic-fulfillment-of-reducer-requirements","url":"#Automatic-fulfillment-of-reducer-requirements"},"#Navigating-to-non-reducer-features":{"title":"Navigating to non-reducer features","titleInlineContent":[{"type":"text","text":"Navigating to non-reducer features"}],"type":"link","identifier":"#Navigating-to-non-reducer-features","url":"#Navigating-to-non-reducer-features"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"role":"symbol","title":"none","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"none"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/none"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation":{"role":"article","title":"Tree-based navigation","abstract":[{"type":"text","text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including"},{"type":"text","text":" "},{"type":"text","text":"how to model your domains, how to integrate features, how to test your features, and more."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/treebasednavigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_SynthesizedConformance/hashable":{"role":"symbol","title":"hashable","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"hashable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV"}],"abstract":[{"type":"text","text":"Extends the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" types that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" creates with the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" "},{"type":"text","text":"protocol."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/hashable","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_synthesizedconformance\/hashable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:)":{"role":"symbol","title":"ifLet(_:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">>) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">\n"}],"abstract":[{"type":"text","text":"A special overload of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)-4f2at"},{"type":"text","text":" for enum"},{"type":"text","text":" "},{"type":"text","text":"reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation":{"role":"article","title":"Stack-based navigation","abstract":[{"type":"text","text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to"},{"type":"text","text":" "},{"type":"text","text":"model your domains, how to integrate features, how to test your features, and more."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/stackbasednavigation"},"#CI-build-failures":{"title":"CI build failures","titleInlineContent":[{"type":"text","text":"CI build failures"}],"type":"link","identifier":"#CI-build-failures","url":"#CI-build-failures"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_SynthesizedConformance/encodable":{"role":"symbol","title":"encodable","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"encodable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV"}],"abstract":[{"type":"text","text":"Extends the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" types that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" creates with the "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" "},{"type":"text","text":"protocol."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/encodable","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_synthesizedconformance\/encodable"},"#Conforming-to-the-Reducer-protocol":{"title":"Conforming to the Reducer protocol","titleInlineContent":[{"type":"text","text":"Conforming to the Reducer protocol"}],"type":"link","identifier":"#Conforming-to-the-Reducer-protocol","url":"#Conforming-to-the-Reducer-protocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_SynthesizedConformance/decodable":{"role":"symbol","title":"decodable","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"decodable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV"}],"abstract":[{"type":"text","text":"Extends the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" types that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" creates with the "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" "},{"type":"text","text":"protocol."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/decodable","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_synthesizedconformance\/decodable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"role":"symbol","title":"ObservableState()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableState"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/observablestate()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_SynthesizedConformance/equatable":{"role":"symbol","title":"equatable","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"equatable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV"}],"abstract":[{"type":"text","text":"Extends the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" types that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" creates with the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" "},{"type":"text","text":"protocol."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/equatable","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_synthesizedconformance\/equatable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"role":"article","title":"Dependencies","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"type":"text","text":"any reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducers#Destination-and-path-reducers":{"abstract":[],"title":"Destination and path reducers","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers#Destination-and-path-reducers","url":"\/documentation\/composablearchitecture\/reducers#Destination-and-path-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/case":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CaseReducerState"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" is "},{"type":"codeVoice","code":"State.StateReducer.Action"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"case","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"StateReducer"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"CaseScope"}],"abstract":[{"type":"text","text":"A destructurable view of a store on a collection of cases."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/case"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-8lumc":{"defaultImplementations":2,"role":"symbol","title":"body","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Body"}],"abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-8lumc","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/body-8lumc"},"#Gotchas":{"title":"Gotchas","titleInlineContent":[{"type":"text","text":"Gotchas"}],"type":"link","identifier":"#Gotchas","url":"#Gotchas"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_SynthesizedConformance/sendable":{"role":"symbol","title":"sendable","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"sendable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV"}],"abstract":[{"type":"text","text":"Extends the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" types that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" creates with the "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" "},{"type":"text","text":"protocol."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/sendable","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_synthesizedconformance\/sendable"},"#Using-the-Reducer-macro":{"title":"Using the @Reducer macro","titleInlineContent":[{"type":"text","text":"Using the @Reducer macro"}],"type":"link","identifier":"#Using-the-Reducer-macro","url":"#Using-the-Reducer-macro"},"#Circular-reference-errors":{"title":"Circular reference errors","titleInlineContent":[{"type":"text","text":"Circular reference errors"}],"type":"link","identifier":"#Circular-reference-errors","url":"#Circular-reference-errors"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"role":"symbol","title":"State","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"}],"abstract":[{"type":"text","text":"A type that holds the current state of the reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/state"},"http://github.com/pointfreeco/swift-case-paths":{"title":"Case paths","titleInlineContent":[{"type":"text","text":"Case paths"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"role":"symbol","title":"Reduce","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reduce"}],"abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":" function."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reduce"}],"url":"\/documentation\/composablearchitecture\/reduce"},"#Synthesizing-protocol-conformances-on-State-and-Action":{"title":"Synthesizing protocol conformances on State and Action","titleInlineContent":[{"type":"text","text":"Synthesizing protocol conformances on State and Action"}],"type":"link","identifier":"#Synthesizing-protocol-conformances-on-State-and-Action","url":"#Synthesizing-protocol-conformances-on-State-and-Action"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseEphemeral()":{"role":"symbol","title":"ReducerCaseEphemeral()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerCaseEphemeral"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Marks the case of an enum reducer as holding onto “ephemeral” state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducercaseephemeral()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducers#Circular-reference-errors":{"abstract":[],"title":"Circular reference errors","kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducers#Circular-reference-errors","url":"\/documentation\/composablearchitecture\/reducers#Circular-reference-errors"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"role":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/composablearchitecture\/scope"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:line:)-4f2at":{"role":"symbol","title":"ifLet(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationState","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_PresentationReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:line:)-4f2at","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:line:)-4f2at"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Root"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(path:root:destination:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"path"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">>>, "},{"kind":"externalParam","text":"root"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Drives a navigation stack with a store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:)":{"role":"symbol","title":"forEach(_:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>) -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">\n"}],"abstract":[{"type":"text","text":"A special overload of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)-yz3v"},{"type":"text","text":" for enum"},{"type":"text","text":" "},{"type":"text","text":"reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:)"},"#Destination-and-path-reducers":{"title":"Destination and path reducers","titleInlineContent":[{"type":"text","text":"Destination and path reducers"}],"type":"link","identifier":"#Destination-and-path-reducers","url":"#Destination-and-path-reducers"},"#Autocomplete":{"title":"Autocomplete","titleInlineContent":[{"type":"text","text":"Autocomplete"}],"type":"link","identifier":"#Autocomplete","url":"#Autocomplete"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"https://github.com/apple/swift/issues/66450":{"title":"known issue","titleInlineContent":[{"type":"text","text":"known issue"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift\/issues\/66450","url":"https:\/\/github.com\/apple\/swift\/issues\/66450"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_SynthesizedConformance":{"role":"symbol","title":"_SynthesizedConformance","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"_SynthesizedConformance"}],"abstract":[{"type":"text","text":"A description of a protocol conformance to synthesize on the State and Action types"},{"type":"text","text":" "},{"type":"text","text":"generated by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"_SynthesizedConformance"}],"url":"\/documentation\/composablearchitecture\/_synthesizedconformance"},"#CasePathable-and-dynamicMemberLookup-enums":{"title":"@CasePathable and @dynamicMemberLookup enums","titleInlineContent":[{"type":"text","text":"@CasePathable and @dynamicMemberLookup enums"}],"type":"link","identifier":"#CasePathable-and-dynamicMemberLookup-enums","url":"#CasePathable-and-dynamicMemberLookup-enums"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_SynthesizedConformance/codable":{"role":"symbol","title":"codable","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"codable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV"}],"abstract":[{"type":"text","text":"Extends the "},{"type":"codeVoice","code":"State"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" types that "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" creates with the "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" "},{"type":"text","text":"protocol."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_SynthesizedConformance\/codable","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/_synthesizedconformance\/codable"},"https://swiftpackageindex.com/pointfreeco/swift-case-paths/main/documentation/casepaths/casepathable()":{"title":"@CasePathable","titleInlineContent":[{"type":"codeVoice","code":"@CasePathable"}],"type":"link","identifier":"https:\/\/swiftpackageindex.com\/pointfreeco\/swift-case-paths\/main\/documentation\/casepaths\/casepathable()","url":"https:\/\/swiftpackageindex.com\/pointfreeco\/swift-case-paths\/main\/documentation\/casepaths\/casepathable()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:line:)-yz3v":{"role":"symbol","title":"forEach(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_StackReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in"},{"type":"text","text":" "},{"type":"text","text":"parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)-yz3v","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:line:)-yz3v"}}}