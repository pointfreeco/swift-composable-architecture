{"variants":[{"paths":["\/tutorials\/composablearchitecture\/02-04-navigationstacks"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Navigation stacks","chapter":"Navigation","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}]}]},{"kind":"tasks","tasks":[{"anchor":"Contact-detail-feature","title":"Contact detail feature","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to add a new “Contact Detail” feature that will allow us to drill down a layer"},{"type":"text","text":" "},{"type":"text","text":"from the contacts list at the root."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-04-01-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called ContactDetailFeature.swift, import the Composable Architecture, and start"},{"type":"text","text":" "},{"type":"text","text":"a stub of a reducer conformance."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"type":"codeVoice","code":"State"},{"type":"text","text":" struct to fulfill that requirement for the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol. The only state we currently need is the"},{"type":"text","text":" "},{"type":"text","text":"contact, and it can be "},{"type":"codeVoice","code":"let"},{"type":"text","text":" since we do not plan on mutating it from this screen."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum to fulfill that requirement for the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol. There are not currently any actions that can"},{"type":"text","text":" "},{"type":"text","text":"be performed in this feature, so we will leave it empty."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement a basic "},{"type":"codeVoice","code":"body"},{"type":"text","text":" property to fulfill that requirement of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol. Since there are no actions in this feature"},{"type":"text","text":" "},{"type":"text","text":"there is nothing we can do in the reducer. More will be added to this later."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a stub for a "},{"type":"codeVoice","code":"ContactDetailView"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The view will hold onto a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ContactDetailFeature"},{"type":"text","text":" domain, allowing it to observe the feature’s state changes and"},{"type":"text","text":" "},{"type":"text","text":"send actions."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0006","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Observe the store so that we can get access to state using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":". There is no real information to show in this"},{"type":"text","text":" "},{"type":"text","text":"view now other than the contact’s name, but more will be added later."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-01-code-0007","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a preview so that we can see what the view looks like."}]}],"caption":[],"type":"step","runtimePreview":"ch02-sub04-sec01-image-0000.png","media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nothing special so far, but we need a basic feature built so that we start pushing it onto"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack."}]}]},{"anchor":"Drill-down-to-contact-detail","title":"Drill-down to contact detail","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that a new “Contact Detail” feature has been built we will make it possible to drill"},{"type":"text","text":" "},{"type":"text","text":"down to it from the main list of contacts."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-04-02-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to ContactsFeature.swift and add a new field to the state. It will be of type"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":", generic of the feature that you want to be able to"},{"type":"text","text":" "},{"type":"text","text":"push onto the stack. This state represents the features that are currently"},{"type":"text","text":" "},{"type":"text","text":"pushed onto the stack."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" type is specifically made for the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture, and makes it easy and ergonomic to integrate stack navigation"},{"type":"text","text":" "},{"type":"text","text":"into your applications."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a case to the action enum that holds onto "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This represents the actions that can happen inside the stack, such as pushing or popping"},{"type":"text","text":" "},{"type":"text","text":"an element off the stack, or an action happening inside a particular feature inside the"},{"type":"text","text":" "},{"type":"text","text":"stack."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will also handle the "},{"type":"codeVoice","code":".path"},{"type":"text","text":" case in the reducer and return"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/none"},{"type":"text","text":" for now."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At the very end of the reducer use the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)"},{"type":"text","text":" operator to"},{"type":"text","text":" "},{"type":"text","text":"integrate the "},{"type":"codeVoice","code":"ContactDetailFeature"},{"type":"text","text":" into the stack of the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Scroll down to the bottom of the code snippet to see the application of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"forEach"},{"type":"text","text":" operator."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to the "},{"type":"codeVoice","code":"ContentView"},{"type":"text","text":" that holds the view for the contacts list. Swap out the"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" for a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":". This is a type"},{"type":"text","text":" "},{"type":"text","text":"specifically tuned for driving stacks from a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You hand it a store that is scoped down to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":", and it handles the rest."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":" takes two trailing closures. The first is"},{"type":"text","text":" "},{"type":"text","text":"for the root of the stack, which is our list of contacts. The second is to describe the"},{"type":"text","text":" "},{"type":"text","text":"destinations that can be navigated to. It is handled a store that is focused on the domain"},{"type":"text","text":" "},{"type":"text","text":"of just a single element in the stack."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-02-code-0005","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Wrap the row in the contacts list in a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", using the special"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationLink(state:)"},{"type":"text","text":" initializer that ships with this library. We are also applying a"},{"type":"text","text":" "},{"type":"codeVoice","code":".borderless"},{"type":"text","text":" button style so that we can have the delete button in the row too."}]}],"caption":[{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is necessary to use the "},{"type":"codeVoice","code":"init(state)"},{"type":"text","text":" initializer on "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"instead of the "},{"type":"codeVoice","code":"init(value:)"},{"type":"text","text":" that comes with SwiftUI."}]}],"type":"aside","name":"Warning"}],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the application to see that we can now drill down one level, for each contact."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"ch02-sub04-sec01-video-0000.mov"}]},{"anchor":"Deleting-a-contact","title":"Deleting a contact","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have some drill-down functionality in our contacts app, but currently there is no"},{"type":"text","text":" "},{"type":"text","text":"interaction between the detail screen and the contacts list. Let’s change this by allowing"},{"type":"text","text":" "},{"type":"text","text":"you to delete a contact from the detail screen. We will first prompt the user with an alert"},{"type":"text","text":" "},{"type":"text","text":"asking them to confirm deletion, just as we did in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"type":"text","text":"."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"02-04-03-code-0000","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to ContactDetailFeature.swift to add more functionality to the reducer and view. We"},{"type":"text","text":" "},{"type":"text","text":"will start by adding some optional "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" to represent"},{"type":"text","text":" "},{"type":"text","text":"show the alert."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-03-code-0001","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add cases to "},{"type":"codeVoice","code":"ContactDetailFeature.Action"},{"type":"text","text":" for all the things the user can do in the UI,"},{"type":"text","text":" "},{"type":"text","text":"such as tapping the “Delete” button, as well as any actions inside the alert and the"},{"type":"text","text":" "},{"type":"text","text":"delegate actions for when we need to tell the parent feature to delete the contact."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The alert and delegate actions do not need an ID like was needed before. You will"},{"type":"text","text":" "},{"type":"text","text":"see why soon."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-03-code-0002","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement the new actions in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" property. This is very similar to what we did in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"type":"text","text":". We will handle confirming of deletion by sending a"},{"type":"text","text":" "},{"type":"text","text":"delegate action and dismissing using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"dependency, and we have extracted the alert state to its own helper to make it easier to"},{"type":"text","text":" "},{"type":"text","text":"test later."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-03-code-0003","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to the "},{"type":"codeVoice","code":"ContactDetailView"},{"type":"text","text":" struct and add a button for deleting the contact, as well as"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" modifier to show an alert with the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"02-04-03-code-0004","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go to ContactsFeature.swift and destructure the "},{"type":"codeVoice","code":".path"},{"type":"text","text":" action in order to inspect what"},{"type":"text","text":" "},{"type":"text","text":"is happening in each element of the stack. In particular, we want to listen for when a"},{"type":"text","text":" "},{"type":"codeVoice","code":".delegate(.confirmDeletion)"},{"type":"text","text":" action is sent, and in that case remove the contact from the"},{"type":"text","text":" "},{"type":"text","text":"array."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the preview to see that the application works as expected. You can drill down to a"},{"type":"text","text":" "},{"type":"text","text":"contact, tap the delete button, confirm deletion, and then the detail is popped off the"},{"type":"text","text":" "},{"type":"text","text":"stack and the contact is removed from the list."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"ch02-sub04-sec03-video-0000.mp4"}]}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Navigation stacks","categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"references":{"02-04-02-code-0005":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStackStore(self.store.scope(state: \\.path, action: { .path($0) })) {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            NavigationLink(state: ContactDetailFeature.State(contact: contact)) {","              HStack {","                Text(contact.name)","                Spacer()","                Button {","                  viewStore.send(.deleteButtonTapped(id: contact.id))","                } label: {","                  Image(systemName: \"trash\")","                    .foregroundColor(.red)","                }","              }","            }","            .buttonStyle(.borderless)","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.alert,","      action: ContactsFeature.Destination.Action.alert","    )","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0005","type":"file","fileType":"swift","highlights":[{"line":9},{"line":20},{"line":21}]},"02-04-01-code-0007":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","      }","      .navigationBarTitle(Text(viewStore.contact.name))","    }","  }","}","","struct ContactDetailPreviews: PreviewProvider {","  static var previews: some View {","    NavigationStack {","      ContactDetailView(","        store: Store(","          initialState: ContactDetailFeature.State(","            contact: Contact(id: UUID(), name: \"Blob\")","          )","        ) {","          ContactDetailFeature()","        }","      )","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0007","type":"file","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}]},"02-04-03-code-0001":{"syntax":"swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    @PresentationState var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action: Equatable {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-03-code-0001","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"role":"pseudoSymbol","title":"Managing a timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"02-04-01-code-0003":{"syntax":"swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    let contact: Contact","  }","  enum Action: Equatable {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0003","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}]},"02-04-02-code-0002":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackAction<ContactDetailFeature.State, ContactDetailFeature.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","    .forEach(\\.path, action: \/Action.path) {","      ContactDetailFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0002","type":"file","fileType":"swift","highlights":[{"line":47},{"line":48},{"line":49}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"role":"pseudoSymbol","title":"Child-to-parent communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/composablearchitecture\/viewstore"},"02-04-02-code-0001":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackAction<ContactDetailFeature.State, ContactDetailFeature.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0001","type":"file","fileType":"swift","highlights":[{"line":11},{"line":39},{"line":40},{"line":41}]},"02-04-02-code-0003":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStackStore(self.store.scope(state: \\.path, action: { .path($0) })) {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.alert,","      action: ContactsFeature.Destination.Action.alert","    )","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0003","type":"file","fileType":"swift","highlights":[{"line":5}]},"02-04-03-code-0000":{"syntax":"swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    @PresentationState var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action: Equatable {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-03-code-0000","type":"file","fileType":"swift","highlights":[{"line":5}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"role":"pseudoSymbol","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:line:)":{"role":"symbol","title":"forEach(_:action:destination:fileID:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StackAction","preciseIdentifier":"s:22ComposableArchitecture11StackActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_StackReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in"},{"type":"text","text":" "},{"type":"text","text":"parent state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:line:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"role":"symbol","title":"NavigationStackStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationStackStore"}],"abstract":[{"type":"text","text":"A navigation stack that is driven by a store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore"},"02-04-01-code-0006":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","      }","      .navigationBarTitle(Text(viewStore.contact.name))","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0006","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","title":"Contact detail feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"role":"pseudoSymbol","title":"Testing state changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"role":"symbol","title":"StackAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"url":"\/documentation\/composablearchitecture\/stackaction"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"02-04-03-code-0003":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Form {","        Button(\"Delete\") {","          viewStore.send(.deleteButtonTapped)","        }","      }","      .navigationBarTitle(Text(viewStore.contact.name))","    }","    .alert(store: self.store.scope(state: \\.$alert, action: { .alert($0) }))","  }","}","","struct ContactDetailPreviews: PreviewProvider {","  static var previews: some View {","    NavigationStack {","      ContactDetailView(","        store: Store(","          initialState: ContactDetailFeature.State(","            contact: Contact(id: UUID(), name: \"Blob\")","          )","        ) {","          ContactDetailFeature()","        }","      )","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-03-code-0003","type":"file","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":15}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"role":"article","title":"Navigation","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"role":"pseudoSymbol","title":"Testing effects","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"02-04-01-code-0005":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  let store: StoreOf<ContactDetailFeature>","","  var body: some View {","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0005","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","title":"Testing the add contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"02-04-01-code-0002":{"syntax":"swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    let contact: Contact","  }","  enum Action: Equatable {","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0002","type":"file","fileType":"swift","highlights":[{"line":7},{"line":8}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"role":"symbol","title":"StackState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackState"}],"abstract":[{"type":"text","text":"A list of data representing the content of a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StackState"}],"url":"\/documentation\/composablearchitecture\/stackstate"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"role":"project","title":"Testing presentation","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","title":"Testing your feature","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"02-04-03-code-0002":{"syntax":"swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    @PresentationState var alert: AlertState<Action.Alert>?","    let contact: Contact","  }","  enum Action: Equatable {","    case alert(PresentationAction<Alert>)","    case delegate(Delegate)","    case deleteButtonTapped","    enum Alert {","      case confirmDeletion","    }","    enum Delegate {","      case confirmDeletion","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .alert(.presented(.confirmDeletion)):","        return .run { send in","          await send(.delegate(.confirmDeletion))","          await self.dismiss()","        }","      case .alert:","        return .none","      case .delegate:","        return .none","      case .deleteButtonTapped:","        state.alert = .confirmDeletion","        return .none","      }","    }","  }","}","","extension AlertState where Action == ContactDetailFeature.Action.Alert {","  static let confirmDeletion = Self {","    TextState(\"Are you sure?\")","  } actions: {","    ButtonState(role: .destructive, action: .confirmDeletion) {","      TextState(\"Delete\")","    }","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-03-code-0002","type":"file","fileType":"swift","highlights":[{"line":19},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48}]},"ch02-sub04-sec03-video-0000.mp4":{"poster":null,"alt":null,"type":"video","identifier":"ch02-sub04-sec03-video-0000.mp4","variants":[{"url":"\/videos\/ch02-sub04-sec03-video-0000.mp4","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","estimatedTime":"20min","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"02-04-01-code-0001":{"syntax":"swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","  struct State: Equatable {","    let contact: Contact","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0001","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":6}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"role":"project","title":"Multiple presentation destinations","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"role":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"role":"symbol","title":"DismissEffect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DismissEffect"}],"abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect"},"02-04-02-code-0000":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0000","type":"file","fileType":"swift","highlights":[{"line":5}]},"ch02-sub04-sec01-image-0000.png":{"alt":null,"type":"image","identifier":"ch02-sub04-sec01-image-0000.png","variants":[{"url":"\/images\/ch02-sub04-sec01-image-0000.png","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"role":"project","title":"Adding side effects","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"02-04-01-code-0000":{"syntax":"swift","content":["import ComposableArchitecture","","struct ContactDetailFeature: Reducer {","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0000","type":"file","fileType":"swift","highlights":[]},"02-04-01-code-0004":{"syntax":"swift","content":["import SwiftUI","","struct ContactDetailView: View {","  var body: some View {","  }","}"],"fileName":"ContactDetailFeature.swift","identifier":"02-04-01-code-0004","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"role":"pseudoSymbol","title":"What is a side effect?","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","title":"PresentationState","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate"},"02-04-03-code-0004":{"syntax":"swift","content":["struct ContactsFeature: Reducer {","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @PresentationState var destination: Destination.State?","    var path = StackState<ContactDetailFeature.State>()","  }","  enum Action: Equatable {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    case path(StackAction<ContactDetailFeature.State, ContactDetailFeature.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","","      case let .path(.element(id: id, action: .delegate(.confirmDeletion))):","        guard let detailState = state.path[id: id]","        else { return .none }","        state.contacts.remove(id: detailState.contact.id)","        return .none","","      case .path:","        return .none","      }","    }","    .ifLet(\\.$destination, action: \/Action.destination) {","      Destination()","    }","    .forEach(\\.path, action: \/Action.path) {","      ContactDetailFeature()","    }","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-03-code-0004","type":"file","fileType":"swift","highlights":[{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"role":"pseudoSymbol","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"role":"project","title":"Your first presentation","estimatedTime":"30min","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/none":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"none","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"none"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"type":"text","text":"return an effect, but you don’t need to do anything."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/none","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effectpublisher\/none"},"02-04-02-code-0004":{"syntax":"swift","content":["struct ContentView: View {","  let store: StoreOf<ContactsFeature>","","  var body: some View {","    NavigationStackStore(self.store.scope(state: \\.path, action: { .path($0) })) {","      WithViewStore(self.store, observe: \\.contacts) { viewStore in","        List {","          ForEach(viewStore.state) { contact in","            HStack {","              Text(contact.name)","              Spacer()","              Button {","                viewStore.send(.deleteButtonTapped(id: contact.id))","              } label: {","                Image(systemName: \"trash\")","                  .foregroundColor(.red)","              }","            }","          }","        }","        .navigationTitle(\"Contacts\")","        .toolbar {","          ToolbarItem {","            Button {","              viewStore.send(.addButtonTapped)","            } label: {","              Image(systemName: \"plus\")","            }","          }","        }","      }","    } destination: { store in","      ContactDetailView(store: store)","    }","    .sheet(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.addContact,","      action: ContactsFeature.Destination.Action.addContact","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert(","      store: self.store.scope(state: \\.$destination, action: { .destination($0) }),","      state: \/ContactsFeature.Destination.State.alert,","      action: ContactsFeature.Destination.Action.alert","    )","  }","}"],"fileName":"ContactsFeature.swift","identifier":"02-04-02-code-0004","type":"file","fileType":"swift","highlights":[{"line":32},{"line":33}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"role":"pseudoSymbol","title":"Create a reducer","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","title":"Improve domain modeling","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","title":"Essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"ch02-sub04-sec01-video-0000.mov":{"poster":null,"alt":null,"type":"video","identifier":"ch02-sub04-sec01-video-0000.mov","variants":[{"url":"\/videos\/ch02-sub04-sec01-video-0000.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"role":"pseudoSymbol","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"}}}