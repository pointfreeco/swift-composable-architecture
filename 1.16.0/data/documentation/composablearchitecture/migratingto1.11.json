{"metadata":{"roleHeading":"Article","title":"Migrating to 1.11","modules":[{"name":"ComposableArchitecture"}],"role":"article"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"text":" ","type":"text"},{"text":"simplify the library, and make it more powerful. This version of the library introduced 2 new","type":"text"},{"type":"text","text":" "},{"text":"APIs and deprecated 1 API.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.10. See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"},{"text":" for more information.","type":"text"}],"type":"paragraph"}],"style":"important","name":"Important","type":"aside"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Mutating-shared-state-concurrently","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Supplying-mock-read-only-state-to-previews"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Migrating-to-1112","isActive":true,"type":"reference"}]}]}]},{"type":"heading","level":2,"text":"Mutating shared state concurrently","anchor":"Mutating-shared-state-concurrently"},{"inlineContent":[{"type":"text","text":"Version 1.10 of the Composable Architecture introduced a powerful tool for"},{"type":"text","text":" "},{"isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"sharing state"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","overridingTitle":"sharing state"},{"type":"text","text":" amongst your features. And you can mutate a piece of shared"},{"type":"text","text":" "},{"text":"state directly, as if it were just a normal property on a value type:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, because shared values are secretly references (that is how data is shared), it is possible"},{"type":"text","text":" "},{"type":"text","text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible"},{"type":"text","text":" "},{"text":"to do this directly:","type":"text"}]},{"code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now, "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and is technically thread-safe in that it will not crash when writing"},{"type":"text","text":" "},{"type":"text","text":"to it from two different threads. However, allowing direct mutation does make the value susceptible"},{"type":"text","text":" "},{"type":"text","text":"to race conditions. If you were to perform "},{"code":"count += 1","type":"codeVoice"},{"type":"text","text":" from 1,000 threads, it is possible for"},{"type":"text","text":" "},{"type":"text","text":"the final value to not be 1,000."}],"type":"paragraph"},{"inlineContent":[{"text":"We wanted the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference","overridingTitle":"@Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}]},{"text":" type to be as ergonomic as possible, and that is why we make","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it directly mutable, but we should not be allowing these mutations to happen from asynchronous"},{"type":"text","text":" "},{"text":"contexts. And so now the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/wrappedValue","isActive":true},{"text":" setter has been marked unavailable from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, with a helpful message of how to fix:"}],"type":"paragraph"},{"code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix this deprecation you can use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","isActive":true,"type":"reference"},{"text":" method on the projected value of","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Shared"},{"text":":","type":"text"}]},{"type":"codeListing","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it"},{"type":"text","text":" "},{"text":"back in the reference.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Technically it is still possible to write code that has race conditions, such as this silly example:","type":"text"}]},{"syntax":"swift","code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems"},{"type":"text","text":" "},{"type":"text","text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the"},{"text":" ","type":"text"},{"text":"shared state as possible in a single ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":". That will make sure that the full unit"},{"text":" ","type":"text"},{"type":"text","text":"of work is guarded by a lock."}],"type":"paragraph"},{"type":"heading","text":"Supplying mock read-only state to previews","level":2,"anchor":"Supplying-mock-read-only-state-to-previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader\/constant(_:)","isActive":true,"type":"reference"},{"type":"text","text":" helper on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","type":"reference"},{"type":"text","text":" has been introduced to simplify"},{"type":"text","text":" "},{"type":"text","text":"supplying mock data to Xcode previews. It works like SwiftUI’s "},{"type":"codeVoice","code":"Binding.constant"},{"type":"text","text":", but for shared"},{"type":"text","text":" "},{"type":"text","text":"references:"}]},{"code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"],"type":"codeListing","syntax":"swift"},{"text":"Migrating to 1.11.2","level":2,"type":"heading","anchor":"Migrating-to-1112"},{"inlineContent":[{"text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:","type":"text"}],"type":"paragraph"},{"level":3,"text":"`withLock` is now `@MainActor`","anchor":"withLock-is-now-MainActor","type":"heading"},{"inlineContent":[{"type":"text","text":"In "},{"isActive":true,"overridingTitle":"version 1.11","type":"reference","overridingTitleInlineContent":[{"text":"version 1.11","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},{"text":" of the library we deprecated mutating shared state from","type":"text"},{"type":"text","text":" "},{"text":"asynchronous contexts, such as effects, and instead recommended using the new","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":" method. Doing so made it possible to lock all mutations to the shared state"},{"text":" ","type":"text"},{"type":"text","text":"and prevent race conditions (see the "},{"overridingTitle":"migration guide","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"migration guide"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","isActive":true},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this did leave open the possibility for deadlocks if shared state was read from and written"},{"type":"text","text":" "},{"type":"text","text":"to on different threads. To fix this we have now restricted "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"reference","isActive":true},{"type":"text","text":" to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@MainActor"},{"text":", and so you will now need to ","type":"text"},{"code":"await","type":"codeVoice"},{"type":"text","text":" its usage:"}]},{"code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"],"syntax":"diff","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The compiler should suggest this fix-it for you.","type":"text"}]},{"type":"heading","text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored","level":3,"anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored"},{"inlineContent":[{"type":"text","text":"When the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true},{"text":" property wrapper was first introduced, its dynamic member lookup was overloaded","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to automatically unwrap optionals for ergonomic purposes:"}],"type":"paragraph"},{"syntax":"swift","code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This unfortunately made dynamic member lookup a little more difficult to understand:"}],"type":"paragraph"},{"type":"codeListing","code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and required casting and other tricks to transform shared values into what one might expect."}]},{"type":"paragraph","inlineContent":[{"text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"removed entirely. Instead, you can use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(_:)","isActive":true},{"text":" to explicitly unwrap a shared optional","type":"text"},{"text":" ","type":"text"},{"text":"value.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Disfavoring it does have the consequence of being source breaking in the case of "},{"type":"codeVoice","code":"if let"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"code":"guard let","type":"codeVoice"},{"type":"text","text":" expressions, where Swift does not select the optional overload automatically. To"},{"type":"text","text":" "},{"type":"text","text":"migrate, use "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(_:)","isActive":true,"type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"]}]}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.11"]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Update your code to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","isActive":true,"type":"reference"},{"text":" method for mutating shared state from","type":"text"},{"type":"text","text":" "},{"text":"asynchronous contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","title":"Migrating to 1.9","role":"article","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"type":"text","text":""},{"type":"text","text":" "},{"text":"method on ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"reference","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"url":"\/documentation\/composablearchitecture\/migratingto1.9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","title":"Migrating to 1.5","role":"article","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha","kind":"typeIdentifier","text":"_SendableCaseKeyPath"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","title":"receive(_:_:timeout:assert:fileID:file:line:column:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Asserts an action was received matching a case path with a specific payload, and asserts how"},{"type":"text","text":" "},{"text":"the state changes.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/wrappedValue":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"wrappedValue"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/shared\/wrappedvalue","abstract":[{"text":"The underlying value referenced by the shared variable.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/wrappedValue","role":"symbol","type":"topic","kind":"symbol","title":"wrappedValue"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","navigatorTitle":[{"text":"FileStorageKey","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/filestoragekey","role":"symbol","title":"FileStorageKey","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileStorageKey","kind":"identifier"}],"abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)","role":"symbol","title":"withLock(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","url":"\/documentation\/composablearchitecture\/store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","title":"Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","role":"article","title":"Migrating to 1.7","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"text":"APIs such as ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"type":"text","text":", and more."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"title":"TestStore","kind":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"#Mutating-shared-state-concurrently":{"titleInlineContent":[{"type":"text","text":"Mutating shared state concurrently"}],"type":"link","title":"Mutating shared state concurrently","url":"#Mutating-shared-state-concurrently","identifier":"#Mutating-shared-state-concurrently"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","role":"article","title":"Migrating to 1.13","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.13","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader":{"role":"symbol","title":"SharedReader","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedReader","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","navigatorTitle":[{"text":"SharedReader","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"url":"\/documentation\/composablearchitecture\/sharedreader"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","title":"Migrating to 1.8","role":"article","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" macro, including automatic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"url":"\/documentation\/composablearchitecture\/migratingto1.8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","role":"article","title":"Migrating to 1.6","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.6","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"type":"text","text":"assert on the payload inside an action received."}]},"#Migrating-to-1112":{"titleInlineContent":[{"type":"text","text":"Migrating to 1.11.2"}],"type":"link","title":"Migrating to 1.11.2","url":"#Migrating-to-1112","identifier":"#Migrating-to-1112"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/init(_:)":{"title":"init(_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"text":"Shared","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6SharedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"text":"?>)","kind":"text"}],"url":"\/documentation\/composablearchitecture\/shared\/init(_:)","abstract":[{"type":"text","text":"Unwraps a shared reference to an optional value."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"role":"symbol","title":"Shared","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Shared","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","navigatorTitle":[{"text":"Shared","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"url":"\/documentation\/composablearchitecture\/shared"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"url":"\/documentation\/composablearchitecture\/reducer()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","role":"symbol","title":"Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"text":" protocol for a type.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier","text":"TestStoreTask"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","title":"send(_:assert:fileID:file:line:column:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"abstract":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" type is now officially "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" isolated."}],"title":"Migrating to 1.14","type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"kind":"symbol","type":"topic","title":"WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","role":"symbol","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","role":"article","title":"Migrating to 1.4","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4","abstract":[{"type":"text","text":"Update your code to make use of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"text":" macro, and learn how to better leverage case key","type":"text"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"title":"Migration guides","role":"collectionGroup","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","abstract":[{"text":"Learn how to upgrade your application to the newest version of the Composable Architecture.","type":"text"}],"kind":"article","url":"\/documentation\/composablearchitecture\/migrationguides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","type":"topic","deprecated":true,"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"text":"collections of state.","type":"text"}],"url":"\/documentation\/composablearchitecture\/foreachstore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"navigatorTitle":[{"text":"ForEachStore","kind":"identifier"}],"title":"ForEachStore","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","role":"article","title":"Migrating to 1.11","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.11","abstract":[{"type":"text","text":"Update your code to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"reference","isActive":true},{"type":"text","text":" method for mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, rather than mutating the underlying wrapped value directly."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"title":"dependency(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dependency"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"title":"IfLetStore","kind":"symbol","deprecated":true,"url":"\/documentation\/composablearchitecture\/ifletstore","role":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"kind":"article","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"text":" ","type":"text"},{"text":"property wrapper, and the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","type":"reference","isActive":true},{"type":"text","text":" persistence strategies."}],"title":"Migrating to 1.10","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.10","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","role":"symbol","title":"scope(state:action:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}]},"#Supplying-mock-read-only-state-to-previews":{"titleInlineContent":[{"type":"text","text":"Supplying mock read-only state to previews"}],"type":"link","title":"Supplying mock read-only state to previews","url":"#Supplying-mock-read-only-state-to-previews","identifier":"#Supplying-mock-read-only-state-to-previews"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"type":"topic","url":"\/documentation\/composablearchitecture\/sharingstate","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","role":"collectionGroup","abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"type":"text","text":" "},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"title":"Sharing state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","title":"Migrating to 1.15","role":"article","type":"topic","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"text":"concurrency with no warnings or errors.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader/constant(_:)":{"title":"constant(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"constant"},{"kind":"text","text":"("},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"SharedReader","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12SharedReaderV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/sharedreader\/constant(_:)","abstract":[{"type":"text","text":"Constructs a read-only shared value that remains constant."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader\/constant(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"type":"topic","url":"\/documentation\/composablearchitecture\/appstoragekey","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AppStorageKey","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","role":"symbol","navigatorTitle":[{"text":"AppStorageKey","kind":"identifier"}],"abstract":[{"type":"text","text":"A type defining a user defaults persistence strategy."}],"title":"AppStorageKey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"title":"Migrating to 1.12","role":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}],"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.12"}}}