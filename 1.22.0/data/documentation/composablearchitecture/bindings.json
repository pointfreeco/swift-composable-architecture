{"abstract":[{"text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings.","type":"text"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"Many APIs in SwiftUI use bindings to set up two-way communication between your application’s state","type":"text"},{"text":" ","type":"text"},{"text":"and a view. The Composable Architecture provides several tools for creating bindings that establish","type":"text"},{"text":" ","type":"text"},{"text":"such communication with your application’s store.","type":"text"}],"type":"paragraph"},{"text":"Ad hoc bindings","level":3,"anchor":"Ad-hoc-bindings","type":"heading"},{"inlineContent":[{"text":"The simplest tool for creating bindings that communicate with your store is to create a dedicated","type":"text"},{"text":" ","type":"text"},{"text":"action that can change a piece of state in your feature. For example, a reducer may have a domain","type":"text"},{"text":" ","type":"text"},{"text":"that tracks if the user has enabled haptic feedback. First, it can define a boolean property on","type":"text"},{"text":" ","type":"text"},{"text":"state:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  struct State: Equatable {","    var isHapticsEnabled = true","    \/\/ ...","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then, in order to allow the outside world to mutate this state, for example from a toggle, it must","type":"text"},{"text":" ","type":"text"},{"text":"define a corresponding action that can be sent updates:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  struct State: Equatable { \/* ... *\/ }","","  enum Action { ","    case isHapticsEnabledChanged(Bool)","    \/\/ ...","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"When the reducer handles this action, it can update state accordingly:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case let .isHapticsEnabledChanged(isEnabled):","        state.isHapticsEnabled = isEnabled","        return .none","      \/\/ ...","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"And finally, in the view, we can derive a binding from the domain that allows a toggle to","type":"text"},{"text":" ","type":"text"},{"text":"communicate with our Composable Architecture feature. First you must hold onto the store in a","type":"text"},{"text":" ","type":"text"},{"text":"bindable way, which can be done using the ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" property wrapper from SwiftUI:","type":"text"}],"type":"paragraph"},{"code":["struct SettingsView: View {","  @Bindable var store: StoreOf<Settings>","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are targeting older Apple platforms (iOS 16, macOS 13, tvOS 16, watchOS 9, or"},{"type":"text","text":" "},{"type":"text","text":"less), then you must use our backport of the "},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"diff","code":["-@Bindable var store: StoreOf<Settings>","+@Perception.Bindable var store: StoreOf<Settings>"]}],"name":"Important","type":"aside"},{"inlineContent":[{"type":"text","text":"Once that is done you can derive a binding to a piece of state that sends an action when the"},{"type":"text","text":" "},{"type":"text","text":"binding is mutated:"}],"type":"paragraph"},{"code":["var body: some View {","  Form {","    Toggle(","      \"Haptic feedback\",","      isOn: $store.isHapticsEnabled.sending(\\.isHapticsEnabledChanged)","    )","","    \/\/ ...","  }","}"],"syntax":"swift","type":"codeListing"},{"text":"Binding actions and reducers","level":3,"anchor":"Binding-actions-and-reducers","type":"heading"},{"inlineContent":[{"text":"Deriving ad hoc bindings requires many manual steps that can feel tedious, especially for screens","type":"text"},{"text":" ","type":"text"},{"text":"with many controls driven by many bindings. Because of this, the Composable Architecture comes with","type":"text"},{"text":" ","type":"text"},{"text":"tools that can be applied to a reducer’s domain and logic to make this easier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, a settings screen may model its state with the following struct:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  @ObservableState","  struct State {","    var digest = Digest.daily","    var displayName = \"\"","    var enableNotifications = false","    var isLoading = false","    var protectMyPosts = false","    var sendEmailNotifications = false","    var sendMobileNotifications = false","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The majority of these fields should be editable by the view, and in the Composable Architecture this"},{"type":"text","text":" "},{"type":"text","text":"means that each field requires a corresponding action that can be sent to the store. Typically this"},{"type":"text","text":" "},{"type":"text","text":"comes in the form of an enum with a case per field:"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","","  enum Action {","    case digestChanged(Digest)","    case displayNameChanged(String)","    case enableNotificationsChanged(Bool)","    case protectMyPostsChanged(Bool)","    case sendEmailNotificationsChanged(Bool)","    case sendMobileNotificationsChanged(Bool)","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And we’re not even done yet. In the reducer we must now handle each action, which simply replaces"},{"type":"text","text":" "},{"type":"text","text":"the state at each field with a new value:"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case let digestChanged(digest):","        state.digest = digest","        return .none","","      case let displayNameChanged(displayName):","        state.displayName = displayName","        return .none","","      case let enableNotificationsChanged(isOn):","        state.enableNotifications = isOn","        return .none","","      case let protectMyPostsChanged(isOn):","        state.protectMyPosts = isOn","        return .none","","      case let sendEmailNotificationsChanged(isOn):","        state.sendEmailNotifications = isOn","        return .none","","      case let sendMobileNotificationsChanged(isOn):","        state.sendMobileNotifications = isOn","        return .none","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lot"}]},{"type":"text","text":" of boilerplate for something that should be simple. Luckily, we can dramatically"},{"type":"text","text":" "},{"type":"text","text":"eliminate this boilerplate using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"First, we can conform the action type to ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","type":"reference","isActive":true},{"text":" by collapsing all of the individual,","type":"text"},{"text":" ","type":"text"},{"text":"field-mutating actions into a single case that holds a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference","isActive":true},{"text":" that is generic over the","type":"text"},{"text":" ","type":"text"},{"text":"reducer’s state:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And then, we can simplify the settings reducer by adding a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","isActive":true},{"type":"text","text":" that handles these"},{"type":"text","text":" "},{"type":"text","text":"field mutations for us:"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action: BindableAction { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    BindingReducer()","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then in the view you must hold onto the store in a bindable manner, which can be done using the","type":"text"},{"text":" ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" property wrapper (or the backported tool ","type":"text"},{"code":"@Perception.Bindable","type":"codeVoice"},{"text":" if targeting older","type":"text"},{"text":" ","type":"text"},{"text":"Apple platforms):","type":"text"}],"type":"paragraph"},{"code":["struct SettingsView: View {","  @Bindable var store: StoreOf<Settings>","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then bindings can be derived from the store using familiar ","type":"text"},{"type":"codeVoice","code":"$"},{"text":" syntax:","type":"text"}],"type":"paragraph"},{"code":["TextField(\"Display name\", text: $store.displayName)","Toggle(\"Notifications\", text: $store.enableNotifications)","\/\/ ..."],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Should you need to layer additional functionality over these bindings, your can pattern match the"},{"type":"text","text":" "},{"type":"text","text":"action for a given key path in the reducer:"}],"type":"paragraph"},{"code":["var body: some Reducer<State, Action> {","  BindingReducer()","","  Reduce { state, action in","    switch action","    case .binding(\\.displayName):","      \/\/ Validate display name","  ","    case .binding(\\.enableNotifications):","      \/\/ Return an effect to request authorization from UNUserNotificationCenter","  ","    \/\/ ...","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Or you can apply ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","type":"reference","isActive":true},{"text":" to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference","isActive":true},{"text":" to react to changes to","type":"text"},{"text":" ","type":"text"},{"text":"particular fields:","type":"text"}],"type":"paragraph"},{"code":["var body: some Reducer<State, Action> {","  BindingReducer()","    .onChange(of: \\.displayName) { oldValue, newValue in","      \/\/ Validate display name","    }","    .onChange(of: \\.enableNotifications) { oldValue, newValue in","      \/\/ Return an authorization request effect","    }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Binding actions can also be tested in much the same way regular actions are tested. Rather than send"},{"type":"text","text":" "},{"type":"text","text":"a specific action describing how a binding changed, such as "},{"type":"codeVoice","code":".displayNameChanged(\"Blob\")"},{"type":"text","text":", you will"},{"type":"text","text":" "},{"type":"text","text":"send a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":" action that describes which key path is being set to what value, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\.displayName, \"Blob\""},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let store = TestStore(initialState: Settings.State()) {","  Settings()","}","","store.send(\\.binding.displayName, \"Blob\") {","  $0.displayName = \"Blob\"","}","store.send(\\.binding.protectMyPosts, true) {","  $0.protectMyPosts = true",")"],"syntax":"swift","type":"codeListing"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"role":"article","roleHeading":"Article","title":"Working with SwiftUI bindings","modules":[{"name":"ComposableArchitecture"}]},"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"kind":"article","seeAlsoSections":[{"title":"Bindings","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"],"generated":true,"anchor":"Bindings"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/bindings"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/bindableaction","title":"BindableAction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindableAction","kind":"identifier"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"type":"text","text":" case that holds a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true},{"type":"text","text":"."}],"type":"topic","navigatorTitle":[{"text":"BindableAction","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","role":"collectionGroup","title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"abstract":[{"text":"An action that describes simple mutations to some root state at a writable key path.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","role":"symbol","url":"\/documentation\/composablearchitecture\/bindingaction","title":"BindingAction","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingAction","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"BindingAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingReducer","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}],"title":"BindingReducer","abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"url":"\/documentation\/composablearchitecture\/bindingreducer","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/onChange(of:_:)":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/onchange(of:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"onChange","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":") -> ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","abstract":[{"text":"Adds a reducer to run when this reducer changes the given value in state.","type":"text"}],"title":"onChange(of:_:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","role":"symbol","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"type":"topic","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"url":"\/documentation\/composablearchitecture\/swiftuideprecations","role":"collectionGroup","kind":"article","title":"Deprecations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","type":"topic","role":"collection","title":"ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol"}}}