{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"observe"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"apply"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationToken","preciseIdentifier":"c:@M@ComposableArchitecture@objc(cs)ObservationToken","text":"ObservationToken"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This tool allows you to set up an observation loop so that you can access fields from an"},{"type":"text","text":" "},{"type":"text","text":"observable model in order to populate your view, and also automatically track changes to"},{"type":"text","text":" "},{"type":"text","text":"any accessed fields so that the view is always up-to-date."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is most useful when dealing with non-SwiftUI views, such as UIKit views and controller."},{"type":"text","text":" "},{"type":"text","text":"You can invoke the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)"},{"type":"text","text":" method a single time in the "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":" and update all"},{"type":"text","text":" "},{"type":"text","text":"the view elements:"}]},{"type":"codeListing","syntax":"swift","code":["override func viewDidLoad() {","  super.viewDidLoad()","","  let countLabel = UILabel()","  let incrementButton = UIButton(primaryAction: .init { _ in","    store.send(.incrementButtonTapped)","  })","","  observe { [weak self] in","    guard let self","    else { return }","","    countLabel.text = \"\\(store.count)\"","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This closure is immediately called, allowing you to set the initial state of your UI"},{"type":"text","text":" "},{"type":"text","text":"components from the feature’s state. And if the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property in the feature’s state is"},{"type":"text","text":" "},{"type":"text","text":"ever mutated, this trailing closure will be called again, allowing us to update the view"},{"type":"text","text":" "},{"type":"text","text":"again."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Generally speaking you can usually have a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)"},{"type":"text","text":" in the entry point of your"},{"type":"text","text":" "},{"type":"text","text":"view, such as "},{"type":"codeVoice","code":"viewDidLoad"},{"type":"text","text":" for "},{"type":"codeVoice","code":"UIViewController"},{"type":"text","text":". This works even if you have many UI"},{"type":"text","text":" "},{"type":"text","text":"components to update:"}]},{"type":"codeListing","syntax":"swift","code":["override func viewDidLoad() {","  super.viewDidLoad()","","  observe { [weak self] in","    guard let self","    else { return }","","    countLabel.isHidden = store.isObservingCount","    if !countLabel.isHidden {","      countLabel.text = \"\\(store.count)\"","    }","    factLabel.text = store.fact","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This does mean that you may execute the line "},{"type":"codeVoice","code":"factLabel.text = store.fact"},{"type":"text","text":" even when something"},{"type":"text","text":" "},{"type":"text","text":"unrelated changes, such as "},{"type":"codeVoice","code":"store.count"},{"type":"text","text":", but that is typically OK for simple properties of"},{"type":"text","text":" "},{"type":"text","text":"UI components. It is not a performance problem to repeatedly set the "},{"type":"codeVoice","code":"text"},{"type":"text","text":" of a label or"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"isHidden"},{"type":"text","text":" of a button."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if there is heavy work you need to perform when state changes, then it is best to"},{"type":"text","text":" "},{"type":"text","text":"put that in its own "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)"},{"type":"text","text":". For example, if you needed to reload a table view or"},{"type":"text","text":" "},{"type":"text","text":"collection view when a collection changes:"}]},{"type":"codeListing","syntax":"swift","code":["override func viewDidLoad() {","  super.viewDidLoad()","","  observe { [weak self] in","    guard let self","    else { return }","","    self.dataSource = store.items","    self.tableView.reloadData()","  }","}"]},{"anchor":"Navigation","level":2,"type":"heading","text":"Navigation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)"},{"type":"text","text":" method makes it easy to drive navigation from state. To do so you need"},{"type":"text","text":" "},{"type":"text","text":"a reference to the controller that you are presenting (held as an optional), and when state"},{"type":"text","text":" "},{"type":"text","text":"becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" you assign and present the controller, and when state becomes "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" you"},{"type":"text","text":" "},{"type":"text","text":"dismiss the controller and "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s state holds onto alert state, then an alert can be presented"},{"type":"text","text":" "},{"type":"text","text":"and dismissed with the following:"}]},{"type":"codeListing","syntax":"swift","code":["override func viewDidLoad() {","  super.viewDidLoad()","","  var alertController: UIAlertController?","","  observe { [weak self] in","    guard let self","    else { return }","","    if","      let store = store.scope(state: \\.alert, action: \\.alert),","      alertController == nil","    {","      alertController = UIAlertController(store: store)","      present(alertController!, animated: true, completion: nil)","    } else if store.alert == nil, alertController != nil {","      alertController?.dismiss(animated: true)","      alertController = nil","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we are using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-36e72"},{"type":"text","text":" operator for optional state in"},{"type":"text","text":" "},{"type":"text","text":"order to detect when the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state flips from "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and vice-versa."}]},{"anchor":"Cancellation","level":2,"type":"heading","text":"Cancellation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The method returns a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationToken"},{"type":"text","text":" that can be used to cancel observation. For example,"},{"type":"text","text":" "},{"type":"text","text":"if you only want to observe while a view controller is visible, you can start observation in"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"viewWillAppear"},{"type":"text","text":" and then cancel observation in the "},{"type":"codeVoice","code":"viewWillDisappear"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var observation: ObservationToken?","","func viewWillAppear() {","  super.viewWillAppear()","  self.observation = observe { [weak self] in","    \/\/ ...","  }","}","func viewWillDisappear() {","  super.viewWillDisappear()","  self.observation?.cancel()","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/objectivec\/nsobject\/observe(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Observe access to properties of a "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" or "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" object."}],"kind":"symbol","metadata":{"role":"symbol","title":"observe(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"observe"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ObservationToken","preciseIdentifier":"c:@M@ComposableArchitecture@objc(cs)ObservationToken"}],"symbolKind":"method","externalID":"s:So8NSObjectC22ComposableArchitectureE7observeyAC16ObservationTokenCyycF","extendedModule":"ObjectiveC","modules":[{"name":"ComposableArchitecture","relatedModules":["ObjectiveC"]}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]]},"seeAlsoSections":[{"title":"Subscribing to state changes","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationToken"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-36e72":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":"?>, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">?"}],"abstract":[{"type":"text","text":"Scopes the store to optional child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-36e72","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-36e72"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationToken":{"role":"symbol","title":"ObservationToken","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservationToken"}],"abstract":[{"type":"text","text":"A token for cancelling observation created with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationToken","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObservationToken"}],"url":"\/documentation\/composablearchitecture\/observationtoken"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObjectiveC/NSObject/observe(_:)":{"role":"symbol","title":"observe(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"observe"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ObservationToken","preciseIdentifier":"c:@M@ComposableArchitecture@objc(cs)ObservationToken"}],"abstract":[{"type":"text","text":"Observe access to properties of a "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" or "},{"type":"codeVoice","code":"@Observable"},{"type":"text","text":" object."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObjectiveC\/NSObject\/observe(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/objectivec\/nsobject\/observe(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"role":"collectionGroup","title":"UIKit Integration","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/uikit"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"}}}