{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unimplemented"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"prefix"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV","text":"EffectPublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"prefix","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A string that identifies this effect and will prefix all failure"},{"type":"text","text":" "},{"type":"text","text":"messages."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An effect that causes a test to fail if it runs."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This Combine-based interface has been soft-deprecated in favor of Swift"},{"type":"text","text":" "},{"type":"text","text":"concurrency. Prefer using async functions and "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":"s directly in your dependencies,"},{"type":"text","text":" "},{"type":"text","text":"and using "},{"type":"codeVoice","code":"unimplemented"},{"type":"text","text":" from the "},{"type":"reference","isActive":true,"identifier":"gh-xctest-dynamic-overlay"},{"type":"text","text":" "},{"type":"text","text":"library to stub in a function that fails when invoked:"}]},{"type":"codeListing","syntax":"swift","code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}","","extension NumberFactClient: TestDependencyKey {","  static let testValue = Self(","    fetch: unimplemented(","      \"\\(Self.self).fetch\",","      placeholder: \"Not an interesting number.\"","    )","  }","}"]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This effect can provide an additional layer of certainty that a tested code path does not"},{"type":"text","text":" "},{"type":"text","text":"execute a particular effect."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, let’s say we have a very simple counter application, where a user can increment"},{"type":"text","text":" "},{"type":"text","text":"and decrement a number. The state and actions are simple enough:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterState: Equatable {","  var count = 0","}","","enum CounterAction: Equatable {","  case decrementButtonTapped","  case incrementButtonTapped","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s throw in a side effect. If the user attempts to decrement the counter below zero, the"},{"type":"text","text":" "},{"type":"text","text":"application should refuse and play an alert sound instead."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can model playing a sound in the environment with an effect:"}]},{"type":"codeListing","syntax":"swift","code":["struct CounterEnvironment {","  let playAlertSound: () -> EffectPublisher<Never, Never>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we’ve defined the domain, we can describe the logic in a reducer:"}]},{"type":"codeListing","syntax":"swift","code":["let counterReducer = AnyReducer<","  CounterState, CounterAction, CounterEnvironment","> { state, action, environment in","  switch action {","  case .decrementButtonTapped:","    if state > 0 {","      state.count -= 0","      return .none","    } else {","      return environment.playAlertSound()","        .fireAndForget()","    }","","  case .incrementButtonTapped:","    state.count += 1","    return .none","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s say we want to write a test for the increment path. We can see in the reducer that it"},{"type":"text","text":" "},{"type":"text","text":"should never play an alert, so we can configure the environment with an effect that will"},{"type":"text","text":" "},{"type":"text","text":"fail if it ever executes:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","func testIncrement() async {","  let store = TestStore(","    initialState: CounterState(count: 0)","    reducer: counterReducer,","    environment: CounterEnvironment(","      playSound: .unimplemented(\"playSound\")","    )","  )","","  await store.send(.increment) {","    $0.count = 1","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By using an "},{"type":"codeVoice","code":".unimplemented"},{"type":"text","text":" effect in our environment we have strengthened the assertion and"},{"type":"text","text":" "},{"type":"text","text":"made the test easier to understand at the same time. We can see, without consulting the"},{"type":"text","text":" "},{"type":"text","text":"reducer itself, that this particular action should not access this effect."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/effectpublisher\/unimplemented(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/unimplemented(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An effect that causes a test to fail if it runs."}],"kind":"symbol","metadata":{"modules":[{"name":"ComposableArchitecture"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"unimplemented(_:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unimplemented"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:22ComposableArchitecture15EffectPublisherV13unimplementedyACyxq_GSSFZ","extendedModule":"ComposableArchitecture","platforms":[]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectDeprecations"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectDeprecations"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call 'unimplemented' from your dependencies, instead."}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"role":"symbol","title":"ReducerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerProtocol"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerProtocol"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectDeprecations":{"role":"collectionGroup","title":"Deprecations","abstract":[{"type":"text","text":"Review unsupported effect APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectDeprecations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/effectdeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/unimplemented(_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"unimplemented(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unimplemented"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that causes a test to fail if it runs."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/unimplemented(_:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/effectpublisher\/unimplemented(_:)"},"gh-xctest-dynamic-overlay":{"title":"XCTest Dynamic Overlay","titleInlineContent":[{"type":"text","text":"XCTest Dynamic Overlay"}],"type":"link","identifier":"gh-xctest-dynamic-overlay","url":"gh-xctest-dynamic-overlay"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher":{"deprecated":true,"role":"symbol","title":"EffectPublisher","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectPublisher"}],"abstract":[{"type":"text","text":"This type is deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":". See its documentation for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectPublisher"}],"url":"\/documentation\/composablearchitecture\/effectpublisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"role":"symbol","title":"EffectTask","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectTask"}],"abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectTask"}],"url":"\/documentation\/composablearchitecture\/effecttask"}}}