{"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","interfaceLanguage":"swift"},"topicSections":[{"generated":true,"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init(action:)-33ljj","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init(action:)-8fpg"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/reduce(into:action:)"],"anchor":"Instance-Methods","title":"Instance Methods","generated":true},{"anchor":"Default-Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/Reducer-Implementations"],"title":"Default Implementations","generated":true}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional"],"anchor":"Supporting-reducers","generated":true,"title":"Supporting reducers"}],"abstract":[{"text":"A reducer that updates bindable state when it receives binding actions.","type":"text"}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"],"title":"Conforms To","kind":"relationships"}],"metadata":{"navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"externalID":"s:22ComposableArchitecture14BindingReducerV","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingReducer"}],"role":"symbol","title":"BindingReducer","symbolKind":"struct","roleHeading":"Structure","modules":[{"name":"ComposableArchitecture"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingReducer"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ViewAction"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":" == "},{"text":"ViewAction","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/State","text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14BindableActionP5StateQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14BindableActionP","text":"BindableAction","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This reducer should typically be composed into the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t"},{"text":" of your","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature’s reducer:"}]},{"code":["@Reducer","struct Feature {","  struct State {","    @BindingState var isOn = false","    \/\/ More properties...","  }","  enum Action: BindableAction {","    case binding(BindingAction<State>)","    \/\/ More actions","  }","","  var body: some ReducerOf<Self> {","    BindingReducer()","    Reduce { state, action in","      \/\/ Your feature's logic...","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This makes it so that the binding’s logic is run before the feature’s logic, "},{"type":"emphasis","inlineContent":[{"text":"i.e.","type":"text"}]},{"text":" you will","type":"text"},{"type":"text","text":" "},{"text":"only see the state after the binding was written. If you want to react to the state ","type":"text"},{"inlineContent":[{"text":"before","type":"text"}],"type":"emphasis"},{"type":"text","text":" the"},{"type":"text","text":" "},{"type":"text","text":"binding was written, you can flip the order of the composition:"}]},{"code":["var body: some ReducerOf<Self> {","  Reduce { state, action in","    \/\/ Your feature's logic...","  }","  BindingReducer()","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you forget to compose the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","isActive":true},{"type":"text","text":" into your feature’s reducer, then when a binding"},{"text":" ","type":"text"},{"text":"is written to it will cause a runtime purple Xcode warning letting you know what needs to be","type":"text"},{"type":"text","text":" "},{"text":"fixed.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindingreducer"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/Reducer-Implementations":{"url":"\/documentation\/composablearchitecture\/bindingreducer\/reducer-implementations","kind":"article","abstract":[],"title":"Reducer Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/Reducer-Implementations","role":"collectionGroup","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"title":"BindingReducer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingReducer","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","url":"\/documentation\/composablearchitecture\/bindingreducer","role":"symbol","abstract":[{"text":"A reducer that updates bindable state when it receives binding actions.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"url":"\/documentation\/composablearchitecture\/bindableaction","kind":"symbol","abstract":[{"type":"text","text":"An action type that exposes a "},{"code":"binding","type":"codeVoice"},{"type":"text","text":" case that holds a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction"},{"type":"text","text":"."}],"title":"BindableAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","role":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","kind":"symbol","title":"body","required":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa","text":"Body","kind":"typeIdentifier"}],"role":"symbol","defaultImplementations":2,"type":"topic","abstract":[{"type":"text","text":"The content and behavior of a reducer that is composed from other reducers."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":"s should be executed later by the store, if any."}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","title":"SwiftUI Integration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"role":"collectionGroup","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/init(action:)-33ljj":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":">)","kind":"text"}],"url":"\/documentation\/composablearchitecture\/bindingreducer\/init(action:)-33ljj","kind":"symbol","abstract":[],"title":"init(action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init(action:)-33ljj","role":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"topic","abstract":[],"title":"Effect","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EmptyReducer":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EmptyReducer","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmptyReducer"}],"navigatorTitle":[{"text":"EmptyReducer","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/emptyreducer","abstract":[{"text":"A reducer that does nothing.","type":"text"}],"title":"EmptyReducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/reduce(into:action:)":{"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/reduce(into:action:)","abstract":[],"title":"reduce(into:action:)","url":"\/documentation\/composablearchitecture\/bindingreducer\/reduce(into:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reduce","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","title":"ComposableArchitecture","role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/init(action:)-8fpg":{"abstract":[],"type":"topic","url":"\/documentation\/composablearchitecture\/bindingreducer\/init(action:)-8fpg","role":"symbol","title":"init(action:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init(action:)-8fpg","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"type":"topic","title":"BindingAction","url":"\/documentation\/composablearchitecture\/bindingaction","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingAction"}],"navigatorTitle":[{"text":"BindingAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction/State":{"required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindableaction\/state","kind":"symbol","abstract":[{"type":"text","text":"The root state type that contains bindable fields."}],"title":"State","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction\/State","role":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/init()":{"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/init()","abstract":[{"text":"Initializes a reducer that updates bindable state when it receives binding actions.","type":"text"}],"title":"init()","url":"\/documentation\/composablearchitecture\/bindingreducer\/init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Optional":{"fragments":[{"text":"extension","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optional","preciseIdentifier":"s:Sq"}],"navigatorTitle":[{"kind":"identifier","text":"Optional"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Optional","url":"\/documentation\/composablearchitecture\/swift\/optional","abstract":[],"title":"Optional","role":"symbol","type":"topic","kind":"symbol"}}}