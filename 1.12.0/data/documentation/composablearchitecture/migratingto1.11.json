{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. This version of the library introduced 2 new"},{"type":"text","text":" "},{"type":"text","text":"APIs and deprecated 1 API."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.10. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"},{"type":"text","text":" for more information."}]}],"type":"aside","name":"Important"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Mutating-shared-state-concurrently"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Supplying-mock-read-only-state-to-previews"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Migrating-to-1112"}]}]}]},{"anchor":"Mutating-shared-state-concurrently","level":2,"type":"heading","text":"Mutating shared state concurrently"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Version 1.10 of the Composable Architecture introduced a powerful tool for"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"sharing state"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","overridingTitle":"sharing state"},{"type":"text","text":" amongst your features. And you can mutate a piece of shared"},{"type":"text","text":" "},{"type":"text","text":"state directly, as if it were just a normal property on a value type:"}]},{"type":"codeListing","syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do."},{"type":"text","text":" "},{"type":"text","text":"However, because shared values are secretly references (that is how data is shared), it is possible"},{"type":"text","text":" "},{"type":"text","text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible"},{"type":"text","text":" "},{"type":"text","text":"to do this directly:"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and is technically thread-safe in that it will not crash when writing"},{"type":"text","text":" "},{"type":"text","text":"to it from two different threads. However, allowing direct mutation does make the value susceptible"},{"type":"text","text":" "},{"type":"text","text":"to race conditions. If you were to perform "},{"type":"codeVoice","code":"count += 1"},{"type":"text","text":" from 1,000 threads, it is possible for"},{"type":"text","text":" "},{"type":"text","text":"the final value to not be 1,000."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We wanted the "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitle":"@Shared"},{"type":"text","text":" type to be as ergonomic as possible, and that is why we make"},{"type":"text","text":" "},{"type":"text","text":"it directly mutable, but we should not be allowing these mutations to happen from asynchronous"},{"type":"text","text":" "},{"type":"text","text":"contexts. And so now the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/wrappedValue"},{"type":"text","text":" setter has been marked unavailable from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, with a helpful message of how to fix:"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix this deprecation you can use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":" method on the projected value of"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it"},{"type":"text","text":" "},{"type":"text","text":"back in the reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically it is still possible to write code that has race conditions, such as this silly example:"}]},{"type":"codeListing","syntax":"swift","code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems"},{"type":"text","text":" "},{"type":"text","text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the"},{"type":"text","text":" "},{"type":"text","text":"shared state as possible in a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":". That will make sure that the full unit"},{"type":"text","text":" "},{"type":"text","text":"of work is guarded by a lock."}]},{"anchor":"Supplying-mock-read-only-state-to-previews","level":2,"type":"heading","text":"Supplying mock read-only state to previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader\/constant(_:)"},{"type":"text","text":" helper on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader"},{"type":"text","text":" has been introduced to simplify"},{"type":"text","text":" "},{"type":"text","text":"supplying mock data to Xcode previews. It works like SwiftUI’s "},{"type":"codeVoice","code":"Binding.constant"},{"type":"text","text":", but for shared"},{"type":"text","text":" "},{"type":"text","text":"references:"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"]},{"anchor":"Migrating-to-1112","level":2,"type":"heading","text":"Migrating to 1.11.2"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:"}]},{"anchor":"withLock-is-now-MainActor","level":3,"type":"heading","text":"`withLock` is now `@MainActor`"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In "},{"overridingTitleInlineContent":[{"type":"text","text":"version 1.11"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","overridingTitle":"version 1.11"},{"type":"text","text":" of the library we deprecated mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, such as effects, and instead recommended using the new"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":" method. Doing so made it possible to lock all mutations to the shared state"},{"type":"text","text":" "},{"type":"text","text":"and prevent race conditions (see the "},{"overridingTitleInlineContent":[{"type":"text","text":"migration guide"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","overridingTitle":"migration guide"},{"type":"text","text":" for more info)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this did leave open the possibility for deadlocks if shared state was read from and written"},{"type":"text","text":" "},{"type":"text","text":"to on different threads. To fix this we have now restricted "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":" to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":", and so you will now need to "},{"type":"codeVoice","code":"await"},{"type":"text","text":" its usage:"}]},{"type":"codeListing","syntax":"diff","code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler should suggest this fix-it for you."}]},{"anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored","level":3,"type":"heading","text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" property wrapper was first introduced, its dynamic member lookup was overloaded"},{"type":"text","text":" "},{"type":"text","text":"to automatically unwrap optionals for ergonomic purposes:"}]},{"type":"codeListing","syntax":"swift","code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This unfortunately made dynamic member lookup a little more difficult to understand:"}]},{"type":"codeListing","syntax":"swift","code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and required casting and other tricks to transform shared values into what one might expect."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be"},{"type":"text","text":" "},{"type":"text","text":"removed entirely. Instead, you can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(_:)"},{"type":"text","text":" to explicitly unwrap a shared optional"},{"type":"text","text":" "},{"type":"text","text":"value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Disfavoring it does have the consequence of being source breaking in the case of "},{"type":"codeVoice","code":"if let"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"guard let"},{"type":"text","text":" expressions, where Swift does not select the optional overload automatically. To"},{"type":"text","text":" "},{"type":"text","text":"migrate, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(_:)"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.11"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":" method for mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, rather than mutating the underlying wrapped value directly."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Migrating to 1.11","role":"article","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"role":"symbol","title":"FileStorageKey","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileStorageKey"}],"abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FileStorageKey"}],"url":"\/documentation\/composablearchitecture\/filestoragekey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"role":"symbol","title":"Shared","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Shared"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"url":"\/documentation\/composablearchitecture\/shared"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"role":"article","title":"Migrating to 1.9","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"codeVoice","code":"TestStore\/send(_:assert:file:line:)-1oopl"},{"type":"text","text":" method on"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},{"type":"text","text":" method for overriding dependencies."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"role":"article","title":"Migrating to 1.8","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, including automatic"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.8"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"deprecated":true,"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/composablearchitecture\/withviewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"deprecated":true,"role":"symbol","title":"IfLetStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"role":"article","title":"Migrating to 1.5","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"role":"symbol","title":"AppStorageKey","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppStorageKey"}],"abstract":[{"type":"text","text":"A type defining a user defaults persistence strategy."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AppStorageKey"}],"url":"\/documentation\/composablearchitecture\/appstoragekey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"role":"article","title":"Migrating to 1.11","abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"type":"text","text":" method for mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, rather than mutating the underlying wrapped value directly."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.11"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"role":"article","title":"Migrating to 1.4","abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"role":"collectionGroup","title":"Sharing state","abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"type":"text","text":" "},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/sharingstate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"role":"article","title":"Migrating to 1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" "},{"type":"text","text":"property wrapper, and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey"},{"type":"text","text":" persistence strategies."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.10"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader":{"role":"symbol","title":"SharedReader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedReader"}],"abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SharedReader"}],"url":"\/documentation\/composablearchitecture\/sharedreader"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/wrappedValue":{"role":"symbol","title":"wrappedValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The underlying value referenced by the shared variable."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/wrappedValue","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/wrappedvalue"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"role":"collectionGroup","title":"Migration guides","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migrationguides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader/constant(_:)":{"role":"symbol","title":"constant(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"constant"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SharedReader","preciseIdentifier":"s:22ComposableArchitecture12SharedReaderV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Constructs a read-only shared value that remains constant."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader\/constant(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/sharedreader\/constant(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"deprecated":true,"role":"symbol","title":"ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore"},"#Mutating-shared-state-concurrently":{"title":"Mutating shared state concurrently","titleInlineContent":[{"type":"text","text":"Mutating shared state concurrently"}],"type":"link","identifier":"#Mutating-shared-state-concurrently","url":"#Mutating-shared-state-concurrently"},"#Migrating-to-1112":{"title":"Migrating to 1.11.2","titleInlineContent":[{"type":"text","text":"Migrating to 1.11.2"}],"type":"link","identifier":"#Migrating-to-1112","url":"#Migrating-to-1112"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"role":"symbol","title":"withLock(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withLock"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)"},"#Supplying-mock-read-only-state-to-previews":{"title":"Supplying mock read-only state to previews","titleInlineContent":[{"type":"text","text":"Supplying mock read-only state to previews"}],"type":"link","identifier":"#Supplying-mock-read-only-state-to-previews","url":"#Supplying-mock-read-only-state-to-previews"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"role":"symbol","title":"dependency(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","title":"Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"role":"article","title":"Migrating to 1.7","abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":", and more."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/init(_:)":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"kind":"typeIdentifier","text":"Shared","preciseIdentifier":"s:22ComposableArchitecture6SharedV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"?>)"}],"abstract":[{"type":"text","text":"Unwraps a shared reference to an optional value."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"role":"article","title":"Migrating to 1.6","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"codeVoice","code":"TestStore\/receive(_:_:timeout:assert:file:line:)-dkei"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method when you need to assert on the payload inside an action received."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.6"}}}