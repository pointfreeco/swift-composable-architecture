{"sections":[{"chapter":"Navigation","title":"Multiple presentation destinations","kind":"hero","estimatedTimeInMinutes":30,"content":[{"inlineContent":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"type":"paragraph"}]},{"kind":"tasks","tasks":[{"stepsSection":[{"runtimePreview":null,"code":"02-02-01-code-0000.swift","type":"step","media":null,"caption":[],"content":[{"inlineContent":[{"text":"Go back to ContactsFeature.swift that we worked in from the last section. Add a new action","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that will be sent when the delete button is tapped on a row in the contacts list."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"When the delete button is tapped we want to show an alert asking the user to confirm deletion"},{"type":"text","text":" "},{"text":"of the contact.","type":"text"}],"type":"paragraph"},{"code":"02-02-01-code-0001.swift","type":"step","runtimePreview":null,"caption":[],"media":null,"content":[{"inlineContent":[{"text":"Add a piece of optional ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"text":" state to the","type":"text"},{"text":" ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":" state. We will further use "},{"type":"codeVoice","code":"AlertState"},{"text":" as it allows us to describe all","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the details of the alert in a manner that is test friendly since it is "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"type":"paragraph"}]},{"code":"02-02-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a new case to the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":"’s action that represents the actions that can"},{"text":" ","type":"text"},{"type":"text","text":"happen in the alert. We will use "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"type":"text","text":" for this."}]}],"caption":[{"content":[{"inlineContent":[{"type":"text","text":"The only choices in the alert are to cancel or confirm deletion, but we do not need"},{"type":"text","text":" "},{"text":"to model the cancel action. That will be handled automatically for us.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"}],"type":"step","runtimePreview":null,"media":null},{"inlineContent":[{"type":"text","text":"Now that we have new state modeled in our domain for the presentation of the alert, we can"},{"type":"text","text":" "},{"text":"properly implement the ","type":"text"},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" action."}],"type":"paragraph"},{"code":"02-02-01-code-0003.swift","caption":[],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the delete button is tapped we can populate the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" state in order to ask the user"},{"text":" ","type":"text"},{"text":"to confirm deletion of the contact.","type":"text"}]}],"runtimePreview":null},{"caption":[],"content":[{"inlineContent":[{"text":"Integrate the alert’s logic into the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"text":" by making another use of the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"reference","isActive":true},{"type":"text","text":" operator."}],"type":"paragraph"}],"code":"02-02-01-code-0004.swift","type":"step","media":null,"runtimePreview":null},{"runtimePreview":null,"code":"02-02-01-code-0005.swift","media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Listen for when the confirmation action is sent in the alert, and at that time we can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actually remove the element from the array."}]}],"type":"step"},{"type":"paragraph","inlineContent":[{"text":"That’s all it takes to integrate the alert it the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"text":" and implement all of its","type":"text"},{"type":"text","text":" "},{"type":"text","text":"logic. Next we need to integrate the alert into the view. The library ships a special"},{"type":"text","text":" "},{"code":"SwiftUI\/View\/alert(store:)","type":"codeVoice"},{"text":" view modifier that is tuned specifically for","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":"s."}]},{"content":[{"inlineContent":[{"type":"text","text":"Add the "},{"type":"codeVoice","code":"SwiftUI\/View\/alert(_:)"},{"type":"text","text":" view modifier to the "},{"type":"codeVoice","code":"ContactsView"},{"text":", and hand it a","type":"text"},{"type":"text","text":" "},{"text":"store that is scoped to the alert domain.","type":"text"}],"type":"paragraph"}],"caption":[{"name":"Note","type":"aside","content":[{"inlineContent":[{"text":"In order for the ","type":"text"},{"type":"codeVoice","code":"$store.scope"},{"type":"text","text":" syntax to work you must hold onto the store in the"},{"type":"text","text":" "},{"text":"view using the ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" property wrapper, or ","type":"text"},{"type":"codeVoice","code":"@Perception.Bindable"},{"text":" if you are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"targeting older platforms."}],"type":"paragraph"}],"style":"note"}],"type":"step","code":"02-02-01-code-0006.swift","media":null,"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a button to each row of the contacts list in order to send the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"text":" ","type":"text"},{"type":"text","text":"action to the store."}]}],"caption":[],"type":"step","code":"02-02-01-code-0007.swift","media":null,"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the app in the preview to see that deletion works as expected. After tapping the trash"},{"type":"text","text":" "},{"type":"text","text":"icon, an alert shows, and if you confirm deletion the item is removed from the list."}]}],"caption":[],"media":"ch02-sub02-sec01-0000.mov","type":"step","code":null,"runtimePreview":null},{"inlineContent":[{"text":"We’ve now added a new feature, that of deleting a contact, but unfortunately our domain","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is not modeled as concisely as it could be."}],"type":"paragraph"}],"title":"Delete contacts","anchor":"Delete-contacts","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add a new feature to the contacts list that allows you to delete a contact, but first"},{"type":"text","text":" "},{"text":"you must confirm deletion. We will implement the confirmation step using an alert. The tools","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that we used last section, such as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true},{"type":"text","text":", all work"},{"text":" ","type":"text"},{"text":"for presenting alerts from optional state too.","type":"text"}]}],"mediaPosition":"trailing"}]},{"title":"Improve domain modeling","anchor":"Improve-domain-modeling","stepsSection":[{"media":null,"content":[{"inlineContent":[{"text":"Define a new reducer, called ","type":"text"},{"code":"Destination","type":"codeVoice"},{"type":"text","text":", nested inside the "},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":". This"},{"type":"text","text":" "},{"text":"reducer will hold the domain and logic for every feature that can be navigated to from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the contacts feature, and as such it will be an enum."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"caption":[],"code":"02-02-02-code-0000.swift"},{"type":"step","code":"02-02-02-code-0001.swift","media":null,"caption":[],"content":[{"inlineContent":[{"text":"Add a case for for the “Add contact” feature. Note that we are holding onto the actual","type":"text"},{"type":"text","text":" "},{"code":"AddContactFeature","type":"codeVoice"},{"type":"text","text":" reducer in the case, not the state. The"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro will fill in all the requirements for the reducer"},{"text":" ","type":"text"},{"type":"text","text":"protocol for us automatically."}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"runtimePreview":null,"type":"step","caption":[],"code":"02-02-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add another case to the "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" for the alert state that can be displayed in the"},{"type":"text","text":" "},{"type":"text","text":"feature."}]}]},{"type":"paragraph","inlineContent":[{"text":"That is all it takes to define a single reducer that combines multiple mutually exclusive","type":"text"},{"type":"text","text":" "},{"type":"text","text":"reducers together. You can expand the macro code in Xcode to see all the code that is"},{"type":"text","text":" "},{"type":"text","text":"being written for you. And if in the future this feature can navigate to another feature,"},{"text":" ","type":"text"},{"type":"text","text":"you will only have to add a single case to the "},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" enum."}]},{"content":[{"inlineContent":[{"type":"text","text":"Replace the two pieces of optional "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true,"type":"reference"},{"type":"text","text":" with a single"},{"text":" ","type":"text"},{"type":"text","text":"optional pointed at "},{"code":"Destination.State","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"caption":[],"code":"02-02-02-code-0003.swift"},{"type":"paragraph","inlineContent":[{"text":"Note that this now creates a compilation error letting you know that ","type":"text"},{"type":"codeVoice","code":"ContactsFeature.State"},{"text":" ","type":"text"},{"type":"text","text":"is no longer "},{"code":"Equatable","type":"codeVoice"},{"text":". This is happening because ","type":"text"},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":" is not "},{"code":"Equatable","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and that type is generated by the ","type":"text"},{"type":"reference","overridingTitle":"@Reducer","overridingTitleInlineContent":[{"code":"@Reducer","type":"codeVoice"}],"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro.","type":"text"}]},{"type":"step","media":null,"content":[{"inlineContent":[{"text":"Extend the macro-generated ","type":"text"},{"type":"codeVoice","code":"Destination.State"},{"type":"text","text":" to apply an "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" conformance."}],"type":"paragraph"}],"code":"02-02-02-code-0004.swift","caption":[],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Replace the two action cases that held onto ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" ","type":"text"},{"type":"text","text":"with a single case that holds onto "},{"code":"Destination.Action","type":"codeVoice"},{"text":".","type":"text"}]}],"media":null,"caption":[],"type":"step","code":"02-02-02-code-0005.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now our model is more concisely defined, and we have compile time guarantees that only"},{"text":" ","type":"text"},{"text":"one destination can be active at a time. But, also now have a lot of compiler errors we need","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to fix."}]},{"caption":[],"content":[{"inlineContent":[{"text":"Instead of populating a piece of ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" optional state in order to drive navigation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to that feature, we will now mutate "},{"code":"destination","type":"codeVoice"},{"text":" to point it to the ","type":"text"},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" case."}],"type":"paragraph"}],"type":"step","code":"02-02-02-code-0006.swift","media":null,"runtimePreview":null},{"media":null,"code":"02-02-02-code-0007.swift","type":"step","caption":[],"content":[{"inlineContent":[{"text":"And when listening for actions happening in child domains we now need to destructure the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":".destination(.presented(_))"},{"type":"text","text":" case, such as when the “Add Contact” feature tells us to"},{"text":" ","type":"text"},{"type":"text","text":"save the contact."}],"type":"paragraph"}],"runtimePreview":null},{"runtimePreview":null,"code":"02-02-02-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And when the alert confirms deletion of the contact."}]}],"caption":[],"type":"step","media":null},{"code":"02-02-02-code-0009.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"We can handle all other destination actions by simply returning a ","type":"text"},{"type":"codeVoice","code":".none"},{"text":" effect to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represent there is no other work to perform."}],"type":"paragraph"}],"media":null,"type":"step","caption":[]},{"caption":[],"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the state mutation for showing an alert to instead point the "},{"type":"codeVoice","code":"destination"},{"text":" to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"alert"},{"type":"text","text":" case."}]}],"type":"step","code":"02-02-02-code-0010.swift"},{"runtimePreview":null,"code":"02-02-02-code-0011.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the two "},{"type":"codeVoice","code":"ifLet"},{"text":"s that were used at the bottom of the reducer with a single one that","type":"text"},{"text":" ","type":"text"},{"text":"is focused on the ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" domain. It is not even necessary to specify the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" type in this expression because it can be inferred from how the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" ","type":"text"},{"text":"macro was applied to the ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" enum."}]}],"caption":[],"media":null},{"inlineContent":[{"type":"text","text":"That’s all it takes to convert two independent, imprecisely modeled optional values into a"},{"type":"text","text":" "},{"text":"single optional enum, and we can now prove that only one destination can be active at a time.","type":"text"},{"type":"text","text":" "},{"text":"All that is left is to update the view so that we can specify which case of the destination","type":"text"},{"type":"text","text":" "},{"text":"enum drives the sheet and alert.","type":"text"}],"type":"paragraph"},{"code":"02-02-02-code-0012.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"When you model all of your destinations in a single optional value, you start by scoping to"},{"text":" ","type":"text"},{"text":"the destination domain and then you further scope into the state and action cases","type":"text"},{"text":" ","type":"text"},{"text":"associated with the specific destination using familiar key path dot-chaining syntax. This","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can be done with familiar dot syntax because the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro applies the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro to each enum."}],"type":"paragraph"}],"caption":[],"media":null,"type":"step"},{"media":null,"code":"02-02-02-code-0013.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The same can be done for the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" view modifier."}]}],"type":"step","caption":[]},{"type":"paragraph","inlineContent":[{"text":"That completes the refactor of the reducer and view to use a single piece of optional enum","type":"text"},{"type":"text","text":" "},{"text":"state instead using multiple optional values. The application works exactly as it did before,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but now its domain is more concisely modeled."}]}],"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Currently the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":" can navigate to two possible destinations: either the “Add"},{"type":"text","text":" "},{"text":"Contact” sheet or the delete alert. Importantly, it is not possible to be navigated to both","type":"text"},{"type":"text","text":" "},{"type":"text","text":"destinations at once. However, that currently is possible since we are representing each of"},{"text":" ","type":"text"},{"type":"text","text":"those destinations as optional pieces of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The number of invalid states explodes exponentially when you use optionals to represent","type":"text"},{"text":" ","type":"text"},{"text":"features you can navigate to. For example, 2 optionals has 1 invalid state, but 3 optionals","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"has 4 invalid states, and 4 optionals has 11 invalid states. This imprecise domain modeling"},{"type":"text","text":" "},{"text":"leaks complexity into your application since you can never truly know which feature is being","type":"text"},{"type":"text","text":" "},{"type":"text","text":"presented."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Let’s see how to more concisely model our domains for navigating to multiple destinations.","type":"text"}]}],"kind":"contentAndMedia"}]}]},{"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Testing presentation","action":{"overridingTitle":"Get started","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference"},"abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}]}],"metadata":{"categoryPathComponent":"MeetComposableArchitecture","role":"project","title":"Multiple presentation destinations","category":"The Composable Architecture"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-02-multipledestinations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},"kind":"project","schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"kind":"identifier","text":"Store"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","title":"Contact detail feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","type":"topic","estimatedTime":"30min","title":"Composing features","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","title":"Testing effects","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"02-02-01-code-0001.swift":{"identifier":"02-02-01-code-0001.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":6},{"line":13},{"line":14}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","title":"Testing the add contact flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","type":"section","title":"Improve domain modeling","role":"pseudoSymbol"},"02-02-02-code-0006.swift":{"highlights":[{"line":20},{"line":21},{"line":22},{"line":23}],"type":"file","fileType":"swift","identifier":"02-02-02-code-0006.swift","fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","type":"section","title":"What is a side effect?","role":"pseudoSymbol"},"02-02-02-code-0003.swift":{"identifier":"02-02-02-code-0003.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    \/\/ @Presents var addContact: AddContactFeature.State?","    \/\/ @Presents var alert: AlertState<Action.Alert>?","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","type":"topic","estimatedTime":"20min","title":"Your first feature","role":"project"},"02-02-01-code-0002.swift":{"highlights":[{"line":12},{"line":15}],"type":"file","fileType":"swift","identifier":"02-02-01-code-0002.swift","fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" protocol for a type."}],"role":"symbol","title":"Reducer()","type":"topic","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","title":"Managing a timer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","title":"Composing reducers","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"02-02-02-code-0008.swift":{"identifier":"02-02-02-code-0008.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":31}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","title":"Testing network requests","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","title":"Integrating into the app","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","title":"Testing presentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"project","type":"topic","kind":"project","estimatedTime":"40min"},"02-02-01-code-0003.swift":{"highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41}],"type":"file","fileType":"swift","identifier":"02-02-01-code-0003.swift","fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","title":"Your first presentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"role":"project","type":"topic","kind":"project","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","title":"Adding a tab view","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"02-02-02-code-0012.swift":{"identifier":"02-02-02-code-0012.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":15},{"line":32}],"content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"]},"02-02-02-code-0009.swift":{"highlights":[{"line":35},{"line":36},{"line":37}],"type":"file","fileType":"swift","identifier":"02-02-02-code-0009.swift","fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"text":"given an action, and describes what ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","kind":"symbol","title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q":{"title":"ifLet(_:action:destination:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier","text":"WritableKeyPath"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","kind":"typeIdentifier","text":"PresentationState"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"PresentationAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"text":">\n","kind":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"topic","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:filepath:line:column:)-4ub6q"},"02-02-02-code-0004.swift":{"identifier":"02-02-02-code-0004.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":8}],"content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","    case alert(AlertState<ContactsFeature.Action.Alert>)","  }","}","extension ContactsFeature.Destination.State: Equatable {}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PresentationState","kind":"identifier"}],"title":"PresentationState","abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"url":"\/documentation\/composablearchitecture\/presentationstate","type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"PresentationState","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","title":"Performing a network request","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"02-02-02-code-0001.swift":{"highlights":[{"line":4}],"type":"file","fileType":"swift","identifier":"02-02-02-code-0001.swift","fileName":"ContactsFeatures.swift","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","  }","}"],"syntax":"swift"},"ch02-sub02-sec01-0000.mov":{"identifier":"ch02-sub02-sec01-0000.mov","poster":null,"type":"video","variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/ch02-sub02-sec01-0000.mov"}],"alt":null},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","type":"section","title":"Deleting a contact","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","type":"section","title":"Testing the delete contact flow","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","title":"Project set up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","type":"topic","estimatedTime":"30min","title":"Adding side effects","role":"project"},"02-02-01-code-0005.swift":{"highlights":[{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}],"type":"file","fileType":"swift","identifier":"02-02-01-code-0005.swift","fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"syntax":"swift"},"02-02-02-code-0010.swift":{"identifier":"02-02-02-code-0010.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":47}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"]},"02-02-01-code-0004.swift":{"highlights":[{"line":48}],"type":"file","fileType":"swift","identifier":"02-02-01-code-0004.swift","fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    @Presents var alert: AlertState<Action.Alert>?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case alert(PresentationAction<Alert>)","    case deleteButtonTapped(id: Contact.ID)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","title":"Child-to-parent communication","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"02-02-01-code-0000.swift":{"identifier":"02-02-01-code-0000.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":11},{"line":28},{"line":29},{"line":30}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","    case deleteButtonTapped(id: Contact.ID)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/navigation","type":"topic","title":"Navigation","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","title":"Testing your feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"project","type":"topic","kind":"project","estimatedTime":"1hr 0min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","type":"section","title":"Testing state changes","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","type":"section","title":"Non-exhaustive testing","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","type":"section","title":"Integrating with SwiftUI","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","type":"section","title":"Integrate reducers","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","type":"section","title":"Delete contacts","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","type":"section","title":"Integrate views","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","type":"topic","estimatedTime":"30min","title":"Navigation stacks","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","type":"topic","estimatedTime":"30min","title":"Multiple presentation destinations","role":"project"},"02-02-01-code-0006.swift":{"highlights":[{"line":29}],"type":"file","fileType":"swift","identifier":"02-02-01-code-0006.swift","fileName":"ContactsFeatures.swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          Text(contact.name)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.addContact, action: \\.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"],"syntax":"swift"},"02-02-01-code-0007.swift":{"identifier":"02-02-01-code-0007.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.addContact, action: \\.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.alert, action: \\.alert))","  }","}"]},"02-02-02-code-0013.swift":{"highlights":[{"line":38}],"type":"file","fileType":"swift","identifier":"02-02-02-code-0013.swift","fileName":"ContactsFeatures.swift","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          HStack {","            Text(contact.name)","            Spacer()","            Button {","              store.send(.deleteButtonTapped(id: contact.id))","            } label: {","              Image(systemName: \"trash\")","                .foregroundColor(.red)","            }","          }","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.destination?.addContact, action: \\.destination.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","    .alert($store.scope(state: \\.destination?.alert, action: \\.destination.alert))","  }","}"],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"url":"\/tutorials\/meetcomposablearchitecture\/essentials","title":"Essentials","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","abstract":[],"role":"article","type":"topic","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Presents","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Wraps a property with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"text":" and observes it.","type":"text"}],"title":"Presents()","url":"\/documentation\/composablearchitecture\/presents()","type":"topic","role":"symbol","kind":"symbol"},"02-02-02-code-0007.swift":{"identifier":"02-02-02-code-0007.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":27}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"kind":"symbol","title":"PresentationAction","abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}]},"02-02-02-code-0005.swift":{"highlights":[{"line":11},{"line":12},{"line":13}],"type":"file","fileType":"swift","identifier":"02-02-02-code-0005.swift","fileName":"ContactsFeatures.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    \/\/ case addContact(PresentationAction<AddContactFeature.Action>)","    \/\/ case alert(PresentationAction<Alert>)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        return .none","        ","      case .addContact:","        return .none","        ","      case let .alert(.presented(.confirmDeletion(id: id))):","        state.contacts.remove(id: id)","        return .none","        ","      case .alert:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.alert = AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","            TextState(\"Delete\")","          }","        }","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","    .ifLet(\\.$alert, action: \\.alert)","  }","}"],"syntax":"swift"},"02-02-02-code-0002.swift":{"identifier":"02-02-02-code-0002.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":5}],"content":["extension ContactsFeature {","  @Reducer","  enum Destination {","    case addContact(AddContactFeature)","    case alert(AlertState<ContactsFeature.Action.Alert>)","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","title":"Controlling dependencies","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"role":"overview","url":"\/tutorials\/meetcomposablearchitecture","kind":"overview","type":"topic","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"title":"Meet the Composable Architecture","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","title":"Create a reducer","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"02-02-02-code-0000.swift":{"highlights":[],"type":"file","fileType":"swift","identifier":"02-02-02-code-0000.swift","fileName":"ContactsFeatures.swift","content":["extension ContactsFeature {","  @Reducer","  enum Destination {","  }","}"],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","title":"Deriving child stores","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section"},"02-02-02-code-0011.swift":{"identifier":"02-02-02-code-0011.swift","fileName":"ContactsFeatures.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":51}],"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination)","  }","}"]}}}