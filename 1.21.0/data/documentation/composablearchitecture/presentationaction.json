{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"metadata":{"externalID":"s:22ComposableArchitecture18PresentationActionO","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Enumeration","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"symbolKind":"enum","title":"PresentationAction","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"],"anchor":"Tree-based-navigation","title":"Tree-based navigation"}],"topicSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"],"anchor":"Enumeration-Cases","title":"Enumeration Cases"},{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/Decodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/Equatable-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations"}],"abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"text":"Use this wrapper type for modeling a feature’s domain that needs to present a child","type":"text"},{"text":" ","type":"text"},{"text":"feature using ","type":"text"},{"code":"Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, if you have a "},{"type":"codeVoice","code":"ChildFeature"},{"type":"text","text":" reducer that encapsulates the logic and behavior"},{"type":"text","text":" "},{"type":"text","text":"for a feature, then any feature that wants to present that feature will hold onto"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChildFeature.Action"},{"type":"text","text":" like so:"}],"type":"paragraph"},{"type":"codeListing","code":["@Reducer","struct ParentFeature {","  \/\/ ...","  enum Action {","    case child(PresentationAction<ChildFeature.Action>)","     \/\/ ...","  }","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" enum has two cases that represent the two fundamental operations"},{"type":"text","text":" "},{"type":"text","text":"you can do when presenting a child feature: "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","isActive":true},{"type":"text","text":" represents"},{"type":"text","text":" "},{"type":"text","text":"an action happening "},{"inlineContent":[{"text":"inside","type":"text"}],"type":"emphasis"},{"type":"text","text":" the child feature, and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","isActive":true},{"type":"text","text":" represents"},{"type":"text","text":" "},{"type":"text","text":"dismissing the child feature by "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"-ing its state."}],"type":"paragraph"},{"inlineContent":[{"text":"See the dedicated article on ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","type":"reference"},{"text":" for more information on the library’s navigation","type":"text"},{"text":" ","type":"text"},{"text":"tools, and in particular see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","type":"reference"},{"text":" for information on modeling navigation","type":"text"},{"text":" ","type":"text"},{"text":"using optionals and enums.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/presentationaction"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/13CasePathsCore0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/Se","doc:\/\/ComposableArchitecture\/SE","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","abstract":[{"type":"text","text":"An action sent to "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" out the associated presentation state."}],"kind":"symbol","role":"symbol","title":"PresentationAction.dismiss"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","title":"Reducer","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"role":"symbol"},"doc://ComposableArchitecture/SE":{"type":"unresolvable","title":"Swift.Encodable","identifier":"doc:\/\/ComposableArchitecture\/SE"},"doc://ComposableArchitecture/Se":{"title":"Swift.Decodable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/Se"},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","title":"Swift.Copyable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/Equatable-Implementations":{"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/equatable-implementations","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/Equatable-Implementations","abstract":[],"role":"collectionGroup","title":"Equatable Implementations"},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/SH":{"title":"Swift.Hashable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","title":"Tree-based navigation","kind":"article","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/treebasednavigation","abstract":[{"text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including","type":"text"},{"text":" ","type":"text"},{"text":"how to model your domains, how to integrate features, how to test your features, and more.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"role":"symbol","title":"Presents()","kind":"symbol","abstract":[{"type":"text","text":"Wraps a property with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and observes it."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"url":"\/documentation\/composablearchitecture\/presents()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"role":"symbol","type":"topic","title":"Effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/CasePathable-Implementations":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/CasePathable-Implementations","role":"collectionGroup","abstract":[],"title":"CasePathable Implementations","url":"\/documentation\/composablearchitecture\/presentationaction\/casepathable-implementations","type":"topic"},"doc://ComposableArchitecture/13CasePathsCore0A8PathableP":{"type":"unresolvable","title":"CasePathsCore.CasePathable","identifier":"doc:\/\/ComposableArchitecture\/13CasePathsCore0A8PathableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"kind":"symbol","title":"PresentationAction.presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" presentation state.","type":"text"}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"abstract":[{"text":"A wrapper type for actions that can be presented.","type":"text"}],"url":"\/documentation\/composablearchitecture\/presentationaction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","title":"PresentationAction","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"kind":"symbol"},"doc://ComposableArchitecture/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","title":"PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationState"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"text":" ","type":"text"},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}],"title":"Navigation","url":"\/documentation\/composablearchitecture\/navigation","role":"collectionGroup","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/Decodable-Implementations":{"kind":"article","type":"topic","abstract":[],"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/presentationaction\/decodable-implementations","title":"Decodable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/Decodable-Implementations"}}}