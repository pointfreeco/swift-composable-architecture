{"metadata":{"modules":[{"name":"ComposableArchitecture"}],"title":"publisher","role":"symbol","externalID":"s:22ComposableArchitecture9ViewStoreC9publisherAA0D9PublisherVyxGvp","symbolKind":"property","platforms":[],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Instance Property"},"kind":"symbol","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]]},"deprecationSummary":[{"inlineContent":[{"text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState","type":"text"}],"type":"paragraph"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","preciseIdentifier":"s:ScM","text":"MainActor"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":"> { "},{"text":"get","kind":"keyword"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"inlineContent":[{"text":"This publisher supports dynamic member lookup so that you can pluck out a specific field in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the state:"}],"type":"paragraph"},{"syntax":"swift","code":["viewStore.publisher.alert","  .sink { ... }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the emission happens the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"text":"’s state has been updated, and so the following","type":"text"},{"type":"text","text":" "},{"type":"text","text":"precondition will pass:"}]},{"syntax":"swift","type":"codeListing","code":["viewStore.publisher","  .sink { precondition($0 == viewStore.state) }"]},{"type":"paragraph","inlineContent":[{"text":"This means you can either use the value passed to the closure or you can reach into","type":"text"},{"type":"text","text":" "},{"code":"viewStore.state","type":"codeVoice"},{"text":" directly.","type":"text"}]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to a bug in Combine (or feature?), the order you "},{"type":"codeVoice","code":".sink"},{"type":"text","text":" on a publisher has no"},{"type":"text","text":" "},{"text":"bearing on the order the ","type":"text"},{"code":".sink","type":"codeVoice"},{"type":"text","text":" closures are called. This means the work performed inside"},{"type":"text","text":" "},{"code":"viewStore.publisher.sink","type":"codeVoice"},{"text":" closures should be completely independent of each other. Later","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closures cannot assume that earlier ones have already run."}]}],"style":"note"}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/viewstore\/publisher"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher"],"anchor":"Combine-integration","generated":true,"title":"Combine integration"}],"abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/publisher","title":"publisher","kind":"symbol","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"navigatorTitle":[{"kind":"identifier","text":"StorePublisher"}],"kind":"symbol","title":"StorePublisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","role":"symbol","type":"topic","abstract":[{"text":"A publisher of store state.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"StorePublisher","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/storepublisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"title":"ifLet(then:else:)","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","abstract":[{"text":"Calls one of two closures depending on whether a store’s optional state is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or not, and"},{"text":" ","type":"text"},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"then"},{"text":": (","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"else"},{"kind":"text","text":": () -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":") -> any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP","text":"Cancellable"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"topic","role":"symbol","kind":"symbol","title":"ViewStore","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/viewstore","deprecated":true,"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"title":"publisher","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/publisher","abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StorePublisher","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":">","kind":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"role":"collectionGroup","title":"UIKit Integration","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"type":"topic","kind":"article"}}}