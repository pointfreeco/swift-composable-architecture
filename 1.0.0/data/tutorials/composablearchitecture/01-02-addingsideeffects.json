{"variants":[{"paths":["\/tutorials\/composablearchitecture\/01-02-addingsideeffects"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Adding side effects","chapter":"Essentials","estimatedTimeInMinutes":30,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}]}]},{"kind":"tasks","tasks":[{"anchor":"What-is-a-side-effect","title":"What is a side effect?","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Side effects are by far the most important aspect of feature development. They are what allow"},{"type":"text","text":" "},{"type":"text","text":"us to communicate with the outside world, such as making API requests, interacting with file"},{"type":"text","text":" "},{"type":"text","text":"systems, and performing time-based asynchrony. Without them, our applications could not do"},{"type":"text","text":" "},{"type":"text","text":"anything of real value for our users."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, side effects are also the most complex part of our features. State mutations are"},{"type":"text","text":" "},{"type":"text","text":"simple processes. If you run the reducer with the same piece of state and same action, you will"},{"type":"text","text":" "},{"type":"text","text":"always get the same result. But effects are susceptible to the vagaries of the outside world,"},{"type":"text","text":" "},{"type":"text","text":"such as network connectivity, disk permissions, and more. Each time you run an effect, you"},{"type":"text","text":" "},{"type":"text","text":"can get back a completely different answer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by seeing why we can’t simply perform effectful work directly in our"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" conformances, and then we will see what tools the"},{"type":"text","text":" "},{"type":"text","text":"library provides for performing effects."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-02-01-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add a new bit of functionality to the counter feature we built in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"type":"text","text":". We will add a button that when tapped makes a network request to"},{"type":"text","text":" "},{"type":"text","text":"fetch a fact about the number that is currently displayed."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two ways you can approach this. Sometimes people like to work on the reducer"},{"type":"text","text":" "},{"type":"text","text":"first, and then the view. Others like to start with the view, which is what we will do now."},{"type":"text","text":" "},{"type":"text","text":"We have added an additional button to the bottom of "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":", and when it is tapped we"},{"type":"text","text":" "},{"type":"text","text":"will send a "},{"type":"codeVoice","code":"factButtonTapped"},{"type":"text","text":" action, which does not yet exist in the counter domain, but"},{"type":"text","text":" "},{"type":"text","text":"will soon."}]}],"type":"step","runtimePreview":"02-01-image-0001.png","media":null},{"code":"01-02-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will also add a progress view at the bottom to display while we are loading the fact,"},{"type":"text","text":" "},{"type":"text","text":"and we will unwrap a bit of optional state to display the fact. We are using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fact"},{"type":"text","text":" state to accomplish this, neither of which exists in the counter"},{"type":"text","text":" "},{"type":"text","text":"feature yet, but will soon."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes for the view. The code is not yet compiling because we are using state"},{"type":"text","text":" "},{"type":"text","text":"and actions that don’t yet exist, so let’s fix those errors in the reducer."}]},{"code":"01-02-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Recall that this is what our "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" reducer looks like so far, as built in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"type":"text","text":". It has a simple "},{"type":"codeVoice","code":"State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" type, and the reducer"},{"type":"text","text":" "},{"type":"text","text":"simply decrements or increments the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" state depending on which action is sent."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-01-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add the additional state and actions that have been dictated to us by the view."},{"type":"text","text":" "},{"type":"text","text":"We know we need some "},{"type":"codeVoice","code":"fact"},{"type":"text","text":" and "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" state, and we need a "},{"type":"codeVoice","code":"factButtonTapped"},{"type":"text","text":" action."},{"type":"text","text":" "},{"type":"text","text":"We can also implement that action in the reducer by flipping "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" to "},{"type":"codeVoice","code":"true"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"we’ll clear the "},{"type":"codeVoice","code":"fact"},{"type":"text","text":" state when any button is tapped. And finally, we will return "},{"type":"codeVoice","code":".none"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"just like we did in all the other cases."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-01-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the question is: how can we perform a side-effect? We will be using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/www.numbersapi.com"},{"type":"text","text":" to fetch a fact for the state’s current count. We might"},{"type":"text","text":" "},{"type":"text","text":"hope we can just use "},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":" directly in the reducer to perform some async work, but"},{"type":"text","text":" "},{"type":"text","text":"unfortunately that is not allowed."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture separates the simple, pure transformations of state from the"},{"type":"text","text":" "},{"type":"text","text":"complex, messy side effects. It is one of the core tenets of the library and there are a lot"},{"type":"text","text":" "},{"type":"text","text":"of benefits to doing so. Luckily for us, the library gives us a tool that is appropriate"},{"type":"text","text":" "},{"type":"text","text":"for executing side effects. It is called "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" and it is"},{"type":"text","text":" "},{"type":"text","text":"explored in the next section."}]}]},{"anchor":"Performing-a-network-request","title":"Performing a network request","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we understand what a side-effect is and why they cannot be performed directly in"},{"type":"text","text":" "},{"type":"text","text":"a reducer, let’s see how to fix the code we wrote above."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture bakes the notion of “effect” directly into the definition of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":". After a reducer processes an action by mutating"},{"type":"text","text":" "},{"type":"text","text":"state, it can return something called an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":", which"},{"type":"text","text":" "},{"type":"text","text":"represents an asynchronous unit that is run by the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":". Effects"},{"type":"text","text":" "},{"type":"text","text":"are what can communicate with outside systems and then feed data from the outside back into"},{"type":"text","text":" "},{"type":"text","text":"the reducer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is exactly what we want to do for our number fact effect. We want to make a network"},{"type":"text","text":" "},{"type":"text","text":"request, and then feed that information back into the reducer. So, let’s get started."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-02-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The primary way one constructs an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" is via the static method"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)"},{"type":"text","text":". This provides"},{"type":"text","text":" "},{"type":"text","text":"you with an asynchronous context to perform any kind of work you want, as well as a handle"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"send"},{"type":"text","text":") for sending actions back into the system."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The trailing closure of "},{"type":"codeVoice","code":".run"},{"type":"text","text":" is the perfect place to perform our network request to fetch"},{"type":"text","text":" "},{"type":"text","text":"data from "},{"type":"reference","isActive":true,"identifier":"http:\/\/www.numbersapi.com"},{"type":"text","text":" and turn it into a string."}]}],"caption":[{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately "},{"type":"reference","isActive":true,"identifier":"http:\/\/www.numbersapi.com"},{"type":"text","text":" does not offer HTTPS, so you will need"},{"type":"text","text":" "},{"type":"text","text":"to add an entry to your application’s Info.plist in order to allow HTTP requests. See"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity"},{"type":"text","text":" article for information on how to do that."}]}],"type":"aside","name":"Tip"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"However, it is not possible to then mutate the "},{"type":"codeVoice","code":"state.count"},{"type":"text","text":" in the effect after fetching"},{"type":"text","text":" "},{"type":"text","text":"the data from the network. This is strictly enforced by the compiler since sendable closures"},{"type":"text","text":" "},{"type":"text","text":"cannot capture "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" state. This is showing how the library chooses to separate the nice,"},{"type":"text","text":" "},{"type":"text","text":"simple and pure state mutations that reducers perform from the messy, complex effects."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In order for us to feed the information from the effect back into our reducer we need to"},{"type":"text","text":" "},{"type":"text","text":"introduce another action, called "},{"type":"codeVoice","code":"factResponse"},{"type":"text","text":", and it will have an associated value of the"},{"type":"text","text":" "},{"type":"text","text":"string that is fetched from the network. Then we can send that action in the effect after"},{"type":"text","text":" "},{"type":"text","text":"performing the asynchronous work, and we can handle the new action by flipping "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" "},{"type":"text","text":"back to "},{"type":"codeVoice","code":"false"},{"type":"text","text":" and updating the "},{"type":"codeVoice","code":"fact"},{"type":"text","text":" state."}]}],"caption":[{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently we are ignoring any errors that can be thrown by "},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":". In a"},{"type":"text","text":" "},{"type":"text","text":"more complete application you would want to leverage "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" "},{"type":"text","text":"to have errors fed back into the reducer so that you can react appropriately."}]}],"type":"aside","name":"Warning"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-02-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can now run the application in the simulator or in a preview and see that the feature"},{"type":"text","text":" "},{"type":"text","text":"works as we expect. We can count up to a number, tap the “Fact” button, and a moment"},{"type":"text","text":" "},{"type":"text","text":"later a fact will be displayed at the bottom of the UI."}]}],"caption":[],"type":"step","runtimePreview":"02-02-video-0005.mov","media":null}]},{"anchor":"Managing-a-timer","title":"Managing a timer","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Network requests are probably one of the most common types of side effects, but they are not"},{"type":"text","text":" "},{"type":"text","text":"the only kind. Let’s add a new bit of functionality to our counter feature. We will add"},{"type":"text","text":" "},{"type":"text","text":"another button that when tapped starts a one second repeating timer, and for each tick we will"},{"type":"text","text":" "},{"type":"text","text":"increment the state’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":" by one."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"01-02-03-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will start with the view layer, just as we did before. We will add a button that either"},{"type":"text","text":" "},{"type":"text","text":"displays “Start timer” or “Stop timer”, depending on some "},{"type":"codeVoice","code":"isTimerRunning"},{"type":"text","text":" state, and"},{"type":"text","text":" "},{"type":"text","text":"when tapped we will send a "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"type":"text","text":" action. That’s all it takes for the"},{"type":"text","text":" "},{"type":"text","text":"view."}]}],"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"isTimerRunning"},{"type":"text","text":" state and "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"type":"text","text":" actions do not yet exist."},{"type":"text","text":" "},{"type":"text","text":"We will add them in the next step."}]}],"type":"aside","name":"Note"}],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-03-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we will update the reducer by adding the "},{"type":"codeVoice","code":"isTimerRunning"},{"type":"text","text":" state, a new"},{"type":"text","text":" "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"type":"text","text":" action, and stubbing in the basics of the logic for the new"},{"type":"text","text":" "},{"type":"text","text":"action. We know we will want to execute some asynchronous work, in particular a timer, so"},{"type":"text","text":" "},{"type":"text","text":"we have gone ahead and opened up a "},{"type":"codeVoice","code":"run"},{"type":"text","text":" effect."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-03-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the "},{"type":"codeVoice","code":"run"},{"type":"text","text":" effect we can emulate a very crude timer by starting an infinite "},{"type":"codeVoice","code":"while"},{"type":"text","text":" "},{"type":"text","text":"loop and sleeping for one second inside the loop. This is not the best way to construct a"},{"type":"text","text":" "},{"type":"text","text":"timer as it allows for drift to occur, but it will be fine for our purposes right now."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-03-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to react to each timer tick in the reducer we need to introduce a new action,"},{"type":"text","text":" "},{"type":"codeVoice","code":"timerTick"},{"type":"text","text":", that will be sent after each "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":". And it’s in that action we will"},{"type":"text","text":" "},{"type":"text","text":"increment the state’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there is a bug. If we tap the “Start timer” button to start the timer, and then tap"},{"type":"text","text":" "},{"type":"text","text":"“Stop timer”, we will see that the timer did not stop."}]},{"code":"01-02-03-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix the bug, we can leverage a powerful feature of the Composable Architecture known as"},{"type":"text","text":" "},{"type":"text","text":"“effect cancellation”. We can mark any effect as cancellable using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)"},{"type":"text","text":" method by providing"},{"type":"text","text":" "},{"type":"text","text":"an ID, and then at a later time we can cancel that effect using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-02-03-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the feature works as we expect. We can start the timer, wait a few seconds to see it"},{"type":"text","text":" "},{"type":"text","text":"count up, and then we can stop the timer. This shows how to manage a long-living effect,"},{"type":"text","text":" "},{"type":"text","text":"including how to cancel effects."}]}],"caption":[],"type":"step","runtimePreview":"03-03-video-0006.mp4","media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Testing your feature","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Adding side effects","categoryPathComponent":"MeetComposableArchitecture","role":"project","category":"The Composable Architecture"},"hierarchy":{"modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"01-02-02-code-0001.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { send in","        \/\/ ✅ Do async work in here, and send actions back into the system.","      }","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-02-code-0001.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"role":"pseudoSymbol","title":"Testing the add contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"01-02-03-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      return .run { send in","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-03-code-0002.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","title":"Integrating into the app","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app"},"01-02-01-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-01-code-0003.swift","type":"file","fileType":"swift","highlights":[]},"03-03-video-0006.mp4":{"poster":null,"alt":null,"type":"video","identifier":"03-03-video-0006.mp4","variants":[{"url":"\/videos\/03-03-video-0006.mp4","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"role":"pseudoSymbol","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"role":"project","title":"Adding side effects","estimatedTime":"30min","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects"},"01-02-02-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-02-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":13},{"line":31},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"role":"pseudoSymbol","title":"Controlling dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies"},"01-02-01-code-0002.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","        Button(\"Fact\") {","          viewStore.send(.factButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        if viewStore.isLoading {","          ProgressView()","        } else if let fact = viewStore.fact {","          Text(fact)","            .font(.largeTitle)","            .multilineTextAlignment(.center)","            .padding()","        }","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-01-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"role":"pseudoSymbol","title":"Non-exhaustive testing","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"http://www.numbersapi.com":{"title":"numbersapi.com","titleInlineContent":[{"type":"text","text":"numbersapi.com"}],"type":"link","identifier":"http:\/\/www.numbersapi.com","url":"http:\/\/www.numbersapi.com"},"01-02-01-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","","      let (data, _) = try await URLSession.shared","        .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(state.count)\")!)","      \/\/ 🛑 'async' call in a function that does not support concurrency","      \/\/ 🛑 Errors thrown from here are not handled","","      state.fact = String(decoding: data, as: UTF8.self)","      state.isLoading = false","","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-01-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"role":"pseudoSymbol","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"role":"pseudoSymbol","title":"Performing a network request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request"},"02-02-video-0005.mov":{"poster":null,"alt":null,"type":"video","identifier":"02-02-video-0005.mov","variants":[{"url":"\/videos\/02-02-video-0005.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"role":"overview","title":"Meet the Composable Architecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","kind":"overview","type":"topic","url":"\/tutorials\/meetcomposablearchitecture"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"role":"project","title":"Navigation stacks","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"role":"pseudoSymbol","title":"What is a side effect?","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect"},"01-02-03-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      return .run { send in","        while true {","          try await Task.sleep(for: .seconds(1))","        }","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-03-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":49},{"line":50},{"line":51}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"role":"symbol","title":"TaskResult","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"url":"\/documentation\/composablearchitecture\/taskresult"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"role":"pseudoSymbol","title":"Testing state changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"role":"project","title":"Your first presentation","estimatedTime":"30min","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancel(id:)":{"role":"symbol","title":"cancel(id:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancel"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"An effect that will cancel any currently in-flight effect with the given identifier."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/cancel(id:)"},"01-02-01-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-01-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":12},{"line":20},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":30}]},"https://developer.apple.com/documentation/bundleresources/information_property_list/nsapptransportsecurity":{"title":"this","titleInlineContent":[{"type":"text","text":"this"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","url":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"role":"pseudoSymbol","title":"Child-to-parent communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"role":"article","title":"Navigation","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"01-02-03-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .timerTick:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      return .run { send in","        while true {","          try await Task.sleep(for: .seconds(1))","          await send(.timerTick)","        }","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-03-code-0004.swift","type":"file","fileType":"swift","highlights":[{"line":16},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":57}]},"01-02-02-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-02-code-0005.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"role":"project","title":"Multiple presentation destinations","estimatedTime":"30min","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"role":"pseudoSymbol","title":"Improve domain modeling","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"role":"pseudoSymbol","title":"Delete contacts","abstract":[{"type":"text","text":"In the previous section you learned how model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"role":"pseudoSymbol","title":"Testing network requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"role":"pseudoSymbol","title":"Managing a timer","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:line:)":{"role":"symbol","title":"run(priority:operation:catch:fileID:line:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:line:)"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","title":"Essentials","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","kind":"article","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"role":"pseudoSymbol","title":"Drill-down to contact detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail"},"01-02-02-code-0002.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","      }","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-02-code-0002.swift","type":"file","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"role":"pseudoSymbol","title":"Testing effects","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"role":"pseudoSymbol","title":"Create a reducer","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"role":"project","title":"Testing presentation","estimatedTime":"40min","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation"},"01-02-01-code-0001.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","        Button(\"Fact\") {","          viewStore.send(.factButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-01-code-0001.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"role":"pseudoSymbol","title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI"},"02-01-image-0001.png":{"alt":null,"type":"image","identifier":"02-01-image-0001.png","variants":[{"url":"\/images\/02-01-image-0001.png","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"role":"pseudoSymbol","title":"Testing the delete contact flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancellable(id:cancelInFlight:)":{"role":"symbol","title":"cancellable(id:cancelInFlight:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancellable"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cancelInFlight"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Turns an effect into one that is capable of being canceled."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/cancellable(id:cancelinflight:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"role":"project","title":"Your first feature","estimatedTime":"20min","abstract":[{"type":"text","text":"Learn how to create a conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for"},{"type":"text","text":" "},{"type":"text","text":"implementing the logic and behavior of a feature, and then learn how to hook up that feature to"},{"type":"text","text":" "},{"type":"text","text":"a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature"},"01-02-03-code-0001.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      VStack {","        Text(\"\\(viewStore.count)\")","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        HStack {","          Button(\"-\") {","            viewStore.send(.decrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","","          Button(\"+\") {","            viewStore.send(.incrementButtonTapped)","          }","          .font(.largeTitle)","          .padding()","          .background(Color.black.opacity(0.1))","          .cornerRadius(10)","        }","        Button(viewStore.isTimerRunning ? \"Stop timer\" : \"Start timer\") {","          viewStore.send(.toggleTimerButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        Button(\"Fact\") {","          viewStore.send(.factButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","","        if viewStore.isLoading {","          ProgressView()","        } else if let fact = viewStore.fact {","          Text(fact)","            .font(.largeTitle)","            .multilineTextAlignment(.center)","            .padding()","        }","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-03-code-0001.swift","type":"file","fileType":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"role":"project","title":"Testing your feature","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","kind":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"role":"pseudoSymbol","title":"Project set up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up"},"01-02-02-code-0003.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        state.fact = fact","        \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is not allowed in","        \/\/    concurrently-executing code","      }","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-02-code-0003.swift","type":"file","fileType":"swift","highlights":[{"line":30},{"line":31},{"line":32}]},"01-02-03-code-0005.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  enum CancelID { case timer }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .timerTick:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      if state.isTimerRunning {","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","        .cancellable(id: CancelID.timer)","      } else {","        return .cancel(id: CancelID.timer)","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-03-code-0005.swift","type":"file","fileType":"swift","highlights":[{"line":20},{"line":21},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":63},{"line":64},{"line":65}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"role":"pseudoSymbol","title":"Contact detail feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"01-02-03-code-0006.swift":{"syntax":"swift","content":["import ComposableArchitecture","","struct CounterFeature: Reducer {","  struct State: Equatable {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","","  enum CancelID { case timer }","","  func reduce(into state: inout State, action: Action) -> Effect<Action> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      state.fact = nil","      return .none","","    case .factButtonTapped:","      state.fact = nil","      state.isLoading = true","      return .run { [count = state.count] send in","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","        let fact = String(decoding: data, as: UTF8.self)","        await send(.factResponse(fact))","      }","","    case let .factResponse(fact):","      state.fact = fact","      state.isLoading = false","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      state.fact = nil","      return .none","","    case .timerTick:","      state.count += 1","      state.fact = nil","      return .none","","    case .toggleTimerButtonTapped:","      state.isTimerRunning.toggle()","      if state.isTimerRunning {","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","        .cancellable(id: CancelID.timer)","      } else {","        return .cancel(id: CancelID.timer)","      }","    }","  }","}"],"fileName":"CounterFeature.swift","identifier":"01-02-03-code-0006.swift","type":"file","fileType":"swift","highlights":[]}}}