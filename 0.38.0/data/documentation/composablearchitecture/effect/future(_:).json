{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"future"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"attemptToFulfill"},{"kind":"text","text":": "},{"kind":"attribute","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"attribute","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output","preciseIdentifier":"s:22ComposableArchitecture6EffectV6Outputxmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure","preciseIdentifier":"s:22ComposableArchitecture6EffectV7Failureq_mfp"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"attemptToFulfill","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes a "},{"type":"codeVoice","code":"callback"},{"type":"text","text":" as an argument which can be"},{"type":"text","text":" "},{"type":"text","text":"used to feed it "},{"type":"codeVoice","code":"Result<Output, Failure>"},{"type":"text","text":" values."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be helpful for converting APIs that are callback-based into ones that deal with"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, to create an effect that delivers an integer after waiting a second:"}]},{"type":"codeListing","syntax":"swift","code":["Effect<Int, Never>.future { callback in","  DispatchQueue.main.asyncAfter(deadline: .now() + 1) {","    callback(.success(42))","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you can only deliver a single value to the "},{"type":"codeVoice","code":"callback"},{"type":"text","text":". If you send more they will be"},{"type":"text","text":" "},{"type":"text","text":"discarded:"}]},{"type":"codeListing","syntax":"swift","code":["Effect<Int, Never>.future { callback in","  DispatchQueue.main.asyncAfter(deadline: .now() + 1) {","    callback(.success(42))","    callback(.success(1729)) \/\/ Will not be emitted by the effect","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to deliver more than one value to the effect, you should use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" "},{"type":"text","text":"initializer that accepts a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/Subscriber"},{"type":"text","text":" value."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/effect\/future(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/future(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Creates an effect that can supply a single value asynchronously in the future."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"future"},{"kind":"text","text":"((("},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output","preciseIdentifier":"s:22ComposableArchitecture6EffectV6Outputxmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure","preciseIdentifier":"s:22ComposableArchitecture6EffectV7Failureq_mfp"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"title":"future(_:)","roleHeading":"Type Method","role":"symbol","symbolKind":"method","externalID":"s:22ComposableArchitecture6EffectV6futureyACyxq_Gyys6ResultOyxq_GccFZ","modules":[{"name":"ComposableArchitecture"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect/future(_:)":{"role":"symbol","title":"future(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"future"},{"kind":"text","text":"((("},{"kind":"typeIdentifier","text":"Result","preciseIdentifier":"s:s6ResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output","preciseIdentifier":"s:22ComposableArchitecture6EffectV6Outputxmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure","preciseIdentifier":"s:22ComposableArchitecture6EffectV7Failureq_mfp"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Creates an effect that can supply a single value asynchronously in the future."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/future(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/future(_:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect/Subscriber":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"Effect.Subscriber","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Subscriber"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/Subscriber","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Subscriber"}],"url":"\/documentation\/composablearchitecture\/effect\/subscriber"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" type encapsulates a unit of work that can be run in the outside world, and can"},{"type":"text","text":" "},{"type":"text","text":"feed data back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":". It is the perfect place to do side effects, such as network"},{"type":"text","text":" "},{"type":"text","text":"requests, saving\/loading from disk, creating timers, interacting with dependencies, and more."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"}}}