{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/treebasednavigation"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"role":"article","title":"Tree-based navigation","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}]},"abstract":[{"text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"how to model your domains, how to integrate features, how to test your features, and more."}],"seeAlsoSections":[{"anchor":"Tree-based-navigation","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"],"title":"Tree-based navigation","generated":true}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Tree-based navigation is the process of modeling navigation using optional and enum state. This"},{"text":" ","type":"text"},{"text":"style of navigation allows you to deep-link into any state of your application by simply","type":"text"},{"text":" ","type":"text"},{"text":"constructing a deeply nested piece of state, handing it off to SwiftUI, and letting it take care of","type":"text"},{"type":"text","text":" "},{"text":"the rest.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Basics"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Enum-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Integration","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"#Dismissal","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Testing","isActive":true}]}]}]},{"level":2,"text":"Basics","anchor":"Basics","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The tools for this style of navigation include the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"text":" macro,","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"type":"text","text":", the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"reference"},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"type":"text","text":"and that is all. Once your feature is properly integrated with those tools you can use all of"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI’s normal navigation view modifiers, such as "},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":", "},{"type":"codeVoice","code":"popover(item:)"},{"text":", etc.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The process of integrating two features together for navigation largely consists of 2 steps:","type":"text"},{"text":" ","type":"text"},{"text":"integrating the features’ domains together and integrating the features’ views together. One","type":"text"},{"type":"text","text":" "},{"type":"text","text":"typically starts by integrating the features’ domains together. This consists of adding the child’s"},{"type":"text","text":" "},{"text":"state and actions to the parent, and then utilizing a reducer operator to compose the child reducer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"into the parent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have a list of items and you want to be able to show a sheet to display a"},{"type":"text","text":" "},{"text":"form for adding a new item. We can integrate state and actions together by utilizing the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"text":" macro and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" type:","type":"text"}]},{"code":["@Reducer","struct InventoryFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addItem: ItemFormFeature.State?","    var items: IdentifiedArrayOf<Item> = []","    \/\/ ...","  }","","  enum Action {","    case addItem(PresentationAction<ItemFormFeature.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"addItem"},{"text":" state is held as an optional. A non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" value represents that feature is"},{"type":"text","text":" "},{"type":"text","text":"being presented, and "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presents the feature is dismissed."}],"type":"paragraph"}],"type":"aside"},{"inlineContent":[{"type":"text","text":"Next you can integrate the reducers of the parent and child features by using the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":" reducer operator, as well as having an"},{"type":"text","text":" "},{"text":"action in the parent domain for populating the child’s state to drive navigation:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct InventoryFeature {","  @ObservableState","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      switch action {","      case .addButtonTapped:","        \/\/ Populating this state performs the navigation","        state.addItem = ItemFormFeature.State()","        return .none","","      \/\/ ...","      }","    }","    .ifLet(\\.$addItem, action: \\.addItem) {","      ItemFormFeature()","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The key path used with ","type":"text"},{"type":"codeVoice","code":"ifLet"},{"text":" focuses on the ","type":"text"},{"type":"codeVoice","code":"@PresentationState"},{"type":"text","text":" projected value since it"},{"text":" ","type":"text"},{"type":"text","text":"uses the "},{"type":"codeVoice","code":"$"},{"text":" syntax. Also note that the action uses a","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"text":", which is analogous to key paths but","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tuned for enums."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all that it takes to integrate the domains and logic of the parent and child features. Next"},{"type":"text","text":" "},{"type":"text","text":"we need to integrate the features’ views. This is done by passing a binding of a store to one"},{"text":" ","type":"text"},{"type":"text","text":"of SwiftUI’s view modifiers."}]},{"inlineContent":[{"type":"text","text":"For example, to show a sheet from the "},{"code":"addItem","type":"codeVoice"},{"type":"text","text":" state in the "},{"type":"codeVoice","code":"InventoryFeature"},{"type":"text","text":", we can hand"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"sheet(item:)"},{"text":" modifier a binding of a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" as an argument that is focused on presentation"},{"text":" ","type":"text"},{"text":"state and actions:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct InventoryView: View {","  @Bindable var store: StoreOf<InventoryFeature>","","  var body: some View {","    List {","      \/\/ ...","    }","    .sheet(","      item: $store.scope(state: \\.addItem, action: \\.addItem)","    ) { store in","      ItemFormView(store: store)","    }","  }","}"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We use SwiftUI’s "},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" property wrapper to produce a binding to a store, which can be"},{"text":" ","type":"text"},{"type":"text","text":"further scoped using "},{"type":"codeVoice","code":"SwiftUI\/Binding\/scope(state:action:fileID:filePath:line:column:)"},{"type":"text","text":"."}]}],"type":"aside","style":"note","name":"Note"},{"inlineContent":[{"type":"text","text":"With those few steps completed the domains and views of the parent and child features are now"},{"type":"text","text":" "},{"type":"text","text":"integrated together, and when the "},{"type":"codeVoice","code":"addItem"},{"type":"text","text":" state flips to a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value the sheet will be"},{"text":" ","type":"text"},{"type":"text","text":"presented, and when it is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"’d out it will be dismissed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example we are using the "},{"code":".sheet","type":"codeVoice"},{"type":"text","text":" view modifier, but every view modifier SwiftUI ships can"},{"type":"text","text":" "},{"text":"be handed a store in this fashion, including ","type":"text"},{"type":"codeVoice","code":"popover(item:)"},{"text":", ","type":"text"},{"type":"codeVoice","code":"fullScreenCover(item:), "},{"text":"navigationDestination(item:)`, and more. This should make it possible to use optional state to","type":"text"},{"type":"text","text":" "},{"text":"drive any kind of navigation in a SwiftUI application.","type":"text"}]},{"text":"Enum state","level":2,"type":"heading","anchor":"Enum-state"},{"inlineContent":[{"type":"text","text":"While driving navigation with optional state can be powerful, it can also lead to less-than-ideal"},{"type":"text","text":" "},{"text":"modeled domains. In particular, if a feature can navigate to multiple screens then you may be","type":"text"},{"type":"text","text":" "},{"text":"tempted to model that with multiple optional values:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@ObservableState","struct State {","  @Presents var detailItem: DetailFeature.State?","  @Presents var editItem: EditFeature.State?","  @Presents var addItem: AddFeature.State?","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"However, this can lead to invalid states, such as 2 or more states being non-nil at the same time,"},{"text":" ","type":"text"},{"type":"text","text":"and that can cause a lot of problems. First of all, SwiftUI does not support presenting multiple"},{"type":"text","text":" "},{"type":"text","text":"views at the same time from a single view, and so by allowing this in our state we run the risk of"},{"type":"text","text":" "},{"type":"text","text":"putting our application into an inconsistent state with respect to SwiftUI."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Second, it becomes more difficult for us to determine what feature is actually being presented. We"},{"type":"text","text":" "},{"type":"text","text":"must check multiple optionals to figure out which one is non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", and then we must figure out how"},{"type":"text","text":" "},{"type":"text","text":"to interpret when multiple pieces of state are non-"},{"type":"codeVoice","code":"nil"},{"text":" at the same time.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"And the number of invalid states increases exponentially with respect to the number of features that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can be navigated to. For example, 3 optionals leads to 4 invalid states, 4 optionals leads to 11"},{"text":" ","type":"text"},{"text":"invalid states, and 5 optionals leads to 26 invalid states.","type":"text"}]},{"inlineContent":[{"text":"For these reasons, and more, it can be better to model multiple destinations in a feature as a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"single enum rather than multiple optionals. So the example of above, with 3 optionals, can be"},{"text":" ","type":"text"},{"type":"text","text":"refactored as an enum:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum State {","  case addItem(AddFeature.State)","  case detailItem(DetailFeature.State)","  case editItem(EditFeature.State)","  \/\/ ...","}"]},{"inlineContent":[{"text":"This gives us compile-time proof that only one single destination can be active at a time.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In order to utilize this style of domain modeling you must take a few extra steps. First you model a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“destination” reducer that encapsulates the domains and behavior of all of the features that you can"},{"type":"text","text":" "},{"type":"text","text":"navigate to. Typically it’s best to nest this reducer inside the feature that can perform the"},{"type":"text","text":" "},{"type":"text","text":"navigation, and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro can do most of the heavy lifting for us by implementing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"entire reducer from a simple description of the features that can be navigated to:"}],"type":"paragraph"},{"code":["@Reducer","struct InventoryFeature {","  \/\/ ...","","  @Reducer","  enum Destination {","    case addItem(AddFeature)","    case detailItem(DetailFeature)","    case editItem(EditFeature)","  }","}"],"type":"codeListing","syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro takes this simple enum description of destination features and"},{"text":" ","type":"text"},{"type":"text","text":"expands it into a fully composed feature that operates on enum state with a case for each"},{"text":" ","type":"text"},{"type":"text","text":"feature’s state. You can expand the macro code in Xcode to see everything that is written for you."}]}],"name":"Note","type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that done we can now hold onto a "},{"inlineContent":[{"type":"text","text":"single"}],"type":"emphasis"},{"type":"text","text":" piece of optional state in our feature, using the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"text":" macro, and we hold onto the destination actions using the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"text":" type:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct InventoryFeature {","  @ObservableState","  struct State { ","    @Presents var destination: Destination.State?","    \/\/ ...","  }","  enum Action {","    case destination(PresentationAction<Destination.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we must make use of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true,"type":"reference"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"to integrate the domain of the destination with the domain of the parent feature:"}]},{"syntax":"swift","code":["@Reducer","struct InventoryFeature {","  \/\/ ...","","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      \/\/ ...","    }","    .ifLet(\\.$destination, action: \\.destination) ","  }","}"],"type":"codeListing"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"It’s not necessary to specify ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" in a trialing closure of "},{"type":"codeVoice","code":"ifLet"},{"type":"text","text":" because it can"},{"text":" ","type":"text"},{"text":"automatically be inferred due to how the ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" enum was defined with the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" "},{"type":"text","text":"macro."}]}]},{"inlineContent":[{"text":"That completes the steps for integrating the child and parent features together.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now when we want to present a particular feature we can simply populate the "},{"code":"destination","type":"codeVoice"},{"type":"text","text":" state"},{"type":"text","text":" "},{"type":"text","text":"with a case of the enum:"}],"type":"paragraph"},{"code":["case addButtonTapped:","  state.destination = .addItem(AddFeature.State())","  return .none"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And at any time we can figure out exactly what feature is being presented by switching or otherwise","type":"text"},{"type":"text","text":" "},{"type":"text","text":"destructuring the single piece of "},{"code":"destination","type":"codeVoice"},{"type":"text","text":" state rather than checking multiple optional values."}]},{"inlineContent":[{"text":"The final step is to make use of the library’s scoping powers to focus in on the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"domain and further isolate a particular case of the state and action enums via dot-chaining."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose the “add” screen is presented as a sheet, the “edit” screen is presented","type":"text"},{"type":"text","text":" "},{"text":"by a popover, and the “detail” screen is presented in a drill-down. Then we can use the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":".sheet(item:)"},{"type":"text","text":", "},{"type":"codeVoice","code":".popover(item:)"},{"text":", and ","type":"text"},{"type":"codeVoice","code":".navigationDestination(item:)"},{"type":"text","text":" view modifiers that come"},{"text":" ","type":"text"},{"text":"from SwiftUI to have each of those styles of presentation powered by the respective case of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"destination enum."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To do this you must first hold onto the store in a bindable manner by using the ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryView: View {","  @Bindable var store: StoreOf<InventoryFeature>","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"And then in the "},{"code":"body","type":"codeVoice"},{"text":" of the view you can use the","type":"text"},{"text":" ","type":"text"},{"code":"SwiftUI\/Binding\/scope(state:action:fileID:filePath:line:column:)","type":"codeVoice"},{"text":" operator to derive bindings from ","type":"text"},{"code":"$store","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var body: some View {","  List {","    \/\/ ...","  }","  .sheet(","    item: $store.scope(","      state: \\.destination?.addItem,","      action: \\.destination.addItem","    )","  ) { store in ","    AddFeatureView(store: store)","  }","  .popover(","    item: $store.scope(","      state: \\.destination?.editItem,","      action: \\.destination.editItem","    )","  ) { store in ","    EditFeatureView(store: store)","  }","  .navigationDestination(","    item: $store.scope(","      state: \\.destination?.detailItem,","      action: \\.destination.detailItem","    )","  ) { store in ","    DetailFeatureView(store: store)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"With those steps completed you can be sure that your domains are modeled as concisely as possible.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the “add” item sheet was presented, and you decided to mutate the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state to point"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"codeVoice","code":".detailItem"},{"text":" case, then you can be certain that the sheet will be dismissed and the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"drill-down will occur immediately."}]},{"level":3,"type":"heading","anchor":"API-Unification","text":"API Unification"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the best features of tree-based navigation is that it unifies all forms of navigation with a"},{"type":"text","text":" "},{"text":"single style of API. First of all, regardless of the type of navigation you plan on performing,","type":"text"},{"type":"text","text":" "},{"text":"integrating the parent and child features together can be done with the single","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true,"type":"reference"},{"text":" operator. This one single API services","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all forms of optional-driven navigation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in the view, whether you are wanting to perform a drill-down, show a sheet, display"},{"text":" ","type":"text"},{"text":"an alert, or even show a custom navigation component, all you need to do is invoke an API that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is provided a store focused on some "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"text":". If you do","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that, then the API can handle the rest, making sure to present the child view when the state"},{"type":"text","text":" "},{"type":"text","text":"becomes non-"},{"type":"codeVoice","code":"nil"},{"text":" and dismissing when it goes back to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"This means that theoretically you could have a single view that needs to be able to show a sheet,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"popover, drill-down, alert "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" confirmation dialog, and all of the work to display the various"},{"type":"text","text":" "},{"text":"forms of navigation could be as simple as this:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":[".sheet(","  item: $store.scope(state: \\.addItem, action: \\.addItem)",") { store in ","  AddFeatureView(store: store)","}",".popover(","  item: $store.scope(state: \\.editItem, action: \\.editItem)",") { store in ","  EditFeatureView(store: store)","}",".navigationDestination(","  item: $store.scope(state: \\.detailItem, action: \\.detailItem)",") { store in ","  DetailFeatureView(store: store)","}",".alert(","  $store.scope(state: \\.alert, action: \\.alert)",")",".confirmationDialog(","  $store.scope(state: \\.confirmationDialog, action: \\.confirmationDialog)",")"],"type":"codeListing"},{"inlineContent":[{"text":"In each case we provide a store scoped to the presentation domain, and a view that will be presented","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when its corresponding state flips to non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":". It is incredibly powerful to see that so many"},{"type":"text","text":" "},{"text":"seemingly disparate forms of navigation can be unified under a single style of API.","type":"text"}],"type":"paragraph"},{"level":4,"anchor":"Backwards-compatible-availability","type":"heading","text":"Backwards compatible availability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on your deployment target, certain APIs may be unavailable. For example, if you target "},{"type":"text","text":"\n"},{"type":"text","text":"platforms earlier than iOS 16, macOS 13, tvOS 16 and watchOS 9, then you cannot use"},{"text":" ","type":"text"},{"code":"navigationDestination","type":"codeVoice"},{"type":"text","text":". Instead you can use "},{"type":"codeVoice","code":"NavigationLink"},{"text":", but you must define helper for","type":"text"},{"type":"text","text":" "},{"text":"driving navigation off of a binding of data rather than just a simple boolean. Just paste","type":"text"},{"text":" ","type":"text"},{"text":"the following into your project:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@available(iOS, introduced: 13, deprecated: 16)","@available(macOS, introduced: 10.15, deprecated: 13)","@available(tvOS, introduced: 13, deprecated: 16)","@available(watchOS, introduced: 6, deprecated: 9)","extension NavigationLink {","  public init<D, C: View>(","    item: Binding<D?>,","    onNavigate: @escaping (_ isActive: Bool) -> Void,","    @ViewBuilder destination: (D) -> C,","    @ViewBuilder label: () -> Label","  ) where Destination == C? {","    self.init(","      destination: item.wrappedValue.map(destination),","      isActive: Binding(","        get: { item.wrappedValue != nil },","        set: { isActive, transaction in","          onNavigate(isActive)","          if !isActive {","            item.transaction(transaction).wrappedValue = nil","          }","        }","      ),","      label: label","    )","  }","}"]},{"inlineContent":[{"text":"That gives you the ability to drive a ","type":"text"},{"code":"NavigationLink","type":"codeVoice"},{"type":"text","text":" from state. When the link is tapped the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"onNavigate"},{"text":" closure will be invoked, giving you the ability to populate state. And when the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature is dismissed, the state will be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"’d out."}],"type":"paragraph"},{"text":"Integration","level":2,"anchor":"Integration","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once your features are integrated together using the steps above, your parent feature gets instant"},{"type":"text","text":" "},{"type":"text","text":"access to everything happening inside the child feature. You can use this as a means to integrate"},{"text":" ","type":"text"},{"text":"the logic of child and parent features. For example, if you want to detect when the “Save” button","type":"text"},{"type":"text","text":" "},{"text":"inside the edit feature is tapped, you can simply destructure on that action. This consists of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"pattern matching on the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference"},{"type":"text","text":", then the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","type":"reference","isActive":true},{"type":"text","text":" case,"},{"type":"text","text":" "},{"type":"text","text":"then the feature you are interested in, and finally the action you are interested in:"}]},{"syntax":"swift","type":"codeListing","code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  \/\/ ..."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once inside that case you can then try extracting out the feature state so that you can perform"},{"type":"text","text":" "},{"text":"additional logic, such as closing the “edit” feature and saving the edited item to the database:","type":"text"}]},{"code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  guard case let .editItem(editItemState) = state.destination","  else { return .none }","","  state.destination = nil","  return .run { _ in","    self.database.save(editItemState.item)","  }"],"type":"codeListing","syntax":"swift"},{"text":"Dismissal","level":2,"type":"heading","anchor":"Dismissal"},{"inlineContent":[{"type":"text","text":"Dismissing a presented feature is as simple as "},{"code":"nil","type":"codeVoice"},{"text":"-ing out the state that represents the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"presented feature:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["case .closeButtonTapped:","  state.destination = nil","  return .none"]},{"inlineContent":[{"text":"In order to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the presenting state you must have access to that state, and usually only the"},{"type":"text","text":" "},{"text":"parent has access, but often we would like to encapsulate the logic of dismissing a feature to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"inside the child feature without needing explicit communication with the parent."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"SwiftUI provides a wonderful tool for allowing child "},{"inlineContent":[{"text":"views","type":"text"}],"type":"emphasis"},{"type":"text","text":" to dismiss themselves from the parent,"},{"type":"text","text":" "},{"type":"text","text":"all without any explicit communication with the parent. It’s an environment value called "},{"type":"codeVoice","code":"dismiss"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and it can be used like so:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"code":"self.dismiss()","type":"codeVoice"},{"text":" is invoked, SwiftUI finds the closest parent view with a presentation, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"causes it to dismiss by writing "},{"type":"codeVoice","code":"false"},{"type":"text","text":" or "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" to the binding that drives the presentation. This"},{"type":"text","text":" "},{"type":"text","text":"can be incredibly useful, but it is also relegated to the view layer. It is not possible to use"},{"text":" ","type":"text"},{"type":"codeVoice","code":"dismiss"},{"text":" elsewhere, like in an observable object, which would allow you to have nuanced logic","type":"text"},{"type":"text","text":" "},{"text":"for dismissal such as validation or async work.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,"},{"text":" ","type":"text"},{"text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s","type":"text"},{"type":"text","text":" "},{"text":"dependency management system (see ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","isActive":true,"type":"reference"},{"type":"text","text":") using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .closeButtonTapped:","        return .run { _ in await self.dismiss() }","      }","    }","  }","}"]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"text":" function is async which means it cannot be invoked directly inside a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"reducer. Instead it must be called from "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"code":"self.dismiss()","type":"codeVoice"},{"text":" is invoked it will ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the state responsible for presenting the feature"},{"type":"text","text":" "},{"type":"text","text":"by sending a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"reference","isActive":true},{"text":" action back into the system, causing the feature to be","type":"text"},{"type":"text","text":" "},{"text":"dismissed. This allows you to encapsulate the logic for dismissing a child feature entirely inside","type":"text"},{"text":" ","type":"text"},{"text":"the child domain without explicitly communicating with the parent.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Because dismissal is handled by sending an action, it is not valid to ever send an action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"after invoking "},{"code":"dismiss()","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To do so would be to send an action for a feature while its state is "},{"type":"codeVoice","code":"nil"},{"text":", and that will cause","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a runtime warning in Xcode and a test failure when running tests."}]}],"type":"aside","style":"note"},{"type":"aside","style":"warning","name":"Warning","content":[{"inlineContent":[{"text":"SwiftUI’s environment value ","type":"text"},{"type":"codeVoice","code":"@Environment(\\.dismiss)"},{"text":" and the Composable Architecture’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dependency value "},{"code":"@Dependency(\\.dismiss)","type":"codeVoice"},{"text":" serve similar purposes, but are completely different","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s"},{"type":"text","text":" "},{"type":"text","text":"dependency value can only be used inside reducers."}],"type":"paragraph"}]},{"anchor":"Testing","type":"heading","text":"Testing","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A huge benefit of properly modeling your domains for navigation is that testing becomes quite easy."},{"type":"text","text":" "},{"type":"text","text":"Further, using “non-exhaustive testing” (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"type":"text","text":") can be very"},{"type":"text","text":" "},{"text":"useful for testing navigation since you often only want to assert on a few high level details and","type":"text"},{"type":"text","text":" "},{"text":"not all state mutations and effects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, consider the following simple counter feature that wants to dismiss itself if its"},{"text":" ","type":"text"},{"text":"count is greater than or equal to 5:","type":"text"}]},{"type":"codeListing","code":["@Reducer","struct CounterFeature {","  @ObservableState","  struct State: Equatable {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return state.count >= 5","          ? .run { _ in await self.dismiss() }","          : .none","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then let’s embed that feature into a parent feature using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"type":"text","text":" macro,"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"text":" type and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":" "},{"type":"text","text":"operator:"}]},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State: Equatable {","    @Presents var counter: CounterFeature.State?","  }","  enum Action {","    case counter(PresentationAction<CounterFeature.Action>)","  }","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .ifLet(\\.$counter, action: \\.counter) {","      CounterFeature()","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Now let’s try to write a test on the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"text":" reducer that proves that when the child counter","type":"text"},{"text":" ","type":"text"},{"text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" for "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" that starts in a state with the count already set to 3:"}],"type":"paragraph"},{"type":"codeListing","code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then we can send the ","type":"text"},{"type":"codeVoice","code":".incrementButtonTapped"},{"text":" action in the counter child feature to confirm","type":"text"},{"text":" ","type":"text"},{"text":"that the count goes up by one:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(\\.counter.incrementButtonTapped) {","  $0.counter?.count = 4","}"]},{"type":"paragraph","inlineContent":[{"text":"And then we can send it one more time to see that the count goes up to 5:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(\\.counter.incrementButtonTapped) {","  $0.counter?.count = 5","}"]},{"inlineContent":[{"type":"text","text":"And then we finally expect that the child dismisses itself, which manifests itself as the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","isActive":true},{"type":"text","text":" action being sent to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the "},{"code":"counter","type":"codeVoice"},{"text":" state, which we can","type":"text"},{"text":" ","type":"text"},{"text":"assert using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","isActive":true},{"text":" method on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await store.receive(\\.counter.dismiss) {","  $0.counter = nil","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This shows how we can write very nuanced tests on how parent and child features interact with each"},{"text":" ","type":"text"},{"type":"text","text":"other."}]},{"inlineContent":[{"type":"text","text":"However, the more complex the features become, the more cumbersome testing their integration can be."},{"text":" ","type":"text"},{"text":"By default, ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" requires us to be exhaustive in our assertions. We must assert on how"},{"text":" ","type":"text"},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"text":" ","type":"text"},{"type":"text","text":"sure that all effects finish by the end of the test (see "},{"type":"text","text":"doc:Testing"},{"text":" for more info).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"But ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" also supports a form of testing known as “non-exhaustive testing” that allows you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to assert on only the parts of the features that you actually care about (see"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","isActive":true},{"type":"text","text":" for more info)."}]},{"inlineContent":[{"type":"text","text":"For example, if we turn off exhaustivity on the test store (see "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true,"type":"reference"},{"text":") then we","type":"text"},{"text":" ","type":"text"},{"text":"can assert at a high level that when the increment button is tapped twice that eventually we receive","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a dismiss action:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(\\.counter.incrementButtonTapped)","  await store.send(\\.counter.incrementButtonTapped)","  await store.receive(\\.counter.dismiss) ","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer"},{"text":" ","type":"text"},{"text":"lines and is more resilient to future changes in the features that we don’t necessarily care about.","type":"text"}]},{"inlineContent":[{"text":"That is the basics of testing, but things get a little more complicated when you leverage the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"concepts outlined in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","isActive":true},{"text":" in which you model multiple destinations","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as an enum instead of multiple optionals. In order to assert on state changes when using enum"},{"text":" ","type":"text"},{"type":"text","text":"state you must chain into the particular case to make a mutation:"}],"type":"paragraph"},{"code":["await store.send(\\.destination.counter.incrementButtonTapped) {","  $0.destination?.counter?.count = 4","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"kind":"article","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"url":"\/documentation\/composablearchitecture\/navigation","title":"Navigation","type":"topic","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"},"#Integration":{"identifier":"#Integration","title":"Integration","url":"#Integration","type":"link","titleInlineContent":[{"text":"Integration","type":"text"}]},"#Basics":{"identifier":"#Basics","title":"Basics","url":"#Basics","type":"link","titleInlineContent":[{"text":"Basics","type":"text"}]},"#Enum-state":{"identifier":"#Enum-state","title":"Enum state","url":"#Enum-state","type":"link","titleInlineContent":[{"text":"Enum state","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"role":"symbol"},"#Dismissal":{"identifier":"#Dismissal","title":"Dismissal","url":"#Dismissal","type":"link","titleInlineContent":[{"text":"Dismissal","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","title":"DismissEffect","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"An effect that dismisses the current presentation."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DismissEffect"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","kind":"symbol","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"role":"collection","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"run"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":", "},{"text":"Send","preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"run(priority:operation:catch:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","title":"Reducer()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" protocol for a type.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","title":"Enum state","abstract":[],"url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state","type":"topic","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"kind":"symbol","type":"topic","title":"Presents()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Presents"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","url":"\/documentation\/composablearchitecture\/presents()","role":"symbol","abstract":[{"text":"Wraps a property with ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true},{"type":"text","text":" and observes it."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"text":">\n","kind":"text"}],"abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"title":"ifLet(_:action:destination:fileID:filePath:line:column:)","kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:filepath:line:column:)-4ub6q","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"title":"Reducer"},"#Testing":{"identifier":"#Testing","title":"Testing","url":"#Testing","type":"link","titleInlineContent":[{"type":"text","text":"Testing"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","title":"Non-exhaustive testing","abstract":[],"url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing","type":"topic","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"kind":"text","text":": "},{"text":"Exhaustivity","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","type":"topic","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"kind":"symbol","title":"exhaustivity","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","kind":"article","role":"article","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"type":"text","text":" "},{"text":"any reducer.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement","title":"Dependencies"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"role":"symbol","title":"Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-53wic":{"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-53wic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"abstract":[{"type":"text","text":"Asserts an action was received matching a case path and asserts how the state changes."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"receive(_:timeout:assert:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"role":"symbol","abstract":[{"text":"An action sent to ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" out the associated presentation state."}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}],"url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","kind":"symbol","title":"PresentationAction.dismiss","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"kind":"symbol","type":"topic","title":"TestStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"PresentationState","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","navigatorTitle":[{"text":"PresentationState","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"title":"PresentationState","role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/presentationstate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"url":"\/documentation\/composablearchitecture\/presentationaction","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}],"title":"PresentationAction"},"http://github.com/pointfreeco/swift-case-paths":{"url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","titleInlineContent":[{"type":"text","text":"case path"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","title":"case path","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"type":"topic","title":"PresentationAction.presented(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","role":"symbol","kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"presented","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" presentation state.","type":"text"}]}}}