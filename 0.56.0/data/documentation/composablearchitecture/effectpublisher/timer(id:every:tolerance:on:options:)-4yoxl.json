{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timer"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"externalParam","text":"every"},{"kind":"text","text":" "},{"kind":"internalParam","text":"interval"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"on"},{"kind":"text","text":" "},{"kind":"internalParam","text":"scheduler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":"? = nil) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV","text":"EffectPublisher"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Hashable","preciseIdentifier":"s:SH"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Scheduler","preciseIdentifier":"s:7Combine9SchedulerP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"id","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The effect’s identifier."}]}]},{"name":"interval","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The time interval on which to publish events. For example, a value of "},{"type":"codeVoice","code":"0.5"},{"type":"text","text":" "},{"type":"text","text":"publishes an event approximately every half-second."}]}]},{"name":"scheduler","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The scheduler on which the timer runs."}]}]},{"name":"tolerance","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The allowed timing variance when emitting events. Defaults to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", which"},{"type":"text","text":" "},{"type":"text","text":"allows any variance."}]}]},{"name":"options","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Scheduler options passed to the timer. Defaults to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While it is possible to use Foundation’s "},{"type":"codeVoice","code":"Timer.publish(every:tolerance:on:in:options:)"},{"type":"text","text":" API"},{"type":"text","text":" "},{"type":"text","text":"to create a timer in the Composable Architecture, it is not advisable. This API only allows"},{"type":"text","text":" "},{"type":"text","text":"creating a timer on a run loop, which means when writing tests you will need to explicitly"},{"type":"text","text":" "},{"type":"text","text":"wait for time to pass in order to see how the effect evolves in your feature."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture we test time-based effects like this by using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"TestScheduler"},{"type":"text","text":", which allows us to explicitly and immediately advance time forward so that"},{"type":"text","text":" "},{"type":"text","text":"we can see how effects emit. However, because "},{"type":"codeVoice","code":"Timer.publish"},{"type":"text","text":" takes a concrete "},{"type":"codeVoice","code":"RunLoop"},{"type":"text","text":" as"},{"type":"text","text":" "},{"type":"text","text":"its scheduler, we can’t substitute in a "},{"type":"codeVoice","code":"TestScheduler"},{"type":"text","text":" during tests`."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is why we provide "},{"type":"codeVoice","code":"EffectTask.timer"},{"type":"text","text":". It allows you to create a timer that works with any"},{"type":"text","text":" "},{"type":"text","text":"scheduler, not just a run loop, which means you can use a "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":" or "},{"type":"codeVoice","code":"RunLoop"},{"type":"text","text":" when"},{"type":"text","text":" "},{"type":"text","text":"running your live app, but use a "},{"type":"codeVoice","code":"TestScheduler"},{"type":"text","text":" in tests."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To start and stop a timer in your feature you can create the timer effect from an action"},{"type":"text","text":" "},{"type":"text","text":"and then use the "},{"type":"codeVoice","code":"EffectPublisher\/cancel(id:)-6hzsl"},{"type":"text","text":" effect to stop the timer:"}]},{"type":"codeListing","syntax":"swift","code":["struct Feature: ReducerProtocol {","  struct State { var count = 0 }","  enum Action { case startButtonTapped, stopButtonTapped, timerTicked }","  @Dependency(\\.mainQueue) var mainQueue","  struct TimerID: Hashable {}","","  func reduce(into state: inout State, action: Action) -> EffectTask<Action> {","    switch action {","    case .startButtonTapped:","      return EffectTask.timer(id: TimerID(), every: 1, on: self.mainQueue)","        .map { _ in .timerTicked }","","    case .stopButtonTapped:","      return .cancel(id: TimerID())","","    case .timerTicked:","      state.count += 1","      return .none","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then to test the timer in this feature you can use a test scheduler to advance time:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","func testTimer() async {","  let mainQueue = DispatchQueue.test","","  let store = TestStore(initialState: Feature.State()) {","    Feature()","  } withDependencies: {","    $0.mainQueue = mainQueue.eraseToAnyScheduler()","  }","","  await store.send(.startButtonTapped)","","  await mainQueue.advance(by: .seconds(1))","  await store.receive(.timerTicked) { $0.count = 1 }","","  await mainQueue.advance(by: .seconds(5))","  await store.receive(.timerTicked) { $0.count = 2 }","  await store.receive(.timerTicked) { $0.count = 3 }","  await store.receive(.timerTicked) { $0.count = 4 }","  await store.receive(.timerTicked) { $0.count = 5 }","  await store.receive(.timerTicked) { $0.count = 6 }","","  await store.send(.stopButtonTapped)","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This effect is only meant to be used with features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture, and returned from a reducer. If you want a testable alternative to"},{"type":"text","text":" "},{"type":"text","text":"Foundation’s "},{"type":"codeVoice","code":"Timer.publish"},{"type":"text","text":" you can use the publisher "},{"type":"codeVoice","code":"Publishers.Timer"},{"type":"text","text":" that is included"},{"type":"text","text":" "},{"type":"text","text":"in this library via the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers"},{"type":"text","text":" module."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/composablearchitecture\/effectpublisher\/timer(id:every:tolerance:on:options:)-4yoxl"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/timer(id:every:tolerance:on:options:)-4yoxl","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns an effect that repeatedly emits the current time of the given scheduler on the given"},{"type":"text","text":" "},{"type":"text","text":"interval."}],"kind":"symbol","metadata":{"modules":[{"name":"ComposableArchitecture"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"timer(id:every:tolerance:on:options:)","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timer"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"externalParam","text":"every"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"symbolKind":"method","externalID":"s:22ComposableArchitecture15EffectPublisherVAAs5NeverORs_rlE5timer2id5every9tolerance2on7optionsACyxAEGqd___6StrideQzANSgqd_0_16SchedulerOptionsQyd_0_Sgt0M8TimeTypeQyd_0_RszSHRd__7Combine0M0Rd_0_r0_lFZ","extendedModule":"ComposableArchitecture","platforms":[]},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'clock.timer' in an 'Effect.run', instead."}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher":{"deprecated":true,"role":"symbol","title":"EffectPublisher","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectPublisher"}],"abstract":[{"type":"text","text":"This type is deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":". See its documentation for more information."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectPublisher"}],"url":"\/documentation\/composablearchitecture\/effectpublisher"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectTask":{"role":"symbol","title":"EffectTask","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectTask"}],"abstract":[{"type":"text","text":"A type that encapsulates a unit of work that can be run in the outside world, and can feed"},{"type":"text","text":" "},{"type":"text","text":"actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":"."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectTask"}],"url":"\/documentation\/composablearchitecture\/effecttask"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectPublisher/timer(id:every:tolerance:on:options:)-4yoxl":{"conformance":{"constraints":[{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"timer(id:every:tolerance:on:options:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"timer"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ID"},{"kind":"text","text":", "},{"kind":"externalParam","text":"every"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tolerance"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerTimeType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SchedulerOptions"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"EffectPublisher","preciseIdentifier":"s:22ComposableArchitecture15EffectPublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns an effect that repeatedly emits the current time of the given scheduler on the given"},{"type":"text","text":" "},{"type":"text","text":"interval."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectPublisher\/timer(id:every:tolerance:on:options:)-4yoxl","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/composablearchitecture\/effectpublisher\/timer(id:every:tolerance:on:options:)-4yoxl"},"https://github.com/pointfreeco/combine-schedulers":{"title":"CombineSchedulers","titleInlineContent":[{"type":"codeVoice","code":"CombineSchedulers"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers","url":"https:\/\/github.com\/pointfreeco\/combine-schedulers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectDeprecations":{"role":"collectionGroup","title":"Deprecations","abstract":[{"type":"text","text":"Review unsupported effect APIs and their replacements."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectDeprecations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/effectdeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"role":"symbol","title":"ReducerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerProtocol"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectTask"},{"type":"text","text":"s should be executed later by the store, if"},{"type":"text","text":" "},{"type":"text","text":"any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerProtocol"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store"}}}